
bluetooth_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005024  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036cc  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008838  08008838  00018838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800883c  0800883c  0001883c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000008  08008840  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003f68  200001e4  08008a1c  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000414c  08008a1c  0002414c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016e49  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002f3b  00000000  00000000  000370a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000016f0  00000000  00000000  00039fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001184  00000000  00000000  0003b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00022933  00000000  00000000  0003c854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015916  00000000  00000000  0005f187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000db9ab  00000000  00000000  00074a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006570  00000000  00000000  00150448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001569b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800514c 	.word	0x0800514c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	0800514c 	.word	0x0800514c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800052c:	f023 0218 	bic.w	r2, r3, #24
 8000530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4313      	orrs	r3, r2
 8000538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4013      	ands	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056c:	68fb      	ldr	r3, [r7, #12]
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fddf 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f857 	bl	8000638 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800058a:	f000 f8cb 	bl	8000724 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f99b 	bl	80008c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000592:	f000 f923 	bl	80007dc <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000596:	f000 f96f 	bl	8000878 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 800059a:	f000 f8e1 	bl	8000760 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  init_display();
 800059e:	f000 fa15 	bl	80009cc <init_display>
  initDisplayBuffer();
 80005a2:	f000 fba9 	bl	8000cf8 <initDisplayBuffer>
  uint32_t startTime = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	623b      	str	r3, [r7, #32]

  const uint32_t interval = 1000;
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	61fb      	str	r3, [r7, #28]
  startTime = HAL_GetTick();
 80005b0:	f000 fe36 	bl	8001220 <HAL_GetTick>
 80005b4:	6238      	str	r0, [r7, #32]
  uint32_t seconds = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  char str[12];
  uint32_t startTime1 = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
	  sendToDisplay();
	  HAL_Delay(1000);
	  invertDisplayBuffer();
	  sendToDisplay();
	  HAL_Delay(1000);*/
	  if (HAL_GetTick() - startTime >= interval) {
 80005be:	f000 fe2f 	bl	8001220 <HAL_GetTick>
 80005c2:	4602      	mov	r2, r0
 80005c4:	6a3b      	ldr	r3, [r7, #32]
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	69fa      	ldr	r2, [r7, #28]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d8f7      	bhi.n	80005be <main+0x42>
		 seconds++;
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	3301      	adds	r3, #1
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
		 //clear_display();
		 //initDisplayBuffer();
		 startTime1 = HAL_GetTick();
 80005d4:	f000 fe24 	bl	8001220 <HAL_GetTick>
 80005d8:	61b8      	str	r0, [r7, #24]
		 drawString(30, 60, "Schnuffi", 1);
 80005da:	2301      	movs	r3, #1
 80005dc:	4a14      	ldr	r2, [pc, #80]	; (8000630 <main+0xb4>)
 80005de:	213c      	movs	r1, #60	; 0x3c
 80005e0:	201e      	movs	r0, #30
 80005e2:	f000 fb63 	bl	8000cac <drawString>
		 drawString(30, 100, "Schnuffi", 1);
 80005e6:	2301      	movs	r3, #1
 80005e8:	4a11      	ldr	r2, [pc, #68]	; (8000630 <main+0xb4>)
 80005ea:	2164      	movs	r1, #100	; 0x64
 80005ec:	201e      	movs	r0, #30
 80005ee:	f000 fb5d 	bl	8000cac <drawString>
		 drawString(30, 140, "Schnuffi", 1);
 80005f2:	2301      	movs	r3, #1
 80005f4:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <main+0xb4>)
 80005f6:	218c      	movs	r1, #140	; 0x8c
 80005f8:	201e      	movs	r0, #30
 80005fa:	f000 fb57 	bl	8000cac <drawString>
		 startTime1 = HAL_GetTick() - startTime1;
 80005fe:	f000 fe0f 	bl	8001220 <HAL_GetTick>
 8000602:	4602      	mov	r2, r0
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	61bb      	str	r3, [r7, #24]
		 sprintf(str1, "%lu ms", startTime1);
 800060a:	463b      	mov	r3, r7
 800060c:	69ba      	ldr	r2, [r7, #24]
 800060e:	4909      	ldr	r1, [pc, #36]	; (8000634 <main+0xb8>)
 8000610:	4618      	mov	r0, r3
 8000612:	f004 f8f7 	bl	8004804 <siprintf>
		 drawString(80, 20, str1, 1);
 8000616:	463a      	mov	r2, r7
 8000618:	2301      	movs	r3, #1
 800061a:	2114      	movs	r1, #20
 800061c:	2050      	movs	r0, #80	; 0x50
 800061e:	f000 fb45 	bl	8000cac <drawString>
		 sendToDisplay();
 8000622:	f000 fa25 	bl	8000a70 <sendToDisplay>
		 HAL_Delay(1000);
 8000626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062a:	f000 fe11 	bl	8001250 <HAL_Delay>
	  if (HAL_GetTick() - startTime >= interval) {
 800062e:	e7c6      	b.n	80005be <main+0x42>
 8000630:	08005164 	.word	0x08005164
 8000634:	08005170 	.word	0x08005170

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b09a      	sub	sp, #104	; 0x68
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2248      	movs	r2, #72	; 0x48
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 f8fc 	bl	8004844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800065e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800066c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800066e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	f023 0303 	bic.w	r3, r3, #3
 8000678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000682:	f001 f96d 	bl	8001960 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000686:	2000      	movs	r0, #0
 8000688:	f7ff ff48 	bl	800051c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <SystemClock_Config+0xe8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000694:	4a22      	ldr	r2, [pc, #136]	; (8000720 <SystemClock_Config+0xe8>)
 8000696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <SystemClock_Config+0xe8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80006a8:	2327      	movs	r3, #39	; 0x27
 80006aa:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006b2:	2301      	movs	r3, #1
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2340      	movs	r3, #64	; 0x40
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c8:	2360      	movs	r3, #96	; 0x60
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fcd7 	bl	8002088 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006e0:	f000 f950 	bl	8000984 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006e4:	236f      	movs	r3, #111	; 0x6f
 80006e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006e8:	2302      	movs	r3, #2
 80006ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2101      	movs	r1, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f002 f833 	bl	8002770 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000710:	f000 f938 	bl	8000984 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000714:	f002 fdee 	bl	80032f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000718:	bf00      	nop
 800071a:	3768      	adds	r7, #104	; 0x68
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58000400 	.word	0x58000400

08000724 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072a:	463b      	mov	r3, r7
 800072c:	2250      	movs	r2, #80	; 0x50
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f004 f887 	bl	8004844 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000740:	2300      	movs	r3, #0
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fc5e 	bl	8003008 <HAL_RCCEx_PeriphCLKConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000752:	f000 f917 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000766:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <MX_SPI1_Init+0x78>)
 8000768:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_SPI1_Init+0x74>)
 800076c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000770:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_SPI1_Init+0x74>)
 800077a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800077e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_SPI1_Init+0x74>)
 800078e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000792:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000796:	2210      	movs	r2, #16
 8000798:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_SPI1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007ae:	2207      	movs	r2, #7
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007c0:	f002 feaf 	bl	8003522 <HAL_SPI_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f8db 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000200 	.word	0x20000200
 80007d8:	40013000 	.word	0x40013000

080007dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <MX_USART1_UART_Init+0x94>)
 80007e2:	4a24      	ldr	r2, [pc, #144]	; (8000874 <MX_USART1_UART_Init+0x98>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <MX_USART1_UART_Init+0x94>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80007ee:	4b20      	ldr	r3, [pc, #128]	; (8000870 <MX_USART1_UART_Init+0x94>)
 80007f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007f4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <MX_USART1_UART_Init+0x94>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_USART1_UART_Init+0x94>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <MX_USART1_UART_Init+0x94>)
 8000804:	220c      	movs	r2, #12
 8000806:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_USART1_UART_Init+0x94>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_USART1_UART_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_USART1_UART_Init+0x94>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_USART1_UART_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_USART1_UART_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000826:	4812      	ldr	r0, [pc, #72]	; (8000870 <MX_USART1_UART_Init+0x94>)
 8000828:	f003 fa18 	bl	8003c5c <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000832:	f000 f8a7 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_USART1_UART_Init+0x94>)
 800083a:	f003 fedf 	bl	80045fc <HAL_UARTEx_SetTxFifoThreshold>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000844:	f000 f89e 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <MX_USART1_UART_Init+0x94>)
 800084c:	f003 ff14 	bl	8004678 <HAL_UARTEx_SetRxFifoThreshold>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000856:	f000 f895 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART1_UART_Init+0x94>)
 800085c:	f003 fe95 	bl	800458a <HAL_UARTEx_DisableFifoMode>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000866:	f000 f88d 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000264 	.word	0x20000264
 8000874:	40013800 	.word	0x40013800

08000878 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_USB_PCD_Init+0x48>)
 800087e:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <MX_USB_PCD_Init+0x4c>)
 8000880:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USB_PCD_Init+0x48>)
 8000884:	2208      	movs	r2, #8
 8000886:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_USB_PCD_Init+0x48>)
 800088a:	2202      	movs	r2, #2
 800088c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USB_PCD_Init+0x48>)
 8000890:	2202      	movs	r2, #2
 8000892:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_USB_PCD_Init+0x48>)
 8000896:	2200      	movs	r2, #0
 8000898:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USB_PCD_Init+0x48>)
 800089c:	2200      	movs	r2, #0
 800089e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_USB_PCD_Init+0x48>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USB_PCD_Init+0x48>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_USB_PCD_Init+0x48>)
 80008ae:	f000 ff5f 	bl	8001770 <HAL_PCD_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80008b8:	f000 f864 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200002f8 	.word	0x200002f8
 80008c4:	40006800 	.word	0x40006800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008dc:	2004      	movs	r0, #4
 80008de:	f7ff fe33 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2001      	movs	r0, #1
 80008e4:	f7ff fe30 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e8:	2002      	movs	r0, #2
 80008ea:	f7ff fe2d 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	2008      	movs	r0, #8
 80008f0:	f7ff fe2a 	bl	8000548 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fe:	f000 ff1f 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2123      	movs	r1, #35	; 0x23
 8000906:	481c      	ldr	r0, [pc, #112]	; (8000978 <MX_GPIO_Init+0xb0>)
 8000908:	f000 ff1a 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 800090c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000910:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000926:	f000 fd9b 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092a:	2310      	movs	r3, #16
 800092c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	4810      	ldr	r0, [pc, #64]	; (800097c <MX_GPIO_Init+0xb4>)
 800093c:	f000 fd90 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000940:	2323      	movs	r3, #35	; 0x23
 8000942:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4619      	mov	r1, r3
 8000954:	4808      	ldr	r0, [pc, #32]	; (8000978 <MX_GPIO_Init+0xb0>)
 8000956:	f000 fd83 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800095a:	2303      	movs	r3, #3
 800095c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	4619      	mov	r1, r3
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_GPIO_Init+0xb8>)
 800096c:	f000 fd78 	bl	8001460 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	48000400 	.word	0x48000400
 800097c:	48000800 	.word	0x48000800
 8000980:	48000c00 	.word	0x48000c00

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <clearDisplay>:
uint8_t backBuffer[DISPLAY_HEIGHT][DISPLAY_WIDTH / 8] __attribute__((aligned(4)));
uint8_t (*currentBuffer)[DISPLAY_WIDTH / 8] = backBuffer;
uint8_t sendToDisplayBuffer[TOTAL_DATA_SIZE];


void clearDisplay(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	SCS_HIGH();
 8000994:	2201      	movs	r2, #1
 8000996:	2110      	movs	r1, #16
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f000 fed0 	bl	8001740 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &clear_command, 1, HAL_MAX_DELAY);
 80009a0:	f04f 33ff 	mov.w	r3, #4294967295
 80009a4:	2201      	movs	r2, #1
 80009a6:	4907      	ldr	r1, [pc, #28]	; (80009c4 <clearDisplay+0x34>)
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <clearDisplay+0x38>)
 80009aa:	f002 fe5d 	bl	8003668 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, &dummy_8bit, 1, HAL_MAX_DELAY);
	SCS_LOW();
 80009ae:	2200      	movs	r2, #0
 80009b0:	2110      	movs	r1, #16
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b6:	f000 fec3 	bl	8001740 <HAL_GPIO_WritePin>
	toggle_vcom();
 80009ba:	f000 f82d 	bl	8000a18 <toggle_vcom>
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000180 	.word	0x20000180
 80009c8:	20000200 	.word	0x20000200

080009cc <init_display>:

void init_display(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	// Step 1
	HAL_Delay(10);
 80009d0:	200a      	movs	r0, #10
 80009d2:	f000 fc3d 	bl	8001250 <HAL_Delay>
	DISP_LOW();
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f000 feae 	bl	8001740 <HAL_GPIO_WritePin>
	SCS_LOW();
 80009e4:	2200      	movs	r2, #0
 80009e6:	2110      	movs	r1, #16
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ec:	f000 fea8 	bl	8001740 <HAL_GPIO_WritePin>
	EXTCOMIN_LOW();
 80009f0:	2200      	movs	r2, #0
 80009f2:	2140      	movs	r1, #64	; 0x40
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f8:	f000 fea2 	bl	8001740 <HAL_GPIO_WritePin>
	// Step 2
	clearDisplay();
 80009fc:	f7ff ffc8 	bl	8000990 <clearDisplay>
	HAL_Delay(50);
 8000a00:	2032      	movs	r0, #50	; 0x32
 8000a02:	f000 fc25 	bl	8001250 <HAL_Delay>
	// Step 3
	DISP_HIGH();
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f000 fe96 	bl	8001740 <HAL_GPIO_WritePin>
	// Step 4
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <toggle_vcom>:

void toggle_vcom(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	SCS_HIGH();
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2110      	movs	r1, #16
 8000a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a24:	f000 fe8c 	bl	8001740 <HAL_GPIO_WritePin>
	vcom_bit ^= 0x40;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <toggle_vcom+0x4c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <toggle_vcom+0x4c>)
 8000a34:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &vcom_bit, 1, HAL_MAX_DELAY);
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4909      	ldr	r1, [pc, #36]	; (8000a64 <toggle_vcom+0x4c>)
 8000a3e:	480a      	ldr	r0, [pc, #40]	; (8000a68 <toggle_vcom+0x50>)
 8000a40:	f002 fe12 	bl	8003668 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &dummy_8bit, 1, HAL_MAX_DELAY);
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4908      	ldr	r1, [pc, #32]	; (8000a6c <toggle_vcom+0x54>)
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <toggle_vcom+0x50>)
 8000a4e:	f002 fe0b 	bl	8003668 <HAL_SPI_Transmit>
	SCS_LOW();
 8000a52:	2200      	movs	r2, #0
 8000a54:	2110      	movs	r1, #16
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f000 fe71 	bl	8001740 <HAL_GPIO_WritePin>
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000182 	.word	0x20000182
 8000a68:	20000200 	.word	0x20000200
 8000a6c:	200005d5 	.word	0x200005d5

08000a70 <sendToDisplay>:
	RED_LED_OFF();
	toggle_vcom();
}

// This uses a more efficient SPI transfer method
void sendToDisplay(void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
	uint8_t* sendBufferPtr = sendToDisplayBuffer;
 8000a76:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <sendToDisplay+0xcc>)
 8000a78:	60fb      	str	r3, [r7, #12]
	*sendBufferPtr++ = write_mode;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	60fa      	str	r2, [r7, #12]
 8000a80:	4a2f      	ldr	r2, [pc, #188]	; (8000b40 <sendToDisplay+0xd0>)
 8000a82:	7812      	ldrb	r2, [r2, #0]
 8000a84:	701a      	strb	r2, [r3, #0]

	for (uint8_t line = 1; line <= DISPLAY_HEIGHT; line++) {
 8000a86:	2301      	movs	r3, #1
 8000a88:	72fb      	strb	r3, [r7, #11]
 8000a8a:	e027      	b.n	8000adc <sendToDisplay+0x6c>
	    // Send line address inverted
	    uint8_t line_address = (uint8_t)(__RBIT((uint8_t)(line)) >> 24);
 8000a8c:	7afb      	ldrb	r3, [r7, #11]
 8000a8e:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	fa93 f3a3 	rbit	r3, r3
 8000a96:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	0e1b      	lsrs	r3, r3, #24
 8000a9c:	72bb      	strb	r3, [r7, #10]
	    *sendBufferPtr++ = line_address;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	60fa      	str	r2, [r7, #12]
 8000aa4:	7aba      	ldrb	r2, [r7, #10]
 8000aa6:	701a      	strb	r2, [r3, #0]

	    // Add pixel data from displayBuffer -> to improve this all the gfx code could modify only the bufferPtr/sendToDisplayBuffer
	    memcpy(sendBufferPtr, currentBuffer[line - 1], DISPLAY_WIDTH / 8);
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <sendToDisplay+0xd4>)
 8000aaa:	6819      	ldr	r1, [r3, #0]
 8000aac:	7afa      	ldrb	r2, [r7, #11]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	011b      	lsls	r3, r3, #4
 8000ab2:	1a9b      	subs	r3, r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	3b1e      	subs	r3, #30
 8000ab8:	440b      	add	r3, r1
 8000aba:	221e      	movs	r2, #30
 8000abc:	4619      	mov	r1, r3
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f003 fef4 	bl	80048ac <memcpy>
	    sendBufferPtr += DISPLAY_WIDTH / 8;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	331e      	adds	r3, #30
 8000ac8:	60fb      	str	r3, [r7, #12]

	    // Send 8 dummy bits after each line's pixel data
	    *sendBufferPtr++ = dummy_8bit;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	60fa      	str	r2, [r7, #12]
 8000ad0:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <sendToDisplay+0xd8>)
 8000ad2:	7812      	ldrb	r2, [r2, #0]
 8000ad4:	701a      	strb	r2, [r3, #0]
	for (uint8_t line = 1; line <= DISPLAY_HEIGHT; line++) {
 8000ad6:	7afb      	ldrb	r3, [r7, #11]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	72fb      	strb	r3, [r7, #11]
 8000adc:	7afb      	ldrb	r3, [r7, #11]
 8000ade:	2bf0      	cmp	r3, #240	; 0xf0
 8000ae0:	d9d4      	bls.n	8000a8c <sendToDisplay+0x1c>
	}
	*sendBufferPtr++ = dummy_16bit;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	1c5a      	adds	r2, r3, #1
 8000ae6:	60fa      	str	r2, [r7, #12]
 8000ae8:	4a18      	ldr	r2, [pc, #96]	; (8000b4c <sendToDisplay+0xdc>)
 8000aea:	7812      	ldrb	r2, [r2, #0]
 8000aec:	701a      	strb	r2, [r3, #0]

	RED_LED_ON();
 8000aee:	2201      	movs	r2, #1
 8000af0:	2102      	movs	r1, #2
 8000af2:	4817      	ldr	r0, [pc, #92]	; (8000b50 <sendToDisplay+0xe0>)
 8000af4:	f000 fe24 	bl	8001740 <HAL_GPIO_WritePin>
	SCS_HIGH();
 8000af8:	2201      	movs	r2, #1
 8000afa:	2110      	movs	r1, #16
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f000 fe1e 	bl	8001740 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, sendToDisplayBuffer, TOTAL_DATA_SIZE, HAL_MAX_DELAY);
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	f641 6203 	movw	r2, #7683	; 0x1e03
 8000b0c:	490b      	ldr	r1, [pc, #44]	; (8000b3c <sendToDisplay+0xcc>)
 8000b0e:	4811      	ldr	r0, [pc, #68]	; (8000b54 <sendToDisplay+0xe4>)
 8000b10:	f002 fdaa 	bl	8003668 <HAL_SPI_Transmit>
	SCS_LOW();
 8000b14:	2200      	movs	r2, #0
 8000b16:	2110      	movs	r1, #16
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1c:	f000 fe10 	bl	8001740 <HAL_GPIO_WritePin>
	//currentBuffer = (currentBuffer == frontBuffer) ? backBuffer : frontBuffer;
	initCurrentBuffer();
 8000b20:	f000 f8f8 	bl	8000d14 <initCurrentBuffer>

	RED_LED_OFF();
 8000b24:	2200      	movs	r2, #0
 8000b26:	2102      	movs	r1, #2
 8000b28:	4809      	ldr	r0, [pc, #36]	; (8000b50 <sendToDisplay+0xe0>)
 8000b2a:	f000 fe09 	bl	8001740 <HAL_GPIO_WritePin>

	toggle_vcom();
 8000b2e:	f7ff ff73 	bl	8000a18 <toggle_vcom>
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200021f8 	.word	0x200021f8
 8000b40:	20000181 	.word	0x20000181
 8000b44:	20000184 	.word	0x20000184
 8000b48:	200005d5 	.word	0x200005d5
 8000b4c:	200005d4 	.word	0x200005d4
 8000b50:	48000400 	.word	0x48000400
 8000b54:	20000200 	.word	0x20000200

08000b58 <setPixel_BB>:
		// Clear the bit to erase a pixel (assuming 1 is the color for erasing)
		currentBuffer[y][byteIndex] |= (1 << bitIndex);
	}
}

void setPixel_BB(int x, int y, bool color) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b08b      	sub	sp, #44	; 0x2c
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	4613      	mov	r3, r2
 8000b64:	71fb      	strb	r3, [r7, #7]
	int byteIndex = x / 8;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	da00      	bge.n	8000b6e <setPixel_BB+0x16>
 8000b6c:	3307      	adds	r3, #7
 8000b6e:	10db      	asrs	r3, r3, #3
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
	int bitIndex = 7 - (x % 8);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	425a      	negs	r2, r3
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	f002 0207 	and.w	r2, r2, #7
 8000b7e:	bf58      	it	pl
 8000b80:	4253      	negpl	r3, r2
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	623b      	str	r3, [r7, #32]

	// Calculate the byte offset within the buffer
	uint32_t byte_offset = (uint32_t)&currentBuffer[y][byteIndex] - SRAM_BASE;//- (uint32_t)&currentBuffer[0][0];
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <setPixel_BB+0x78>)
 8000b8a:	6819      	ldr	r1, [r3, #0]
 8000b8c:	68ba      	ldr	r2, [r7, #8]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	18ca      	adds	r2, r1, r3
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	4413      	add	r3, r2
 8000b9c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ba0:	61fb      	str	r3, [r7, #28]

	// Calculate the bit_word_offset and bit_band_alias_address
	uint32_t bit_word_offset = (byte_offset) * 32 + (bitIndex * 4);
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	015b      	lsls	r3, r3, #5
 8000ba6:	6a3a      	ldr	r2, [r7, #32]
 8000ba8:	0092      	lsls	r2, r2, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
	uint32_t bit_band_alias_address = SRAM_BB_BASE + bit_word_offset;
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 8000bb4:	617b      	str	r3, [r7, #20]

	// Use bit-banding to set or clear the bit
	*(volatile uint32_t *)bit_band_alias_address = (color ? 0 : 1);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f083 0301 	eor.w	r3, r3, #1
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	601a      	str	r2, [r3, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	372c      	adds	r7, #44	; 0x2c
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000184 	.word	0x20000184

08000bd4 <drawChar_optimized>:
            }
        }
    }
}

void drawChar_optimized(int x, int y, char c, bool color) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b092      	sub	sp, #72	; 0x48
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	4611      	mov	r1, r2
 8000be0:	461a      	mov	r2, r3
 8000be2:	460b      	mov	r3, r1
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	4613      	mov	r3, r2
 8000be8:	71bb      	strb	r3, [r7, #6]
	// Get the index of the character in the font arrays
	int charIndex = c - 33; // Assuming '!' (char 33) is the first character in your font
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	3b21      	subs	r3, #33	; 0x21
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34

	// Get the character width and bitmap address
	int width = char_width[charIndex];
 8000bf0:	4a2c      	ldr	r2, [pc, #176]	; (8000ca4 <drawChar_optimized+0xd0>)
 8000bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf4:	4413      	add	r3, r2
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
	const char* bitmap = char_addr[charIndex];
 8000bfa:	4a2b      	ldr	r2, [pc, #172]	; (8000ca8 <drawChar_optimized+0xd4>)
 8000bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Iterate over each vertical slice (column) in the character's bitmap
	for (int col = 0; col < width; col++) {
 8000c04:	2300      	movs	r3, #0
 8000c06:	647b      	str	r3, [r7, #68]	; 0x44
 8000c08:	e043      	b.n	8000c92 <drawChar_optimized+0xbe>
		int displayX = x + col;  // X position is based on the column (width)
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c0e:	4413      	add	r3, r2
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
		int bitmapColOffset = col; // Pre-calculate column offset in the bitmap
 8000c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24

		int prevRowDivisionResult = -1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	643b      	str	r3, [r7, #64]	; 0x40
		int prevRowDivisionResultTimesWidth = -1;
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c20:	63fb      	str	r3, [r7, #60]	; 0x3c

		// Iterate over each row in the character's bitmap
		for (int row = 0; row < 48; row++) { // Assuming 48 pixels in height
 8000c22:	2300      	movs	r3, #0
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c26:	e02e      	b.n	8000c86 <drawChar_optimized+0xb2>
			int displayY = y + row;  // Y position is based on the row (height)
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c2c:	4413      	add	r3, r2
 8000c2e:	623b      	str	r3, [r7, #32]

			// Optimize division and multiplication
			int rowDivisionResult = row >> 3;
 8000c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c32:	10db      	asrs	r3, r3, #3
 8000c34:	61fb      	str	r3, [r7, #28]
			if (rowDivisionResult != prevRowDivisionResult) {
 8000c36:	69fa      	ldr	r2, [r7, #28]
 8000c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d006      	beq.n	8000c4c <drawChar_optimized+0x78>
				prevRowDivisionResult = rowDivisionResult;
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	643b      	str	r3, [r7, #64]	; 0x40
				prevRowDivisionResultTimesWidth = rowDivisionResult * width;
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c46:	fb02 f303 	mul.w	r3, r2, r3
 8000c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
			}

			// Calculate the position in the bitmap array and the bit index
			int bitmapIndex = bitmapColOffset + prevRowDivisionResultTimesWidth;
 8000c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c50:	4413      	add	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
			int bitIndex = row & 7;  // Bit index within the byte, assuming LSB to MSB ordering
 8000c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	617b      	str	r3, [r7, #20]

			// Check if the pixel should be drawn (based on the bitmap data)
			if (bitmap[bitmapIndex] & (1 << bitIndex)) {
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c60:	4413      	add	r3, r2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	fa42 f303 	asr.w	r3, r2, r3
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d005      	beq.n	8000c80 <drawChar_optimized+0xac>
				setPixel_BB(displayX, displayY, color); // Draw the pixel
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	461a      	mov	r2, r3
 8000c78:	6a39      	ldr	r1, [r7, #32]
 8000c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c7c:	f7ff ff6c 	bl	8000b58 <setPixel_BB>
		for (int row = 0; row < 48; row++) { // Assuming 48 pixels in height
 8000c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c82:	3301      	adds	r3, #1
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c88:	2b2f      	cmp	r3, #47	; 0x2f
 8000c8a:	ddcd      	ble.n	8000c28 <drawChar_optimized+0x54>
	for (int col = 0; col < width; col++) {
 8000c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c8e:	3301      	adds	r3, #1
 8000c90:	647b      	str	r3, [r7, #68]	; 0x44
 8000c92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c96:	429a      	cmp	r2, r3
 8000c98:	dbb7      	blt.n	8000c0a <drawChar_optimized+0x36>
			}
		}
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	bf00      	nop
 8000c9e:	3748      	adds	r7, #72	; 0x48
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	080086d4 	.word	0x080086d4
 8000ca8:	20000008 	.word	0x20000008

08000cac <drawString>:


void drawString(int x, int y, const char* str, bool color) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000cba:	e012      	b.n	8000ce2 <drawString+0x36>
        drawChar_optimized(x, y, *str, color);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	781a      	ldrb	r2, [r3, #0]
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	68b9      	ldr	r1, [r7, #8]
 8000cc4:	68f8      	ldr	r0, [r7, #12]
 8000cc6:	f7ff ff85 	bl	8000bd4 <drawChar_optimized>
        x += char_width[*str - 33] + 1; // Move x to the next character position
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	3b21      	subs	r3, #33	; 0x21
 8000cd0:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <drawString+0x48>)
 8000cd2:	5cd3      	ldrb	r3, [r2, r3]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	4413      	add	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
        str++; // Next character
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
    while (*str) {
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1e8      	bne.n	8000cbc <drawString+0x10>
    }
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	080086d4 	.word	0x080086d4

08000cf8 <initDisplayBuffer>:
	    	currentBuffer[row][col] = ~currentBuffer[row][col];
	    }
	}
}

void initDisplayBuffer(void) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	//memset(frontBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
	memset(currentBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <initDisplayBuffer+0x18>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000d04:	21ff      	movs	r1, #255	; 0xff
 8000d06:	4618      	mov	r0, r3
 8000d08:	f003 fd9c 	bl	8004844 <memset>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000184 	.word	0x20000184

08000d14 <initCurrentBuffer>:

void initCurrentBuffer(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	memset(currentBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <initCurrentBuffer+0x18>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000d20:	21ff      	movs	r1, #255	; 0xff
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 fd8e 	bl	8004844 <memset>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000184 	.word	0x20000184

08000d30 <LL_AHB2_GRP1_EnableClock>:
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d54:	68fb      	ldr	r3, [r7, #12]
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b085      	sub	sp, #20
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4013      	ands	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db8:	68fb      	ldr	r3, [r7, #12]
}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <HAL_SPI_MspInit+0x5c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d117      	bne.n	8000e26 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000df6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000dfa:	f7ff ffcb 	bl	8000d94 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f7ff ff96 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e04:	23a0      	movs	r3, #160	; 0xa0
 8000e06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e14:	2305      	movs	r3, #5
 8000e16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f000 fb1d 	bl	8001460 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3720      	adds	r7, #32
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40013000 	.word	0x40013000

08000e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b09c      	sub	sp, #112	; 0x70
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2250      	movs	r2, #80	; 0x50
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f003 fcf5 	bl	8004844 <memset>
  if(huart->Instance==USART1)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a16      	ldr	r2, [pc, #88]	; (8000eb8 <HAL_UART_MspInit+0x84>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d124      	bne.n	8000eae <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4618      	mov	r0, r3
 8000e72:	f002 f8c9 	bl	8003008 <HAL_RCCEx_PeriphCLKConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e7c:	f7ff fd82 	bl	8000984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e80:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e84:	f7ff ff86 	bl	8000d94 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f7ff ff51 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e8e:	23c0      	movs	r3, #192	; 0xc0
 8000e90:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000eaa:	f000 fad9 	bl	8001460 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3770      	adds	r7, #112	; 0x70
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40013800 	.word	0x40013800
 8000ebc:	48000400 	.word	0x48000400

08000ec0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09c      	sub	sp, #112	; 0x70
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2250      	movs	r2, #80	; 0x50
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 fcaf 	bl	8004844 <memset>
  if(hpcd->Instance==USB)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <HAL_PCD_MspInit+0xa8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d136      	bne.n	8000f5e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000ef6:	2318      	movs	r3, #24
 8000ef8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000efe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000f00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f04:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000f06:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000f0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f10:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000f12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f16:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 f873 	bl	8003008 <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000f28:	f7ff fd2c 	bl	8000984 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f7ff feff 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f36:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000f44:	230a      	movs	r3, #10
 8000f46:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f52:	f000 fa85 	bl	8001460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f56:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000f5a:	f7ff ff02 	bl	8000d62 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3770      	adds	r7, #112	; 0x70
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40006800 	.word	0x40006800

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb8:	f000 f91e 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc8:	4a14      	ldr	r2, [pc, #80]	; (800101c <_sbrk+0x5c>)
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <_sbrk+0x60>)
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <_sbrk+0x64>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <_sbrk+0x68>)
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d207      	bcs.n	8001000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff0:	f003 fc30 	bl	8004854 <__errno>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	e009      	b.n	8001014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <_sbrk+0x64>)
 8001010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20030000 	.word	0x20030000
 8001020:	00000400 	.word	0x00000400
 8001024:	20003ffc 	.word	0x20003ffc
 8001028:	20004150 	.word	0x20004150

0800102c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <SystemInit+0x98>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001036:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <SystemInit+0x98>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001054:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001058:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800105a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <SystemInit+0x9c>)
 8001066:	4013      	ands	r3, r2
 8001068:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800106a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001076:	f023 0305 	bic.w	r3, r3, #5
 800107a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800107e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001082:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800108a:	f023 0301 	bic.w	r3, r3, #1
 800108e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001096:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <SystemInit+0xa0>)
 8001098:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800109a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <SystemInit+0xa0>)
 80010a0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00
 80010c8:	faf6fefb 	.word	0xfaf6fefb
 80010cc:	22041000 	.word	0x22041000

080010d0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80010d0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d4:	3304      	adds	r3, #4

080010d6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80010da:	d3f9      	bcc.n	80010d0 <CopyDataInit>
  bx lr
 80010dc:	4770      	bx	lr

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80010de:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80010e0:	3004      	adds	r0, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80010e2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>
  bx lr
 80010e6:	4770      	bx	lr

080010e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010ec:	f7ff ff9e 	bl	800102c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <LoopForever+0x6>)
 80010f2:	490c      	ldr	r1, [pc, #48]	; (8001124 <LoopForever+0xa>)
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <LoopForever+0xe>)
 80010f6:	2300      	movs	r3, #0
 80010f8:	f7ff ffed 	bl	80010d6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80010fc:	480b      	ldr	r0, [pc, #44]	; (800112c <LoopForever+0x12>)
 80010fe:	490c      	ldr	r1, [pc, #48]	; (8001130 <LoopForever+0x16>)
 8001100:	4a0c      	ldr	r2, [pc, #48]	; (8001134 <LoopForever+0x1a>)
 8001102:	2300      	movs	r3, #0
 8001104:	f7ff ffe7 	bl	80010d6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <LoopForever+0x1e>)
 800110a:	490c      	ldr	r1, [pc, #48]	; (800113c <LoopForever+0x22>)
 800110c:	2300      	movs	r3, #0
 800110e:	f7ff ffe8 	bl	80010e2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001112:	f003 fba5 	bl	8004860 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001116:	f7ff fa31 	bl	800057c <main>

0800111a <LoopForever>:

LoopForever:
  b LoopForever
 800111a:	e7fe      	b.n	800111a <LoopForever>
  ldr   r0, =_estack
 800111c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001120:	20000008 	.word	0x20000008
 8001124:	200001e4 	.word	0x200001e4
 8001128:	08008840 	.word	0x08008840
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800112c:	20030000 	.word	0x20030000
 8001130:	20030000 	.word	0x20030000
 8001134:	08008a1c 	.word	0x08008a1c
  INIT_BSS _sbss, _ebss
 8001138:	200001e4 	.word	0x200001e4
 800113c:	2000414c 	.word	0x2000414c

08001140 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_IRQHandler>
	...

08001144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_Init+0x3c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_Init+0x3c>)
 8001154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001158:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115a:	2003      	movs	r0, #3
 800115c:	f000 f94e 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001160:	2000      	movs	r0, #0
 8001162:	f000 f80f 	bl	8001184 <HAL_InitTick>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	e001      	b.n	8001176 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001172:	f7ff fe28 	bl	8000dc6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001176:	79fb      	ldrb	r3, [r7, #7]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	58004000 	.word	0x58004000

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_InitTick+0x6c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d024      	beq.n	80011e2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001198:	f001 fc96 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 800119c:	4602      	mov	r2, r0
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_InitTick+0x6c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f948 	bl	8001446 <HAL_SYSTICK_Config>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10f      	bne.n	80011dc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	d809      	bhi.n	80011d6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c2:	2200      	movs	r2, #0
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ca:	f000 f922 	bl	8001412 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ce:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <HAL_InitTick+0x70>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e007      	b.n	80011e6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	e004      	b.n	80011e6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e001      	b.n	80011e6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000190 	.word	0x20000190
 80011f4:	2000018c 	.word	0x2000018c

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000190 	.word	0x20000190
 800121c:	20004000 	.word	0x20004000

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20004000 	.word	0x20004000

08001238 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTickPrio+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2000018c 	.word	0x2000018c

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffe2 	bl	8001220 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffd2 	bl	8001220 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000190 	.word	0x20000190

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff8e 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff47 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff5e 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff90 	bl	8001350 <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5f 	bl	80012fc <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffb2 	bl	80013b8 <SysTick_Config>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b480      	push	{r7}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146e:	e14c      	b.n	800170a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2101      	movs	r1, #1
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	4013      	ands	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 813e 	beq.w	8001704 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b01      	cmp	r3, #1
 8001492:	d005      	beq.n	80014a0 <HAL_GPIO_Init+0x40>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d130      	bne.n	8001502 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014d6:	2201      	movs	r2, #1
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	f003 0201 	and.w	r2, r3, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b03      	cmp	r3, #3
 800150c:	d017      	beq.n	800153e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d123      	bne.n	8001592 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	08da      	lsrs	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3208      	adds	r2, #8
 8001552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	08da      	lsrs	r2, r3, #3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3208      	adds	r2, #8
 800158c:	6939      	ldr	r1, [r7, #16]
 800158e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	2203      	movs	r2, #3
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0203 	and.w	r2, r3, #3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8098 	beq.w	8001704 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80015d4:	4a54      	ldr	r2, [pc, #336]	; (8001728 <HAL_GPIO_Init+0x2c8>)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	3302      	adds	r3, #2
 80015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	220f      	movs	r2, #15
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015fe:	d019      	beq.n	8001634 <HAL_GPIO_Init+0x1d4>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a4a      	ldr	r2, [pc, #296]	; (800172c <HAL_GPIO_Init+0x2cc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d013      	beq.n	8001630 <HAL_GPIO_Init+0x1d0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a49      	ldr	r2, [pc, #292]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d00d      	beq.n	800162c <HAL_GPIO_Init+0x1cc>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a48      	ldr	r2, [pc, #288]	; (8001734 <HAL_GPIO_Init+0x2d4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d007      	beq.n	8001628 <HAL_GPIO_Init+0x1c8>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a47      	ldr	r2, [pc, #284]	; (8001738 <HAL_GPIO_Init+0x2d8>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d101      	bne.n	8001624 <HAL_GPIO_Init+0x1c4>
 8001620:	2304      	movs	r3, #4
 8001622:	e008      	b.n	8001636 <HAL_GPIO_Init+0x1d6>
 8001624:	2307      	movs	r3, #7
 8001626:	e006      	b.n	8001636 <HAL_GPIO_Init+0x1d6>
 8001628:	2303      	movs	r3, #3
 800162a:	e004      	b.n	8001636 <HAL_GPIO_Init+0x1d6>
 800162c:	2302      	movs	r3, #2
 800162e:	e002      	b.n	8001636 <HAL_GPIO_Init+0x1d6>
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <HAL_GPIO_Init+0x1d6>
 8001634:	2300      	movs	r3, #0
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	f002 0203 	and.w	r2, r2, #3
 800163c:	0092      	lsls	r2, r2, #2
 800163e:	4093      	lsls	r3, r2
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001646:	4938      	ldr	r1, [pc, #224]	; (8001728 <HAL_GPIO_Init+0x2c8>)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <HAL_GPIO_Init+0x2dc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001678:	4a30      	ldr	r2, [pc, #192]	; (800173c <HAL_GPIO_Init+0x2dc>)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800167e:	4b2f      	ldr	r3, [pc, #188]	; (800173c <HAL_GPIO_Init+0x2dc>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016a2:	4a26      	ldr	r2, [pc, #152]	; (800173c <HAL_GPIO_Init+0x2dc>)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_GPIO_Init+0x2dc>)
 80016aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016ce:	4a1b      	ldr	r2, [pc, #108]	; (800173c <HAL_GPIO_Init+0x2dc>)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_GPIO_Init+0x2dc>)
 80016d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016fc:	4a0f      	ldr	r2, [pc, #60]	; (800173c <HAL_GPIO_Init+0x2dc>)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	f47f aeab 	bne.w	8001470 <HAL_GPIO_Init+0x10>
  }
}
 800171a:	bf00      	nop
 800171c:	bf00      	nop
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40010000 	.word	0x40010000
 800172c:	48000400 	.word	0x48000400
 8001730:	48000800 	.word	0x48000800
 8001734:	48000c00 	.word	0x48000c00
 8001738:	48001000 	.word	0x48001000
 800173c:	58000800 	.word	0x58000800

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800175c:	e002      	b.n	8001764 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0c0      	b.n	8001904 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d106      	bne.n	800179c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fb92 	bl	8000ec0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2203      	movs	r2, #3
 80017a0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 fff1 	bl	8004790 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	e03e      	b.n	8001832 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	3311      	adds	r3, #17
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3310      	adds	r3, #16
 80017d8:	7bfa      	ldrb	r2, [r7, #15]
 80017da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	3313      	adds	r3, #19
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017f0:	7bfa      	ldrb	r2, [r7, #15]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	3320      	adds	r3, #32
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	3324      	adds	r3, #36	; 0x24
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	440b      	add	r3, r1
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	3301      	adds	r3, #1
 8001830:	73fb      	strb	r3, [r7, #15]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	791b      	ldrb	r3, [r3, #4]
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	429a      	cmp	r2, r3
 800183a:	d3bb      	bcc.n	80017b4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e044      	b.n	80018cc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	440b      	add	r3, r1
 8001850:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800186a:	7bfa      	ldrb	r2, [r7, #15]
 800186c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	440b      	add	r3, r1
 80018a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	3301      	adds	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	791b      	ldrb	r3, [r3, #4]
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3b5      	bcc.n	8001842 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3304      	adds	r3, #4
 80018de:	e893 0006 	ldmia.w	r3, {r1, r2}
 80018e2:	f002 ff70 	bl	80047c6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7a9b      	ldrb	r3, [r3, #10]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d102      	bne.n	8001902 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f805 	bl	800190c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001930:	b29b      	uxth	r3, r3
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001944:	b29b      	uxth	r3, r3
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	b29a      	uxth	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800196a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	58000400 	.word	0x58000400

08001980 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <HAL_PWREx_GetVoltageRange+0x18>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	58000400 	.word	0x58000400

0800199c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80019a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ae:	d101      	bne.n	80019b4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_RCC_HSE_Enable>:
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80019c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_RCC_HSE_Disable>:
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80019e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_RCC_HSE_IsReady>:
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a0e:	d101      	bne.n	8001a14 <LL_RCC_HSE_IsReady+0x18>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <LL_RCC_HSE_IsReady+0x1a>
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_RCC_HSI_Enable>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_RCC_HSI_Disable>:
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a50:	6013      	str	r3, [r2, #0]
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_RCC_HSI_IsReady>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6e:	d101      	bne.n	8001a74 <LL_RCC_HSI_IsReady+0x18>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <LL_RCC_HSI_IsReady+0x1a>
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	061b      	lsls	r3, r3, #24
 8001a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_RCC_HSI48_Enable>:
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_RCC_HSI48_Disable>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_RCC_HSI48_IsReady>:
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d101      	bne.n	8001b06 <LL_RCC_HSI48_IsReady+0x18>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <LL_RCC_HSI48_IsReady+0x1a>
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_RCC_LSE_Enable>:
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_RCC_LSE_Disable>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <LL_RCC_LSE_EnableBypass>:
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_RCC_LSE_DisableBypass>:
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b88:	f023 0304 	bic.w	r3, r3, #4
 8001b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d101      	bne.n	8001bb2 <LL_RCC_LSE_IsReady+0x18>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <LL_RCC_LSE_IsReady+0x1a>
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d101      	bne.n	8001c1a <LL_RCC_LSI1_IsReady+0x18>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <LL_RCC_LSI1_IsReady+0x1a>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c58:	f023 0304 	bic.w	r3, r3, #4
 8001c5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d101      	bne.n	8001c82 <LL_RCC_LSI2_IsReady+0x18>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_RCC_LSI2_IsReady+0x1a>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001caa:	4313      	orrs	r3, r2
 8001cac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6013      	str	r3, [r2, #0]
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d101      	bne.n	8001d0e <LL_RCC_MSI_IsReady+0x16>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <LL_RCC_MSI_IsReady+0x18>
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d52:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2bb0      	cmp	r3, #176	; 0xb0
 8001d58:	d901      	bls.n	8001d5e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001d5a:	23b0      	movs	r3, #176	; 0xb0
 8001d5c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001d5e:	687b      	ldr	r3, [r7, #4]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 0203 	bic.w	r2, r3, #3
 8001da8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e3a:	f023 020f 	bic.w	r2, r3, #15
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f3c:	6013      	str	r3, [r2, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f5a:	d101      	bne.n	8001f60 <LL_RCC_PLL_IsReady+0x18>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <LL_RCC_PLL_IsReady+0x1a>
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe0:	d101      	bne.n	8001fe6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002006:	d101      	bne.n	800200c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800201c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002020:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202c:	d101      	bne.n	8002032 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002050:	d101      	bne.n	8002056 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002070:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002074:	d101      	bne.n	800207a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b08d      	sub	sp, #52	; 0x34
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e363      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 808d 	beq.w	80021c2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a8:	f7ff fe89 	bl	8001dbe <LL_RCC_GetSysClkSource>
 80020ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ae:	f7ff ff82 	bl	8001fb6 <LL_RCC_PLL_GetMainSource>
 80020b2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x3e>
 80020ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020bc:	2b0c      	cmp	r3, #12
 80020be:	d147      	bne.n	8002150 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80020c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d144      	bne.n	8002150 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e347      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80020d6:	f7ff fe34 	bl	8001d42 <LL_RCC_MSI_GetRange>
 80020da:	4603      	mov	r3, r0
 80020dc:	429c      	cmp	r4, r3
 80020de:	d914      	bls.n	800210a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fd2f 	bl	8002b48 <RCC_SetFlashLatencyFromMSIRange>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e336      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fe0e 	bl	8001d1a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fe32 	bl	8001d6c <LL_RCC_MSI_SetCalibTrimming>
 8002108:	e013      	b.n	8002132 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fe03 	bl	8001d1a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fe27 	bl	8001d6c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fd10 	bl	8002b48 <RCC_SetFlashLatencyFromMSIRange>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e317      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002132:	f000 fcc9 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002136:	4603      	mov	r3, r0
 8002138:	4aa4      	ldr	r2, [pc, #656]	; (80023cc <HAL_RCC_OscConfig+0x344>)
 800213a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800213c:	4ba4      	ldr	r3, [pc, #656]	; (80023d0 <HAL_RCC_OscConfig+0x348>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff f81f 	bl	8001184 <HAL_InitTick>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d039      	beq.n	80021c0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e308      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01e      	beq.n	8002196 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002158:	f7ff fdb0 	bl	8001cbc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800215c:	f7ff f860 	bl	8001220 <HAL_GetTick>
 8002160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002164:	f7ff f85c 	bl	8001220 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e2f5      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002176:	f7ff fdbf 	bl	8001cf8 <LL_RCC_MSI_IsReady>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f1      	beq.n	8002164 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fdc8 	bl	8001d1a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fdec 	bl	8001d6c <LL_RCC_MSI_SetCalibTrimming>
 8002194:	e015      	b.n	80021c2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002196:	f7ff fda0 	bl	8001cda <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800219a:	f7ff f841 	bl	8001220 <HAL_GetTick>
 800219e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a2:	f7ff f83d 	bl	8001220 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e2d6      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80021b4:	f7ff fda0 	bl	8001cf8 <LL_RCC_MSI_IsReady>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f1      	bne.n	80021a2 <HAL_RCC_OscConfig+0x11a>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80021c0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d047      	beq.n	800225e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ce:	f7ff fdf6 	bl	8001dbe <LL_RCC_GetSysClkSource>
 80021d2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d4:	f7ff feef 	bl	8001fb6 <LL_RCC_PLL_GetMainSource>
 80021d8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d005      	beq.n	80021ec <HAL_RCC_OscConfig+0x164>
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d108      	bne.n	80021f8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d134      	bne.n	800225e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e2b4      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d102      	bne.n	8002208 <HAL_RCC_OscConfig+0x180>
 8002202:	f7ff fbdd 	bl	80019c0 <LL_RCC_HSE_Enable>
 8002206:	e001      	b.n	800220c <HAL_RCC_OscConfig+0x184>
 8002208:	f7ff fbe9 	bl	80019de <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d012      	beq.n	800223a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7ff f804 	bl	8001220 <HAL_GetTick>
 8002218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800221c:	f7ff f800 	bl	8001220 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	; 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e299      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800222e:	f7ff fbe5 	bl	80019fc <LL_RCC_HSE_IsReady>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f1      	beq.n	800221c <HAL_RCC_OscConfig+0x194>
 8002238:	e011      	b.n	800225e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7fe fff1 	bl	8001220 <HAL_GetTick>
 800223e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002242:	f7fe ffed 	bl	8001220 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	; 0x64
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e286      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002254:	f7ff fbd2 	bl	80019fc <LL_RCC_HSE_IsReady>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f1      	bne.n	8002242 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d04c      	beq.n	8002304 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800226a:	f7ff fda8 	bl	8001dbe <LL_RCC_GetSysClkSource>
 800226e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002270:	f7ff fea1 	bl	8001fb6 <LL_RCC_PLL_GetMainSource>
 8002274:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d005      	beq.n	8002288 <HAL_RCC_OscConfig+0x200>
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d10e      	bne.n	80022a0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d10b      	bne.n	80022a0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e266      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fbf1 	bl	8001a80 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800229e:	e031      	b.n	8002304 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d019      	beq.n	80022dc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a8:	f7ff fbba 	bl	8001a20 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe ffb8 	bl	8001220 <HAL_GetTick>
 80022b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b4:	f7fe ffb4 	bl	8001220 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e24d      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80022c6:	f7ff fbc9 	bl	8001a5c <LL_RCC_HSI_IsReady>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f1      	beq.n	80022b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fbd3 	bl	8001a80 <LL_RCC_HSI_SetCalibTrimming>
 80022da:	e013      	b.n	8002304 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022dc:	f7ff fbaf 	bl	8001a3e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe ff9e 	bl	8001220 <HAL_GetTick>
 80022e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e8:	f7fe ff9a 	bl	8001220 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e233      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80022fa:	f7ff fbaf 	bl	8001a5c <LL_RCC_HSI_IsReady>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f1      	bne.n	80022e8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80a3 	beq.w	8002464 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d076      	beq.n	8002414 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	d046      	beq.n	80023c0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002332:	f7ff fc66 	bl	8001c02 <LL_RCC_LSI1_IsReady>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d113      	bne.n	8002364 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800233c:	f7ff fc3f 	bl	8001bbe <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002340:	f7fe ff6e 	bl	8001220 <HAL_GetTick>
 8002344:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002348:	f7fe ff6a 	bl	8001220 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e203      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800235a:	f7ff fc52 	bl	8001c02 <LL_RCC_LSI1_IsReady>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f1      	beq.n	8002348 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002364:	f7ff fc5f 	bl	8001c26 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe ff5a 	bl	8001220 <HAL_GetTick>
 800236c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002370:	f7fe ff56 	bl	8001220 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b03      	cmp	r3, #3
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1ef      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002382:	f7ff fc72 	bl	8001c6a <LL_RCC_LSI2_IsReady>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f1      	beq.n	8002370 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fc7c 	bl	8001c8e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002396:	f7ff fc23 	bl	8001be0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7fe ff41 	bl	8001220 <HAL_GetTick>
 800239e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023a2:	f7fe ff3d 	bl	8001220 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e1d6      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80023b4:	f7ff fc25 	bl	8001c02 <LL_RCC_LSI1_IsReady>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f1      	bne.n	80023a2 <HAL_RCC_OscConfig+0x31a>
 80023be:	e051      	b.n	8002464 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80023c0:	f7ff fbfd 	bl	8001bbe <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7fe ff2c 	bl	8001220 <HAL_GetTick>
 80023c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023ca:	e00c      	b.n	80023e6 <HAL_RCC_OscConfig+0x35e>
 80023cc:	20000188 	.word	0x20000188
 80023d0:	2000018c 	.word	0x2000018c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023d4:	f7fe ff24 	bl	8001220 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1bd      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023e6:	f7ff fc0c 	bl	8001c02 <LL_RCC_LSI1_IsReady>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f1      	beq.n	80023d4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80023f0:	f7ff fc2a 	bl	8001c48 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80023f6:	f7fe ff13 	bl	8001220 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b03      	cmp	r3, #3
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1ac      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002408:	f7ff fc2f 	bl	8001c6a <LL_RCC_LSI2_IsReady>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f1      	bne.n	80023f6 <HAL_RCC_OscConfig+0x36e>
 8002412:	e027      	b.n	8002464 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002414:	f7ff fc18 	bl	8001c48 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7fe ff02 	bl	8001220 <HAL_GetTick>
 800241c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002420:	f7fe fefe 	bl	8001220 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b03      	cmp	r3, #3
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e197      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002432:	f7ff fc1a 	bl	8001c6a <LL_RCC_LSI2_IsReady>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f1      	bne.n	8002420 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800243c:	f7ff fbd0 	bl	8001be0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe feee 	bl	8001220 <HAL_GetTick>
 8002444:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002448:	f7fe feea 	bl	8001220 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e183      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800245a:	f7ff fbd2 	bl	8001c02 <LL_RCC_LSI1_IsReady>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f1      	bne.n	8002448 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d05b      	beq.n	8002528 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002470:	4ba7      	ldr	r3, [pc, #668]	; (8002710 <HAL_RCC_OscConfig+0x688>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d114      	bne.n	80024a6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800247c:	f7ff fa70 	bl	8001960 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002480:	f7fe fece 	bl	8001220 <HAL_GetTick>
 8002484:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002488:	f7fe feca 	bl	8001220 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e163      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249a:	4b9d      	ldr	r3, [pc, #628]	; (8002710 <HAL_RCC_OscConfig+0x688>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d102      	bne.n	80024b4 <HAL_RCC_OscConfig+0x42c>
 80024ae:	f7ff fb30 	bl	8001b12 <LL_RCC_LSE_Enable>
 80024b2:	e00c      	b.n	80024ce <HAL_RCC_OscConfig+0x446>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d104      	bne.n	80024c6 <HAL_RCC_OscConfig+0x43e>
 80024bc:	f7ff fb4b 	bl	8001b56 <LL_RCC_LSE_EnableBypass>
 80024c0:	f7ff fb27 	bl	8001b12 <LL_RCC_LSE_Enable>
 80024c4:	e003      	b.n	80024ce <HAL_RCC_OscConfig+0x446>
 80024c6:	f7ff fb35 	bl	8001b34 <LL_RCC_LSE_Disable>
 80024ca:	f7ff fb55 	bl	8001b78 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d014      	beq.n	8002500 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7fe fea3 	bl	8001220 <HAL_GetTick>
 80024da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7fe fe9f 	bl	8001220 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e136      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80024f4:	f7ff fb51 	bl	8001b9a <LL_RCC_LSE_IsReady>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0ef      	beq.n	80024de <HAL_RCC_OscConfig+0x456>
 80024fe:	e013      	b.n	8002528 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002500:	f7fe fe8e 	bl	8001220 <HAL_GetTick>
 8002504:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002506:	e00a      	b.n	800251e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002508:	f7fe fe8a 	bl	8001220 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e121      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800251e:	f7ff fb3c 	bl	8001b9a <LL_RCC_LSE_IsReady>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ef      	bne.n	8002508 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	d02c      	beq.n	800258e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	2b00      	cmp	r3, #0
 800253a:	d014      	beq.n	8002566 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800253c:	f7ff fab5 	bl	8001aaa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002540:	f7fe fe6e 	bl	8001220 <HAL_GetTick>
 8002544:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002548:	f7fe fe6a 	bl	8001220 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e103      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800255a:	f7ff fac8 	bl	8001aee <LL_RCC_HSI48_IsReady>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f1      	beq.n	8002548 <HAL_RCC_OscConfig+0x4c0>
 8002564:	e013      	b.n	800258e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002566:	f7ff fab1 	bl	8001acc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256a:	f7fe fe59 	bl	8001220 <HAL_GetTick>
 800256e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002572:	f7fe fe55 	bl	8001220 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e0ee      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002584:	f7ff fab3 	bl	8001aee <LL_RCC_HSI48_IsReady>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f1      	bne.n	8002572 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 80e4 	beq.w	8002760 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002598:	f7ff fc11 	bl	8001dbe <LL_RCC_GetSysClkSource>
 800259c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800259e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	f040 80b4 	bne.w	8002718 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 0203 	and.w	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d123      	bne.n	8002606 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d11c      	bne.n	8002606 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d114      	bne.n	8002606 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d10d      	bne.n	8002606 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d05d      	beq.n	80026c2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d058      	beq.n	80026be <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800260c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0a1      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800261e:	f7ff fc84 	bl	8001f2a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002622:	f7fe fdfd 	bl	8001220 <HAL_GetTick>
 8002626:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262a:	f7fe fdf9 	bl	8001220 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e092      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ef      	bne.n	800262a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	4b30      	ldr	r3, [pc, #192]	; (8002714 <HAL_RCC_OscConfig+0x68c>)
 8002652:	4013      	ands	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800265c:	4311      	orrs	r1, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002662:	0212      	lsls	r2, r2, #8
 8002664:	4311      	orrs	r1, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800266a:	4311      	orrs	r1, r2
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002670:	4311      	orrs	r1, r2
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002676:	430a      	orrs	r2, r1
 8002678:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800267c:	4313      	orrs	r3, r2
 800267e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002680:	f7ff fc44 	bl	8001f0c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800268e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002692:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002694:	f7fe fdc4 	bl	8001220 <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269c:	f7fe fdc0 	bl	8001220 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e059      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0ef      	beq.n	800269c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026bc:	e050      	b.n	8002760 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e04f      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d147      	bne.n	8002760 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026d0:	f7ff fc1c 	bl	8001f0c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026e4:	f7fe fd9c 	bl	8001220 <HAL_GetTick>
 80026e8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ec:	f7fe fd98 	bl	8001220 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e031      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0ef      	beq.n	80026ec <HAL_RCC_OscConfig+0x664>
 800270c:	e028      	b.n	8002760 <HAL_RCC_OscConfig+0x6d8>
 800270e:	bf00      	nop
 8002710:	58000400 	.word	0x58000400
 8002714:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d01e      	beq.n	800275c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271e:	f7ff fc04 	bl	8001f2a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7fe fd7d 	bl	8001220 <HAL_GetTick>
 8002726:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272a:	f7fe fd79 	bl	8001220 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e012      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1ef      	bne.n	800272a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800274a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_RCC_OscConfig+0x6e4>)
 8002756:	4013      	ands	r3, r2
 8002758:	60cb      	str	r3, [r1, #12]
 800275a:	e001      	b.n	8002760 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3734      	adds	r7, #52	; 0x34
 8002766:	46bd      	mov	sp, r7
 8002768:	bd90      	pop	{r4, r7, pc}
 800276a:	bf00      	nop
 800276c:	eefefffc 	.word	0xeefefffc

08002770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e12d      	b.n	80029e0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002784:	4b98      	ldr	r3, [pc, #608]	; (80029e8 <HAL_RCC_ClockConfig+0x278>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d91b      	bls.n	80027ca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b95      	ldr	r3, [pc, #596]	; (80029e8 <HAL_RCC_ClockConfig+0x278>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 0207 	bic.w	r2, r3, #7
 800279a:	4993      	ldr	r1, [pc, #588]	; (80029e8 <HAL_RCC_ClockConfig+0x278>)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a2:	f7fe fd3d 	bl	8001220 <HAL_GetTick>
 80027a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027aa:	f7fe fd39 	bl	8001220 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e111      	b.n	80029e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027bc:	4b8a      	ldr	r3, [pc, #552]	; (80029e8 <HAL_RCC_ClockConfig+0x278>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d1ef      	bne.n	80027aa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d016      	beq.n	8002804 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fafb 	bl	8001dd6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027e0:	f7fe fd1e 	bl	8001220 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027e8:	f7fe fd1a 	bl	8001220 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0f2      	b.n	80029e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027fa:	f7ff fbe8 	bl	8001fce <LL_RCC_IsActiveFlag_HPRE>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f1      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d016      	beq.n	800283e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff faf2 	bl	8001dfe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800281a:	f7fe fd01 	bl	8001220 <HAL_GetTick>
 800281e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002822:	f7fe fcfd 	bl	8001220 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e0d5      	b.n	80029e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002834:	f7ff fbdd 	bl	8001ff2 <LL_RCC_IsActiveFlag_C2HPRE>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f1      	beq.n	8002822 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d016      	beq.n	8002878 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff faeb 	bl	8001e2a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002854:	f7fe fce4 	bl	8001220 <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800285c:	f7fe fce0 	bl	8001220 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e0b8      	b.n	80029e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800286e:	f7ff fbd3 	bl	8002018 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f1      	beq.n	800285c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d016      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fae5 	bl	8001e58 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800288e:	f7fe fcc7 	bl	8001220 <HAL_GetTick>
 8002892:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002896:	f7fe fcc3 	bl	8001220 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e09b      	b.n	80029e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028a8:	f7ff fbc9 	bl	800203e <LL_RCC_IsActiveFlag_PPRE1>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f1      	beq.n	8002896 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d017      	beq.n	80028ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fadb 	bl	8001e80 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028ca:	f7fe fca9 	bl	8001220 <HAL_GetTick>
 80028ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028d2:	f7fe fca5 	bl	8001220 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e07d      	b.n	80029e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028e4:	f7ff fbbd 	bl	8002062 <LL_RCC_IsActiveFlag_PPRE2>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f1      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d043      	beq.n	8002982 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d106      	bne.n	8002910 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002902:	f7ff f87b 	bl	80019fc <LL_RCC_HSE_IsReady>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d11e      	bne.n	800294a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e067      	b.n	80029e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d106      	bne.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002918:	f7ff fb16 	bl	8001f48 <LL_RCC_PLL_IsReady>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d113      	bne.n	800294a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e05c      	b.n	80029e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800292e:	f7ff f9e3 	bl	8001cf8 <LL_RCC_MSI_IsReady>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d108      	bne.n	800294a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e051      	b.n	80029e0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800293c:	f7ff f88e 	bl	8001a5c <LL_RCC_HSI_IsReady>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e04a      	b.n	80029e0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fa21 	bl	8001d96 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002954:	f7fe fc64 	bl	8001220 <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	e00a      	b.n	8002972 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295c:	f7fe fc60 	bl	8001220 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	; 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e036      	b.n	80029e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	f7ff fa24 	bl	8001dbe <LL_RCC_GetSysClkSource>
 8002976:	4602      	mov	r2, r0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	429a      	cmp	r2, r3
 8002980:	d1ec      	bne.n	800295c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002982:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <HAL_RCC_ClockConfig+0x278>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d21b      	bcs.n	80029c8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_RCC_ClockConfig+0x278>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 0207 	bic.w	r2, r3, #7
 8002998:	4913      	ldr	r1, [pc, #76]	; (80029e8 <HAL_RCC_ClockConfig+0x278>)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a0:	f7fe fc3e 	bl	8001220 <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029a8:	f7fe fc3a 	bl	8001220 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e012      	b.n	80029e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_ClockConfig+0x278>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d1ef      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029c8:	f000 f87e 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4a07      	ldr	r2, [pc, #28]	; (80029ec <HAL_RCC_ClockConfig+0x27c>)
 80029d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80029d2:	f7fe fc31 	bl	8001238 <HAL_GetTickPrio>
 80029d6:	4603      	mov	r3, r0
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe fbd3 	bl	8001184 <HAL_InitTick>
 80029de:	4603      	mov	r3, r0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	58004000 	.word	0x58004000
 80029ec:	20000188 	.word	0x20000188

080029f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f6:	f7ff f9e2 	bl	8001dbe <LL_RCC_GetSysClkSource>
 80029fa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a02:	f7ff f99e 	bl	8001d42 <LL_RCC_MSI_GetRange>
 8002a06:	4603      	mov	r3, r0
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	4a2b      	ldr	r2, [pc, #172]	; (8002abc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e04b      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d102      	bne.n	8002a24 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a1e:	4b28      	ldr	r3, [pc, #160]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	e045      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d10a      	bne.n	8002a40 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a2a:	f7fe ffb7 	bl	800199c <LL_RCC_HSE_IsEnabledDiv2>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d102      	bne.n	8002a3a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002a34:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e03a      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002a3a:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	e037      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002a40:	f7ff fab9 	bl	8001fb6 <LL_RCC_PLL_GetMainSource>
 8002a44:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d003      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x64>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x6a>
 8002a52:	e00d      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a56:	60bb      	str	r3, [r7, #8]
        break;
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a5a:	f7fe ff9f 	bl	800199c <LL_RCC_HSE_IsEnabledDiv2>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d102      	bne.n	8002a6a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a66:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002a68:	e00d      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002a6a:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a6c:	60bb      	str	r3, [r7, #8]
        break;
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a70:	f7ff f967 	bl	8001d42 <LL_RCC_MSI_GetRange>
 8002a74:	4603      	mov	r3, r0
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	4a0f      	ldr	r2, [pc, #60]	; (8002abc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a82:	60bb      	str	r3, [r7, #8]
        break;
 8002a84:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002a86:	f7ff fa71 	bl	8001f6c <LL_RCC_PLL_GetN>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	fb03 f402 	mul.w	r4, r3, r2
 8002a92:	f7ff fa84 	bl	8001f9e <LL_RCC_PLL_GetDivider>
 8002a96:	4603      	mov	r3, r0
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002aa0:	f7ff fa71 	bl	8001f86 <LL_RCC_PLL_GetR>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	0f5b      	lsrs	r3, r3, #29
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	fbb4 f3f3 	udiv	r3, r4, r3
 8002aae:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd90      	pop	{r4, r7, pc}
 8002aba:	bf00      	nop
 8002abc:	08008794 	.word	0x08008794
 8002ac0:	00f42400 	.word	0x00f42400
 8002ac4:	01e84800 	.word	0x01e84800

08002ac8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac8:	b598      	push	{r3, r4, r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002acc:	f7ff ff90 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8002ad0:	4604      	mov	r4, r0
 8002ad2:	f7ff f9e9 	bl	8001ea8 <LL_RCC_GetAHBPrescaler>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	4a03      	ldr	r2, [pc, #12]	; (8002aec <HAL_RCC_GetHCLKFreq+0x24>)
 8002ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd98      	pop	{r3, r4, r7, pc}
 8002aec:	08008734 	.word	0x08008734

08002af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af0:	b598      	push	{r3, r4, r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002af4:	f7ff ffe8 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002af8:	4604      	mov	r4, r0
 8002afa:	f7ff f9ef 	bl	8001edc <LL_RCC_GetAPB1Prescaler>
 8002afe:	4603      	mov	r3, r0
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd98      	pop	{r3, r4, r7, pc}
 8002b18:	08008774 	.word	0x08008774

08002b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b1c:	b598      	push	{r3, r4, r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002b20:	f7ff ffd2 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002b24:	4604      	mov	r4, r0
 8002b26:	f7ff f9e5 	bl	8001ef4 <LL_RCC_GetAPB2Prescaler>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	0adb      	lsrs	r3, r3, #11
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd98      	pop	{r3, r4, r7, pc}
 8002b44:	08008774 	.word	0x08008774

08002b48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2bb0      	cmp	r3, #176	; 0xb0
 8002b54:	d903      	bls.n	8002b5e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	e007      	b.n	8002b6e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	4a11      	ldr	r2, [pc, #68]	; (8002bac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002b6e:	f7ff f9a7 	bl	8001ec0 <LL_RCC_GetAHB4Prescaler>
 8002b72:	4603      	mov	r3, r0
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	4a0d      	ldr	r2, [pc, #52]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	0c9c      	lsrs	r4, r3, #18
 8002b92:	f7fe fef5 	bl	8001980 <HAL_PWREx_GetVoltageRange>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f000 f80c 	bl	8002bb8 <RCC_SetFlashLatency>
 8002ba0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd90      	pop	{r4, r7, pc}
 8002baa:	bf00      	nop
 8002bac:	08008794 	.word	0x08008794
 8002bb0:	08008734 	.word	0x08008734
 8002bb4:	431bde83 	.word	0x431bde83

08002bb8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b093      	sub	sp, #76	; 0x4c
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002bc2:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <RCC_SetFlashLatency+0xe8>)
 8002bc4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002bc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002bce:	4a35      	ldr	r2, [pc, #212]	; (8002ca4 <RCC_SetFlashLatency+0xec>)
 8002bd0:	f107 031c 	add.w	r3, r7, #28
 8002bd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002bda:	4b33      	ldr	r3, [pc, #204]	; (8002ca8 <RCC_SetFlashLatency+0xf0>)
 8002bdc:	f107 040c 	add.w	r4, r7, #12
 8002be0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002be2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002be6:	2300      	movs	r3, #0
 8002be8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf0:	d11a      	bne.n	8002c28 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8002bf6:	e013      	b.n	8002c20 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	3348      	adds	r3, #72	; 0x48
 8002bfe:	443b      	add	r3, r7
 8002c00:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d807      	bhi.n	8002c1a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	3348      	adds	r3, #72	; 0x48
 8002c10:	443b      	add	r3, r7
 8002c12:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c16:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c18:	e020      	b.n	8002c5c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d9e8      	bls.n	8002bf8 <RCC_SetFlashLatency+0x40>
 8002c26:	e019      	b.n	8002c5c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2c:	e013      	b.n	8002c56 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	3348      	adds	r3, #72	; 0x48
 8002c34:	443b      	add	r3, r7
 8002c36:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d807      	bhi.n	8002c50 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	3348      	adds	r3, #72	; 0x48
 8002c46:	443b      	add	r3, r7
 8002c48:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c4c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c4e:	e005      	b.n	8002c5c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c52:	3301      	adds	r3, #1
 8002c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d9e8      	bls.n	8002c2e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002c5c:	4b13      	ldr	r3, [pc, #76]	; (8002cac <RCC_SetFlashLatency+0xf4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f023 0207 	bic.w	r2, r3, #7
 8002c64:	4911      	ldr	r1, [pc, #68]	; (8002cac <RCC_SetFlashLatency+0xf4>)
 8002c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c6c:	f7fe fad8 	bl	8001220 <HAL_GetTick>
 8002c70:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c72:	e008      	b.n	8002c86 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c74:	f7fe fad4 	bl	8001220 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e007      	b.n	8002c96 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <RCC_SetFlashLatency+0xf4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d1ef      	bne.n	8002c74 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	374c      	adds	r7, #76	; 0x4c
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd90      	pop	{r4, r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	08005178 	.word	0x08005178
 8002ca4:	08005188 	.word	0x08005188
 8002ca8:	08005194 	.word	0x08005194
 8002cac:	58004000 	.word	0x58004000

08002cb0 <LL_RCC_LSE_IsEnabled>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <LL_RCC_LSE_IsEnabled+0x18>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <LL_RCC_LSE_IsEnabled+0x1a>
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_RCC_LSE_IsReady>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d101      	bne.n	8002cec <LL_RCC_LSE_IsReady+0x18>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <LL_RCC_LSE_IsReady+0x1a>
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_RCC_MSI_EnablePLLMode>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d06:	f043 0304 	orr.w	r3, r3, #4
 8002d0a:	6013      	str	r3, [r2, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <LL_RCC_SetRFWKPClockSource>:
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <LL_RCC_SetSMPSClockSource>:
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	f023 0203 	bic.w	r2, r3, #3
 8002d54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_RCC_SetSMPSPrescaler>:
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <LL_RCC_SetUSARTClockSource>:
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_SetLPUARTClockSource>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_RCC_SetI2CClockSource>:
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e02:	43db      	mvns	r3, r3
 8002e04:	401a      	ands	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_RCC_SetLPTIMClockSource>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	0c1b      	lsrs	r3, r3, #16
 8002e38:	041b      	lsls	r3, r3, #16
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	041b      	lsls	r3, r3, #16
 8002e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_RCC_SetSAIClockSource>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_RCC_SetRNGClockSource>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e94:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_RCC_SetCLK48ClockSource>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ec4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_RCC_SetUSBClockSource>:
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ffe3 	bl	8002eb0 <LL_RCC_SetCLK48ClockSource>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <LL_RCC_SetADCClockSource>:
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_RCC_SetRTCClockSource>:
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <LL_RCC_GetRTCClockSource>:
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_RCC_ForceBackupDomainReset>:
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_RCC_PLLSAI1_Enable>:
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_RCC_PLLSAI1_Disable>:
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fd8:	6013      	str	r3, [r2, #0]
}
 8002fda:	bf00      	nop
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_RCC_PLLSAI1_IsReady>:
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ff2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ff6:	d101      	bne.n	8002ffc <LL_RCC_PLLSAI1_IsReady+0x18>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003010:	2300      	movs	r3, #0
 8003012:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003014:	2300      	movs	r3, #0
 8003016:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d034      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800302c:	d021      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800302e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003032:	d81b      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003034:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003038:	d01d      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800303a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800303e:	d815      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00b      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003048:	d110      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003058:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800305a:	e00d      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3304      	adds	r3, #4
 8003060:	4618      	mov	r0, r3
 8003062:	f000 f94d 	bl	8003300 <RCCEx_PLLSAI1_ConfigNP>
 8003066:	4603      	mov	r3, r0
 8003068:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800306a:	e005      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	77fb      	strb	r3, [r7, #31]
        break;
 8003070:	e002      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003072:	bf00      	nop
 8003074:	e000      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003078:	7ffb      	ldrb	r3, [r7, #31]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d105      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fee8 	bl	8002e58 <LL_RCC_SetSAIClockSource>
 8003088:	e001      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308a:	7ffb      	ldrb	r3, [r7, #31]
 800308c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003096:	2b00      	cmp	r3, #0
 8003098:	d046      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800309a:	f7ff ff56 	bl	8002f4a <LL_RCC_GetRTCClockSource>
 800309e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d03c      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80030aa:	f7fe fc59 	bl	8001960 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff30 	bl	8002f1e <LL_RCC_SetRTCClockSource>
 80030be:	e02e      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80030c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80030ca:	f7ff ff4b 	bl	8002f64 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80030ce:	f7ff ff5a 	bl	8002f86 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80030e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80030ea:	f7ff fde1 	bl	8002cb0 <LL_RCC_LSE_IsEnabled>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d114      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030f4:	f7fe f894 	bl	8001220 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80030fa:	e00b      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7fe f890 	bl	8001220 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d902      	bls.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	77fb      	strb	r3, [r7, #31]
              break;
 8003112:	e004      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003114:	f7ff fdde 	bl	8002cd4 <LL_RCC_LSE_IsReady>
 8003118:	4603      	mov	r3, r0
 800311a:	2b01      	cmp	r3, #1
 800311c:	d1ee      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800311e:	7ffb      	ldrb	r3, [r7, #31]
 8003120:	77bb      	strb	r3, [r7, #30]
 8003122:	e001      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003124:	7ffb      	ldrb	r3, [r7, #31]
 8003126:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d004      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fe2a 	bl	8002d92 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d004      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fe35 	bl	8002dbe <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fe5d 	bl	8002e24 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d004      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fe52 	bl	8002e24 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d004      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fe2a 	bl	8002dea <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d004      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fe1f 	bl	8002dea <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d022      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fe8d 	bl	8002edc <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ca:	d107      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80031cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031da:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031e4:	d10b      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 f8e3 	bl	80033b6 <RCCEx_PLLSAI1_ConfigNQ>
 80031f0:	4603      	mov	r3, r0
 80031f2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80031f4:	7ffb      	ldrb	r3, [r7, #31]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80031fa:	7ffb      	ldrb	r3, [r7, #31]
 80031fc:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003206:	2b00      	cmp	r3, #0
 8003208:	d02b      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003212:	d008      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800321c:	d003      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	2b00      	cmp	r3, #0
 8003224:	d105      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fe2a 	bl	8002e84 <LL_RCC_SetRNGClockSource>
 8003230:	e00a      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	2000      	movs	r0, #0
 800323e:	f7ff fe21 	bl	8002e84 <LL_RCC_SetRNGClockSource>
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f7ff fe34 	bl	8002eb0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003250:	d107      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800325c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003260:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326a:	2b00      	cmp	r3, #0
 800326c:	d022      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fe3d 	bl	8002ef2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003280:	d107      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800328c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003290:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800329a:	d10b      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3304      	adds	r3, #4
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 f8e3 	bl	800346c <RCCEx_PLLSAI1_ConfigNR>
 80032a6:	4603      	mov	r3, r0
 80032a8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80032aa:	7ffb      	ldrb	r3, [r7, #31]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80032b0:	7ffb      	ldrb	r3, [r7, #31]
 80032b2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d004      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fd26 	bl	8002d16 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fd45 	bl	8002d6a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fd2c 	bl	8002d42 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80032ea:	7fbb      	ldrb	r3, [r7, #30]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80032f8:	f7ff fcfe 	bl	8002cf8 <LL_RCC_MSI_EnablePLLMode>
}
 80032fc:	bf00      	nop
 80032fe:	bd80      	pop	{r7, pc}

08003300 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800330c:	f7ff fe5b 	bl	8002fc6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003310:	f7fd ff86 	bl	8001220 <HAL_GetTick>
 8003314:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003316:	e009      	b.n	800332c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003318:	f7fd ff82 	bl	8001220 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d902      	bls.n	800332c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	73fb      	strb	r3, [r7, #15]
      break;
 800332a:	e004      	b.n	8003336 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800332c:	f7ff fe5a 	bl	8002fe4 <LL_RCC_PLLSAI1_IsReady>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d137      	bne.n	80033ac <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800333c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003350:	4313      	orrs	r3, r2
 8003352:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003366:	4313      	orrs	r3, r2
 8003368:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800336a:	f7ff fe1d 	bl	8002fa8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336e:	f7fd ff57 	bl	8001220 <HAL_GetTick>
 8003372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003374:	e009      	b.n	800338a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003376:	f7fd ff53 	bl	8001220 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d902      	bls.n	800338a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	73fb      	strb	r3, [r7, #15]
        break;
 8003388:	e004      	b.n	8003394 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800338a:	f7ff fe2b 	bl	8002fe4 <LL_RCC_PLLSAI1_IsReady>
 800338e:	4603      	mov	r3, r0
 8003390:	2b01      	cmp	r3, #1
 8003392:	d1f0      	bne.n	8003376 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d108      	bne.n	80033ac <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800339a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033a8:	4313      	orrs	r3, r2
 80033aa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80033c2:	f7ff fe00 	bl	8002fc6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80033c6:	f7fd ff2b 	bl	8001220 <HAL_GetTick>
 80033ca:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033cc:	e009      	b.n	80033e2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033ce:	f7fd ff27 	bl	8001220 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d902      	bls.n	80033e2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	73fb      	strb	r3, [r7, #15]
      break;
 80033e0:	e004      	b.n	80033ec <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033e2:	f7ff fdff 	bl	8002fe4 <LL_RCC_PLLSAI1_IsReady>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f0      	bne.n	80033ce <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d137      	bne.n	8003462 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80033f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003406:	4313      	orrs	r3, r2
 8003408:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341c:	4313      	orrs	r3, r2
 800341e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003420:	f7ff fdc2 	bl	8002fa8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003424:	f7fd fefc 	bl	8001220 <HAL_GetTick>
 8003428:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800342a:	e009      	b.n	8003440 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800342c:	f7fd fef8 	bl	8001220 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d902      	bls.n	8003440 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	73fb      	strb	r3, [r7, #15]
        break;
 800343e:	e004      	b.n	800344a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003440:	f7ff fdd0 	bl	8002fe4 <LL_RCC_PLLSAI1_IsReady>
 8003444:	4603      	mov	r3, r0
 8003446:	2b01      	cmp	r3, #1
 8003448:	d1f0      	bne.n	800342c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d108      	bne.n	8003462 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800345e:	4313      	orrs	r3, r2
 8003460:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003462:	7bfb      	ldrb	r3, [r7, #15]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003478:	f7ff fda5 	bl	8002fc6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800347c:	f7fd fed0 	bl	8001220 <HAL_GetTick>
 8003480:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003482:	e009      	b.n	8003498 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003484:	f7fd fecc 	bl	8001220 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d902      	bls.n	8003498 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	73fb      	strb	r3, [r7, #15]
      break;
 8003496:	e004      	b.n	80034a2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003498:	f7ff fda4 	bl	8002fe4 <LL_RCC_PLLSAI1_IsReady>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d137      	bne.n	8003518 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80034a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034bc:	4313      	orrs	r3, r2
 80034be:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80034c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d2:	4313      	orrs	r3, r2
 80034d4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80034d6:	f7ff fd67 	bl	8002fa8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034da:	f7fd fea1 	bl	8001220 <HAL_GetTick>
 80034de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034e0:	e009      	b.n	80034f6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034e2:	f7fd fe9d 	bl	8001220 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d902      	bls.n	80034f6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	73fb      	strb	r3, [r7, #15]
        break;
 80034f4:	e004      	b.n	8003500 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034f6:	f7ff fd75 	bl	8002fe4 <LL_RCC_PLLSAI1_IsReady>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d1f0      	bne.n	80034e2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d108      	bne.n	8003518 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003514:	4313      	orrs	r3, r2
 8003516:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e095      	b.n	8003660 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	2b00      	cmp	r3, #0
 800353a:	d108      	bne.n	800354e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003544:	d009      	beq.n	800355a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	61da      	str	r2, [r3, #28]
 800354c:	e005      	b.n	800355a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d106      	bne.n	800357a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fd fc2d 	bl	8000dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003590:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800359a:	d902      	bls.n	80035a2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e002      	b.n	80035a8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80035b0:	d007      	beq.n	80035c2 <HAL_SPI_Init+0xa0>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035ba:	d002      	beq.n	80035c2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	ea42 0103 	orr.w	r1, r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	0c1b      	lsrs	r3, r3, #16
 800361e:	f003 0204 	and.w	r2, r3, #4
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800363e:	ea42 0103 	orr.w	r1, r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	4613      	mov	r3, r2
 8003676:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_SPI_Transmit+0x22>
 8003686:	2302      	movs	r3, #2
 8003688:	e15f      	b.n	800394a <HAL_SPI_Transmit+0x2e2>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003692:	f7fd fdc5 	bl	8001220 <HAL_GetTick>
 8003696:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d002      	beq.n	80036ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
 80036aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036ac:	e148      	b.n	8003940 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_SPI_Transmit+0x52>
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036be:	e13f      	b.n	8003940 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2203      	movs	r2, #3
 80036c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	88fa      	ldrh	r2, [r7, #6]
 80036de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370a:	d10f      	bne.n	800372c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800371a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800372a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d007      	beq.n	800374a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003748:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003752:	d94f      	bls.n	80037f4 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_SPI_Transmit+0xfa>
 800375c:	8afb      	ldrh	r3, [r7, #22]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d142      	bne.n	80037e8 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	881a      	ldrh	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	1c9a      	adds	r2, r3, #2
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003786:	e02f      	b.n	80037e8 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b02      	cmp	r3, #2
 8003794:	d112      	bne.n	80037bc <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	881a      	ldrh	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	1c9a      	adds	r2, r3, #2
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037ba:	e015      	b.n	80037e8 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037bc:	f7fd fd30 	bl	8001220 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d803      	bhi.n	80037d4 <HAL_SPI_Transmit+0x16c>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	d102      	bne.n	80037da <HAL_SPI_Transmit+0x172>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80037e6:	e0ab      	b.n	8003940 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ca      	bne.n	8003788 <HAL_SPI_Transmit+0x120>
 80037f2:	e080      	b.n	80038f6 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_SPI_Transmit+0x19a>
 80037fc:	8afb      	ldrh	r3, [r7, #22]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d174      	bne.n	80038ec <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d912      	bls.n	8003832 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	881a      	ldrh	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	1c9a      	adds	r2, r3, #2
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b02      	subs	r3, #2
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003830:	e05c      	b.n	80038ec <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	330c      	adds	r3, #12
 800383c:	7812      	ldrb	r2, [r2, #0]
 800383e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003858:	e048      	b.n	80038ec <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b02      	cmp	r3, #2
 8003866:	d12b      	bne.n	80038c0 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d912      	bls.n	8003898 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	881a      	ldrh	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	1c9a      	adds	r2, r3, #2
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b02      	subs	r3, #2
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003896:	e029      	b.n	80038ec <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	7812      	ldrb	r2, [r2, #0]
 80038a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038be:	e015      	b.n	80038ec <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038c0:	f7fd fcae 	bl	8001220 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d803      	bhi.n	80038d8 <HAL_SPI_Transmit+0x270>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d6:	d102      	bne.n	80038de <HAL_SPI_Transmit+0x276>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80038ea:	e029      	b.n	8003940 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1b1      	bne.n	800385a <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	6839      	ldr	r1, [r7, #0]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f948 	bl	8003b90 <SPI_EndRxTxTransaction>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003914:	2300      	movs	r3, #0
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	77fb      	strb	r3, [r7, #31]
 8003936:	e003      	b.n	8003940 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003948:	7ffb      	ldrb	r3, [r7, #31]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3720      	adds	r7, #32
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003964:	f7fd fc5c 	bl	8001220 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	4413      	add	r3, r2
 8003972:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003974:	f7fd fc54 	bl	8001220 <HAL_GetTick>
 8003978:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800397a:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	015b      	lsls	r3, r3, #5
 8003980:	0d1b      	lsrs	r3, r3, #20
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	fb02 f303 	mul.w	r3, r2, r3
 8003988:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800398a:	e054      	b.n	8003a36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d050      	beq.n	8003a36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003994:	f7fd fc44 	bl	8001220 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d902      	bls.n	80039aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d13d      	bne.n	8003a26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c2:	d111      	bne.n	80039e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039cc:	d004      	beq.n	80039d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d6:	d107      	bne.n	80039e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f0:	d10f      	bne.n	8003a12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e017      	b.n	8003a56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	bf0c      	ite	eq
 8003a46:	2301      	moveq	r3, #1
 8003a48:	2300      	movne	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d19b      	bne.n	800398c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3720      	adds	r7, #32
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000188 	.word	0x20000188

08003a64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003a76:	f7fd fbd3 	bl	8001220 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	4413      	add	r3, r2
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003a86:	f7fd fbcb 	bl	8001220 <HAL_GetTick>
 8003a8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003a94:	4b3d      	ldr	r3, [pc, #244]	; (8003b8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00da      	lsls	r2, r3, #3
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	0d1b      	lsrs	r3, r3, #20
 8003aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003aac:	e060      	b.n	8003b70 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ab4:	d107      	bne.n	8003ac6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d050      	beq.n	8003b70 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ace:	f7fd fba7 	bl	8001220 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d902      	bls.n	8003ae4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d13d      	bne.n	8003b60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003af2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afc:	d111      	bne.n	8003b22 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b06:	d004      	beq.n	8003b12 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b10:	d107      	bne.n	8003b22 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2a:	d10f      	bne.n	8003b4c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e010      	b.n	8003b82 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d196      	bne.n	8003aae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3728      	adds	r7, #40	; 0x28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000188 	.word	0x20000188

08003b90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff ff5b 	bl	8003a64 <SPI_WaitFifoStateUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb8:	f043 0220 	orr.w	r2, r3, #32
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e027      	b.n	8003c14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2180      	movs	r1, #128	; 0x80
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f7ff fec0 	bl	8003954 <SPI_WaitFlagStateUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bde:	f043 0220 	orr.w	r2, r3, #32
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e014      	b.n	8003c14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f7ff ff34 	bl	8003a64 <SPI_WaitFifoStateUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c06:	f043 0220 	orr.w	r2, r3, #32
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e000      	b.n	8003c14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <LL_RCC_GetUSARTClockSource>:
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4013      	ands	r3, r2
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_RCC_GetLPUARTClockSource>:
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4013      	ands	r3, r2
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e042      	b.n	8003cf4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d106      	bne.n	8003c86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7fd f8d7 	bl	8000e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2224      	movs	r2, #36	; 0x24
 8003c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0201 	bic.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fa50 	bl	800414c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f825 	bl	8003cfc <UART_SetConfig>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e01b      	b.n	8003cf4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 facf 	bl	8004290 <UART_CheckIdleState>
 8003cf2:	4603      	mov	r3, r0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d00:	b08c      	sub	sp, #48	; 0x30
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4baf      	ldr	r3, [pc, #700]	; (8003fe8 <UART_SetConfig+0x2ec>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d34:	430b      	orrs	r3, r1
 8003d36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4aa4      	ldr	r2, [pc, #656]	; (8003fec <UART_SetConfig+0x2f0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d004      	beq.n	8003d68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d64:	4313      	orrs	r3, r2
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003d72:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	f023 010f 	bic.w	r1, r3, #15
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a95      	ldr	r2, [pc, #596]	; (8003ff0 <UART_SetConfig+0x2f4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d125      	bne.n	8003dec <UART_SetConfig+0xf0>
 8003da0:	2003      	movs	r0, #3
 8003da2:	f7ff ff3b 	bl	8003c1c <LL_RCC_GetUSARTClockSource>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d81b      	bhi.n	8003de4 <UART_SetConfig+0xe8>
 8003dac:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <UART_SetConfig+0xb8>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dd5 	.word	0x08003dd5
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003ddd 	.word	0x08003ddd
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dca:	e042      	b.n	8003e52 <UART_SetConfig+0x156>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dd2:	e03e      	b.n	8003e52 <UART_SetConfig+0x156>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dda:	e03a      	b.n	8003e52 <UART_SetConfig+0x156>
 8003ddc:	2308      	movs	r3, #8
 8003dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de2:	e036      	b.n	8003e52 <UART_SetConfig+0x156>
 8003de4:	2310      	movs	r3, #16
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dea:	e032      	b.n	8003e52 <UART_SetConfig+0x156>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a7e      	ldr	r2, [pc, #504]	; (8003fec <UART_SetConfig+0x2f0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d12a      	bne.n	8003e4c <UART_SetConfig+0x150>
 8003df6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003dfa:	f7ff ff1f 	bl	8003c3c <LL_RCC_GetLPUARTClockSource>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e04:	d01a      	beq.n	8003e3c <UART_SetConfig+0x140>
 8003e06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e0a:	d81b      	bhi.n	8003e44 <UART_SetConfig+0x148>
 8003e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e10:	d00c      	beq.n	8003e2c <UART_SetConfig+0x130>
 8003e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e16:	d815      	bhi.n	8003e44 <UART_SetConfig+0x148>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <UART_SetConfig+0x128>
 8003e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e20:	d008      	beq.n	8003e34 <UART_SetConfig+0x138>
 8003e22:	e00f      	b.n	8003e44 <UART_SetConfig+0x148>
 8003e24:	2300      	movs	r3, #0
 8003e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e2a:	e012      	b.n	8003e52 <UART_SetConfig+0x156>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e32:	e00e      	b.n	8003e52 <UART_SetConfig+0x156>
 8003e34:	2304      	movs	r3, #4
 8003e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e3a:	e00a      	b.n	8003e52 <UART_SetConfig+0x156>
 8003e3c:	2308      	movs	r3, #8
 8003e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e42:	e006      	b.n	8003e52 <UART_SetConfig+0x156>
 8003e44:	2310      	movs	r3, #16
 8003e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e4a:	e002      	b.n	8003e52 <UART_SetConfig+0x156>
 8003e4c:	2310      	movs	r3, #16
 8003e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a65      	ldr	r2, [pc, #404]	; (8003fec <UART_SetConfig+0x2f0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	f040 8097 	bne.w	8003f8c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d823      	bhi.n	8003eae <UART_SetConfig+0x1b2>
 8003e66:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <UART_SetConfig+0x170>)
 8003e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003eaf 	.word	0x08003eaf
 8003e74:	08003e99 	.word	0x08003e99
 8003e78:	08003eaf 	.word	0x08003eaf
 8003e7c:	08003e9f 	.word	0x08003e9f
 8003e80:	08003eaf 	.word	0x08003eaf
 8003e84:	08003eaf 	.word	0x08003eaf
 8003e88:	08003eaf 	.word	0x08003eaf
 8003e8c:	08003ea7 	.word	0x08003ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e90:	f7fe fe2e 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 8003e94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e96:	e010      	b.n	8003eba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e98:	4b56      	ldr	r3, [pc, #344]	; (8003ff4 <UART_SetConfig+0x2f8>)
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e9c:	e00d      	b.n	8003eba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e9e:	f7fe fda7 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8003ea2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ea4:	e009      	b.n	8003eba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003eac:	e005      	b.n	8003eba <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003eb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 812b 	beq.w	8004118 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	4a4c      	ldr	r2, [pc, #304]	; (8003ff8 <UART_SetConfig+0x2fc>)
 8003ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	4413      	add	r3, r2
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d305      	bcc.n	8003ef2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d903      	bls.n	8003efa <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ef8:	e10e      	b.n	8004118 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	2200      	movs	r2, #0
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	60fa      	str	r2, [r7, #12]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	4a3c      	ldr	r2, [pc, #240]	; (8003ff8 <UART_SetConfig+0x2fc>)
 8003f08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2200      	movs	r2, #0
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f1c:	f7fc f980 	bl	8000220 <__aeabi_uldivmod>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	020b      	lsls	r3, r1, #8
 8003f32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f36:	0202      	lsls	r2, r0, #8
 8003f38:	6979      	ldr	r1, [r7, #20]
 8003f3a:	6849      	ldr	r1, [r1, #4]
 8003f3c:	0849      	lsrs	r1, r1, #1
 8003f3e:	2000      	movs	r0, #0
 8003f40:	460c      	mov	r4, r1
 8003f42:	4605      	mov	r5, r0
 8003f44:	eb12 0804 	adds.w	r8, r2, r4
 8003f48:	eb43 0905 	adc.w	r9, r3, r5
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	469a      	mov	sl, r3
 8003f54:	4693      	mov	fp, r2
 8003f56:	4652      	mov	r2, sl
 8003f58:	465b      	mov	r3, fp
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	f7fc f95f 	bl	8000220 <__aeabi_uldivmod>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4613      	mov	r3, r2
 8003f68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f70:	d308      	bcc.n	8003f84 <UART_SetConfig+0x288>
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f78:	d204      	bcs.n	8003f84 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a3a      	ldr	r2, [r7, #32]
 8003f80:	60da      	str	r2, [r3, #12]
 8003f82:	e0c9      	b.n	8004118 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f8a:	e0c5      	b.n	8004118 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f94:	d16d      	bne.n	8004072 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003f96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	2b07      	cmp	r3, #7
 8003f9e:	d82d      	bhi.n	8003ffc <UART_SetConfig+0x300>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <UART_SetConfig+0x2ac>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003fc9 	.word	0x08003fc9
 8003fac:	08003fd1 	.word	0x08003fd1
 8003fb0:	08003ffd 	.word	0x08003ffd
 8003fb4:	08003fd7 	.word	0x08003fd7
 8003fb8:	08003ffd 	.word	0x08003ffd
 8003fbc:	08003ffd 	.word	0x08003ffd
 8003fc0:	08003ffd 	.word	0x08003ffd
 8003fc4:	08003fdf 	.word	0x08003fdf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc8:	f7fe fda8 	bl	8002b1c <HAL_RCC_GetPCLK2Freq>
 8003fcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fce:	e01b      	b.n	8004008 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <UART_SetConfig+0x2f8>)
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fd4:	e018      	b.n	8004008 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd6:	f7fe fd0b 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8003fda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fdc:	e014      	b.n	8004008 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fe4:	e010      	b.n	8004008 <UART_SetConfig+0x30c>
 8003fe6:	bf00      	nop
 8003fe8:	cfff69f3 	.word	0xcfff69f3
 8003fec:	40008000 	.word	0x40008000
 8003ff0:	40013800 	.word	0x40013800
 8003ff4:	00f42400 	.word	0x00f42400
 8003ff8:	080087d4 	.word	0x080087d4
      default:
        pclk = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004006:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 8084 	beq.w	8004118 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	4a4b      	ldr	r2, [pc, #300]	; (8004144 <UART_SetConfig+0x448>)
 8004016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800401a:	461a      	mov	r2, r3
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004022:	005a      	lsls	r2, r3, #1
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	085b      	lsrs	r3, r3, #1
 800402a:	441a      	add	r2, r3
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	fbb2 f3f3 	udiv	r3, r2, r3
 8004034:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	2b0f      	cmp	r3, #15
 800403a:	d916      	bls.n	800406a <UART_SetConfig+0x36e>
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004042:	d212      	bcs.n	800406a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	b29b      	uxth	r3, r3
 8004048:	f023 030f 	bic.w	r3, r3, #15
 800404c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	085b      	lsrs	r3, r3, #1
 8004052:	b29b      	uxth	r3, r3
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	b29a      	uxth	r2, r3
 800405a:	8bfb      	ldrh	r3, [r7, #30]
 800405c:	4313      	orrs	r3, r2
 800405e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	8bfa      	ldrh	r2, [r7, #30]
 8004066:	60da      	str	r2, [r3, #12]
 8004068:	e056      	b.n	8004118 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004070:	e052      	b.n	8004118 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004072:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004076:	3b01      	subs	r3, #1
 8004078:	2b07      	cmp	r3, #7
 800407a:	d822      	bhi.n	80040c2 <UART_SetConfig+0x3c6>
 800407c:	a201      	add	r2, pc, #4	; (adr r2, 8004084 <UART_SetConfig+0x388>)
 800407e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004082:	bf00      	nop
 8004084:	080040a5 	.word	0x080040a5
 8004088:	080040ad 	.word	0x080040ad
 800408c:	080040c3 	.word	0x080040c3
 8004090:	080040b3 	.word	0x080040b3
 8004094:	080040c3 	.word	0x080040c3
 8004098:	080040c3 	.word	0x080040c3
 800409c:	080040c3 	.word	0x080040c3
 80040a0:	080040bb 	.word	0x080040bb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a4:	f7fe fd3a 	bl	8002b1c <HAL_RCC_GetPCLK2Freq>
 80040a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040aa:	e010      	b.n	80040ce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ac:	4b26      	ldr	r3, [pc, #152]	; (8004148 <UART_SetConfig+0x44c>)
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040b0:	e00d      	b.n	80040ce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b2:	f7fe fc9d 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80040b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040b8:	e009      	b.n	80040ce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040c0:	e005      	b.n	80040ce <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040cc:	bf00      	nop
    }

    if (pclk != 0U)
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d021      	beq.n	8004118 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	4a1a      	ldr	r2, [pc, #104]	; (8004144 <UART_SetConfig+0x448>)
 80040da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040de:	461a      	mov	r2, r3
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	441a      	add	r2, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	2b0f      	cmp	r3, #15
 80040fc:	d909      	bls.n	8004112 <UART_SetConfig+0x416>
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004104:	d205      	bcs.n	8004112 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	b29a      	uxth	r2, r3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60da      	str	r2, [r3, #12]
 8004110:	e002      	b.n	8004118 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2201      	movs	r2, #1
 800411c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2201      	movs	r2, #1
 8004124:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2200      	movs	r2, #0
 800412c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2200      	movs	r2, #0
 8004132:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004134:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004138:	4618      	mov	r0, r3
 800413a:	3730      	adds	r7, #48	; 0x30
 800413c:	46bd      	mov	sp, r7
 800413e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004142:	bf00      	nop
 8004144:	080087d4 	.word	0x080087d4
 8004148:	00f42400 	.word	0x00f42400

0800414c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01a      	beq.n	8004262 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800424a:	d10a      	bne.n	8004262 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	605a      	str	r2, [r3, #4]
  }
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b098      	sub	sp, #96	; 0x60
 8004294:	af02      	add	r7, sp, #8
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042a0:	f7fc ffbe 	bl	8001220 <HAL_GetTick>
 80042a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d12f      	bne.n	8004314 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042bc:	2200      	movs	r2, #0
 80042be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f88e 	bl	80043e4 <UART_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d022      	beq.n	8004314 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e2:	653b      	str	r3, [r7, #80]	; 0x50
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ec:	647b      	str	r3, [r7, #68]	; 0x44
 80042ee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e6      	bne.n	80042ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e063      	b.n	80043dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b04      	cmp	r3, #4
 8004320:	d149      	bne.n	80043b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004322:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800432a:	2200      	movs	r2, #0
 800432c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f857 	bl	80043e4 <UART_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d03c      	beq.n	80043b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	623b      	str	r3, [r7, #32]
   return(result);
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004350:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
 800435c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e6      	bne.n	800433c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3308      	adds	r3, #8
 8004374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	60fb      	str	r3, [r7, #12]
   return(result);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f023 0301 	bic.w	r3, r3, #1
 8004384:	64bb      	str	r3, [r7, #72]	; 0x48
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3308      	adds	r3, #8
 800438c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800438e:	61fa      	str	r2, [r7, #28]
 8004390:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	69b9      	ldr	r1, [r7, #24]
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	617b      	str	r3, [r7, #20]
   return(result);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e5      	bne.n	800436e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e012      	b.n	80043dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3758      	adds	r7, #88	; 0x58
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f4:	e04f      	b.n	8004496 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d04b      	beq.n	8004496 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fe:	f7fc ff0f 	bl	8001220 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	429a      	cmp	r2, r3
 800440c:	d302      	bcc.n	8004414 <UART_WaitOnFlagUntilTimeout+0x30>
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e04e      	b.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d037      	beq.n	8004496 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	d034      	beq.n	8004496 <UART_WaitOnFlagUntilTimeout+0xb2>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b40      	cmp	r3, #64	; 0x40
 8004430:	d031      	beq.n	8004496 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b08      	cmp	r3, #8
 800443e:	d110      	bne.n	8004462 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2208      	movs	r2, #8
 8004446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f838 	bl	80044be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2208      	movs	r2, #8
 8004452:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e029      	b.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800446c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004470:	d111      	bne.n	8004496 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800447a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f81e 	bl	80044be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e00f      	b.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4013      	ands	r3, r2
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	bf0c      	ite	eq
 80044a6:	2301      	moveq	r3, #1
 80044a8:	2300      	movne	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d0a0      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044be:	b480      	push	{r7}
 80044c0:	b095      	sub	sp, #84	; 0x54
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e4:	643b      	str	r3, [r7, #64]	; 0x40
 80044e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044ec:	e841 2300 	strex	r3, r2, [r1]
 80044f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e6      	bne.n	80044c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3308      	adds	r3, #8
 80044fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	61fb      	str	r3, [r7, #28]
   return(result);
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	64bb      	str	r3, [r7, #72]	; 0x48
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800451c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e3      	bne.n	80044f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004534:	2b01      	cmp	r3, #1
 8004536:	d118      	bne.n	800456a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	60bb      	str	r3, [r7, #8]
   return(result);
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f023 0310 	bic.w	r3, r3, #16
 800454c:	647b      	str	r3, [r7, #68]	; 0x44
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004556:	61bb      	str	r3, [r7, #24]
 8004558:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	6979      	ldr	r1, [r7, #20]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	613b      	str	r3, [r7, #16]
   return(result);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e6      	bne.n	8004538 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800457e:	bf00      	nop
 8004580:	3754      	adds	r7, #84	; 0x54
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800459c:	2302      	movs	r3, #2
 800459e:	e027      	b.n	80045f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2224      	movs	r2, #36	; 0x24
 80045ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80045ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004610:	2302      	movs	r3, #2
 8004612:	e02d      	b.n	8004670 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2224      	movs	r2, #36	; 0x24
 8004620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0201 	bic.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f84f 	bl	80046f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800468c:	2302      	movs	r3, #2
 800468e:	e02d      	b.n	80046ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	; 0x24
 800469c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f811 	bl	80046f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004700:	2b00      	cmp	r3, #0
 8004702:	d108      	bne.n	8004716 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004714:	e031      	b.n	800477a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004716:	2308      	movs	r3, #8
 8004718:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800471a:	2308      	movs	r3, #8
 800471c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	0e5b      	lsrs	r3, r3, #25
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	0f5b      	lsrs	r3, r3, #29
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800473e:	7bbb      	ldrb	r3, [r7, #14]
 8004740:	7b3a      	ldrb	r2, [r7, #12]
 8004742:	4911      	ldr	r1, [pc, #68]	; (8004788 <UARTEx_SetNbDataToProcess+0x94>)
 8004744:	5c8a      	ldrb	r2, [r1, r2]
 8004746:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800474a:	7b3a      	ldrb	r2, [r7, #12]
 800474c:	490f      	ldr	r1, [pc, #60]	; (800478c <UARTEx_SetNbDataToProcess+0x98>)
 800474e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004750:	fb93 f3f2 	sdiv	r3, r3, r2
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	7b7a      	ldrb	r2, [r7, #13]
 8004760:	4909      	ldr	r1, [pc, #36]	; (8004788 <UARTEx_SetNbDataToProcess+0x94>)
 8004762:	5c8a      	ldrb	r2, [r1, r2]
 8004764:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004768:	7b7a      	ldrb	r2, [r7, #13]
 800476a:	4908      	ldr	r1, [pc, #32]	; (800478c <UARTEx_SetNbDataToProcess+0x98>)
 800476c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800476e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004772:	b29a      	uxth	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800477a:	bf00      	nop
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	080087ec 	.word	0x080087ec
 800478c:	080087f4 	.word	0x080087f4

08004790 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004798:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800479c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	4013      	ands	r3, r2
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	1d3b      	adds	r3, r7, #4
 80047d0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <siprintf>:
 8004804:	b40e      	push	{r1, r2, r3}
 8004806:	b500      	push	{lr}
 8004808:	b09c      	sub	sp, #112	; 0x70
 800480a:	ab1d      	add	r3, sp, #116	; 0x74
 800480c:	9002      	str	r0, [sp, #8]
 800480e:	9006      	str	r0, [sp, #24]
 8004810:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004814:	4809      	ldr	r0, [pc, #36]	; (800483c <siprintf+0x38>)
 8004816:	9107      	str	r1, [sp, #28]
 8004818:	9104      	str	r1, [sp, #16]
 800481a:	4909      	ldr	r1, [pc, #36]	; (8004840 <siprintf+0x3c>)
 800481c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004820:	9105      	str	r1, [sp, #20]
 8004822:	6800      	ldr	r0, [r0, #0]
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	a902      	add	r1, sp, #8
 8004828:	f000 f9a0 	bl	8004b6c <_svfiprintf_r>
 800482c:	9b02      	ldr	r3, [sp, #8]
 800482e:	2200      	movs	r2, #0
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	b01c      	add	sp, #112	; 0x70
 8004834:	f85d eb04 	ldr.w	lr, [sp], #4
 8004838:	b003      	add	sp, #12
 800483a:	4770      	bx	lr
 800483c:	200001e0 	.word	0x200001e0
 8004840:	ffff0208 	.word	0xffff0208

08004844 <memset>:
 8004844:	4402      	add	r2, r0
 8004846:	4603      	mov	r3, r0
 8004848:	4293      	cmp	r3, r2
 800484a:	d100      	bne.n	800484e <memset+0xa>
 800484c:	4770      	bx	lr
 800484e:	f803 1b01 	strb.w	r1, [r3], #1
 8004852:	e7f9      	b.n	8004848 <memset+0x4>

08004854 <__errno>:
 8004854:	4b01      	ldr	r3, [pc, #4]	; (800485c <__errno+0x8>)
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	200001e0 	.word	0x200001e0

08004860 <__libc_init_array>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	4d0d      	ldr	r5, [pc, #52]	; (8004898 <__libc_init_array+0x38>)
 8004864:	4c0d      	ldr	r4, [pc, #52]	; (800489c <__libc_init_array+0x3c>)
 8004866:	1b64      	subs	r4, r4, r5
 8004868:	10a4      	asrs	r4, r4, #2
 800486a:	2600      	movs	r6, #0
 800486c:	42a6      	cmp	r6, r4
 800486e:	d109      	bne.n	8004884 <__libc_init_array+0x24>
 8004870:	4d0b      	ldr	r5, [pc, #44]	; (80048a0 <__libc_init_array+0x40>)
 8004872:	4c0c      	ldr	r4, [pc, #48]	; (80048a4 <__libc_init_array+0x44>)
 8004874:	f000 fc6a 	bl	800514c <_init>
 8004878:	1b64      	subs	r4, r4, r5
 800487a:	10a4      	asrs	r4, r4, #2
 800487c:	2600      	movs	r6, #0
 800487e:	42a6      	cmp	r6, r4
 8004880:	d105      	bne.n	800488e <__libc_init_array+0x2e>
 8004882:	bd70      	pop	{r4, r5, r6, pc}
 8004884:	f855 3b04 	ldr.w	r3, [r5], #4
 8004888:	4798      	blx	r3
 800488a:	3601      	adds	r6, #1
 800488c:	e7ee      	b.n	800486c <__libc_init_array+0xc>
 800488e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004892:	4798      	blx	r3
 8004894:	3601      	adds	r6, #1
 8004896:	e7f2      	b.n	800487e <__libc_init_array+0x1e>
 8004898:	08008838 	.word	0x08008838
 800489c:	08008838 	.word	0x08008838
 80048a0:	08008838 	.word	0x08008838
 80048a4:	0800883c 	.word	0x0800883c

080048a8 <__retarget_lock_acquire_recursive>:
 80048a8:	4770      	bx	lr

080048aa <__retarget_lock_release_recursive>:
 80048aa:	4770      	bx	lr

080048ac <memcpy>:
 80048ac:	440a      	add	r2, r1
 80048ae:	4291      	cmp	r1, r2
 80048b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80048b4:	d100      	bne.n	80048b8 <memcpy+0xc>
 80048b6:	4770      	bx	lr
 80048b8:	b510      	push	{r4, lr}
 80048ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048c2:	4291      	cmp	r1, r2
 80048c4:	d1f9      	bne.n	80048ba <memcpy+0xe>
 80048c6:	bd10      	pop	{r4, pc}

080048c8 <_free_r>:
 80048c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048ca:	2900      	cmp	r1, #0
 80048cc:	d044      	beq.n	8004958 <_free_r+0x90>
 80048ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d2:	9001      	str	r0, [sp, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f1a1 0404 	sub.w	r4, r1, #4
 80048da:	bfb8      	it	lt
 80048dc:	18e4      	addlt	r4, r4, r3
 80048de:	f000 f8df 	bl	8004aa0 <__malloc_lock>
 80048e2:	4a1e      	ldr	r2, [pc, #120]	; (800495c <_free_r+0x94>)
 80048e4:	9801      	ldr	r0, [sp, #4]
 80048e6:	6813      	ldr	r3, [r2, #0]
 80048e8:	b933      	cbnz	r3, 80048f8 <_free_r+0x30>
 80048ea:	6063      	str	r3, [r4, #4]
 80048ec:	6014      	str	r4, [r2, #0]
 80048ee:	b003      	add	sp, #12
 80048f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048f4:	f000 b8da 	b.w	8004aac <__malloc_unlock>
 80048f8:	42a3      	cmp	r3, r4
 80048fa:	d908      	bls.n	800490e <_free_r+0x46>
 80048fc:	6825      	ldr	r5, [r4, #0]
 80048fe:	1961      	adds	r1, r4, r5
 8004900:	428b      	cmp	r3, r1
 8004902:	bf01      	itttt	eq
 8004904:	6819      	ldreq	r1, [r3, #0]
 8004906:	685b      	ldreq	r3, [r3, #4]
 8004908:	1949      	addeq	r1, r1, r5
 800490a:	6021      	streq	r1, [r4, #0]
 800490c:	e7ed      	b.n	80048ea <_free_r+0x22>
 800490e:	461a      	mov	r2, r3
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	b10b      	cbz	r3, 8004918 <_free_r+0x50>
 8004914:	42a3      	cmp	r3, r4
 8004916:	d9fa      	bls.n	800490e <_free_r+0x46>
 8004918:	6811      	ldr	r1, [r2, #0]
 800491a:	1855      	adds	r5, r2, r1
 800491c:	42a5      	cmp	r5, r4
 800491e:	d10b      	bne.n	8004938 <_free_r+0x70>
 8004920:	6824      	ldr	r4, [r4, #0]
 8004922:	4421      	add	r1, r4
 8004924:	1854      	adds	r4, r2, r1
 8004926:	42a3      	cmp	r3, r4
 8004928:	6011      	str	r1, [r2, #0]
 800492a:	d1e0      	bne.n	80048ee <_free_r+0x26>
 800492c:	681c      	ldr	r4, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	6053      	str	r3, [r2, #4]
 8004932:	440c      	add	r4, r1
 8004934:	6014      	str	r4, [r2, #0]
 8004936:	e7da      	b.n	80048ee <_free_r+0x26>
 8004938:	d902      	bls.n	8004940 <_free_r+0x78>
 800493a:	230c      	movs	r3, #12
 800493c:	6003      	str	r3, [r0, #0]
 800493e:	e7d6      	b.n	80048ee <_free_r+0x26>
 8004940:	6825      	ldr	r5, [r4, #0]
 8004942:	1961      	adds	r1, r4, r5
 8004944:	428b      	cmp	r3, r1
 8004946:	bf04      	itt	eq
 8004948:	6819      	ldreq	r1, [r3, #0]
 800494a:	685b      	ldreq	r3, [r3, #4]
 800494c:	6063      	str	r3, [r4, #4]
 800494e:	bf04      	itt	eq
 8004950:	1949      	addeq	r1, r1, r5
 8004952:	6021      	streq	r1, [r4, #0]
 8004954:	6054      	str	r4, [r2, #4]
 8004956:	e7ca      	b.n	80048ee <_free_r+0x26>
 8004958:	b003      	add	sp, #12
 800495a:	bd30      	pop	{r4, r5, pc}
 800495c:	20004144 	.word	0x20004144

08004960 <sbrk_aligned>:
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	4e0e      	ldr	r6, [pc, #56]	; (800499c <sbrk_aligned+0x3c>)
 8004964:	460c      	mov	r4, r1
 8004966:	6831      	ldr	r1, [r6, #0]
 8004968:	4605      	mov	r5, r0
 800496a:	b911      	cbnz	r1, 8004972 <sbrk_aligned+0x12>
 800496c:	f000 fba6 	bl	80050bc <_sbrk_r>
 8004970:	6030      	str	r0, [r6, #0]
 8004972:	4621      	mov	r1, r4
 8004974:	4628      	mov	r0, r5
 8004976:	f000 fba1 	bl	80050bc <_sbrk_r>
 800497a:	1c43      	adds	r3, r0, #1
 800497c:	d00a      	beq.n	8004994 <sbrk_aligned+0x34>
 800497e:	1cc4      	adds	r4, r0, #3
 8004980:	f024 0403 	bic.w	r4, r4, #3
 8004984:	42a0      	cmp	r0, r4
 8004986:	d007      	beq.n	8004998 <sbrk_aligned+0x38>
 8004988:	1a21      	subs	r1, r4, r0
 800498a:	4628      	mov	r0, r5
 800498c:	f000 fb96 	bl	80050bc <_sbrk_r>
 8004990:	3001      	adds	r0, #1
 8004992:	d101      	bne.n	8004998 <sbrk_aligned+0x38>
 8004994:	f04f 34ff 	mov.w	r4, #4294967295
 8004998:	4620      	mov	r0, r4
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	20004148 	.word	0x20004148

080049a0 <_malloc_r>:
 80049a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a4:	1ccd      	adds	r5, r1, #3
 80049a6:	f025 0503 	bic.w	r5, r5, #3
 80049aa:	3508      	adds	r5, #8
 80049ac:	2d0c      	cmp	r5, #12
 80049ae:	bf38      	it	cc
 80049b0:	250c      	movcc	r5, #12
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	4607      	mov	r7, r0
 80049b6:	db01      	blt.n	80049bc <_malloc_r+0x1c>
 80049b8:	42a9      	cmp	r1, r5
 80049ba:	d905      	bls.n	80049c8 <_malloc_r+0x28>
 80049bc:	230c      	movs	r3, #12
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	2600      	movs	r6, #0
 80049c2:	4630      	mov	r0, r6
 80049c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a9c <_malloc_r+0xfc>
 80049cc:	f000 f868 	bl	8004aa0 <__malloc_lock>
 80049d0:	f8d8 3000 	ldr.w	r3, [r8]
 80049d4:	461c      	mov	r4, r3
 80049d6:	bb5c      	cbnz	r4, 8004a30 <_malloc_r+0x90>
 80049d8:	4629      	mov	r1, r5
 80049da:	4638      	mov	r0, r7
 80049dc:	f7ff ffc0 	bl	8004960 <sbrk_aligned>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	4604      	mov	r4, r0
 80049e4:	d155      	bne.n	8004a92 <_malloc_r+0xf2>
 80049e6:	f8d8 4000 	ldr.w	r4, [r8]
 80049ea:	4626      	mov	r6, r4
 80049ec:	2e00      	cmp	r6, #0
 80049ee:	d145      	bne.n	8004a7c <_malloc_r+0xdc>
 80049f0:	2c00      	cmp	r4, #0
 80049f2:	d048      	beq.n	8004a86 <_malloc_r+0xe6>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	4631      	mov	r1, r6
 80049f8:	4638      	mov	r0, r7
 80049fa:	eb04 0903 	add.w	r9, r4, r3
 80049fe:	f000 fb5d 	bl	80050bc <_sbrk_r>
 8004a02:	4581      	cmp	r9, r0
 8004a04:	d13f      	bne.n	8004a86 <_malloc_r+0xe6>
 8004a06:	6821      	ldr	r1, [r4, #0]
 8004a08:	1a6d      	subs	r5, r5, r1
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	f7ff ffa7 	bl	8004960 <sbrk_aligned>
 8004a12:	3001      	adds	r0, #1
 8004a14:	d037      	beq.n	8004a86 <_malloc_r+0xe6>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	442b      	add	r3, r5
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d038      	beq.n	8004a96 <_malloc_r+0xf6>
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	42a2      	cmp	r2, r4
 8004a28:	d12b      	bne.n	8004a82 <_malloc_r+0xe2>
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	605a      	str	r2, [r3, #4]
 8004a2e:	e00f      	b.n	8004a50 <_malloc_r+0xb0>
 8004a30:	6822      	ldr	r2, [r4, #0]
 8004a32:	1b52      	subs	r2, r2, r5
 8004a34:	d41f      	bmi.n	8004a76 <_malloc_r+0xd6>
 8004a36:	2a0b      	cmp	r2, #11
 8004a38:	d917      	bls.n	8004a6a <_malloc_r+0xca>
 8004a3a:	1961      	adds	r1, r4, r5
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	6025      	str	r5, [r4, #0]
 8004a40:	bf18      	it	ne
 8004a42:	6059      	strne	r1, [r3, #4]
 8004a44:	6863      	ldr	r3, [r4, #4]
 8004a46:	bf08      	it	eq
 8004a48:	f8c8 1000 	streq.w	r1, [r8]
 8004a4c:	5162      	str	r2, [r4, r5]
 8004a4e:	604b      	str	r3, [r1, #4]
 8004a50:	4638      	mov	r0, r7
 8004a52:	f104 060b 	add.w	r6, r4, #11
 8004a56:	f000 f829 	bl	8004aac <__malloc_unlock>
 8004a5a:	f026 0607 	bic.w	r6, r6, #7
 8004a5e:	1d23      	adds	r3, r4, #4
 8004a60:	1af2      	subs	r2, r6, r3
 8004a62:	d0ae      	beq.n	80049c2 <_malloc_r+0x22>
 8004a64:	1b9b      	subs	r3, r3, r6
 8004a66:	50a3      	str	r3, [r4, r2]
 8004a68:	e7ab      	b.n	80049c2 <_malloc_r+0x22>
 8004a6a:	42a3      	cmp	r3, r4
 8004a6c:	6862      	ldr	r2, [r4, #4]
 8004a6e:	d1dd      	bne.n	8004a2c <_malloc_r+0x8c>
 8004a70:	f8c8 2000 	str.w	r2, [r8]
 8004a74:	e7ec      	b.n	8004a50 <_malloc_r+0xb0>
 8004a76:	4623      	mov	r3, r4
 8004a78:	6864      	ldr	r4, [r4, #4]
 8004a7a:	e7ac      	b.n	80049d6 <_malloc_r+0x36>
 8004a7c:	4634      	mov	r4, r6
 8004a7e:	6876      	ldr	r6, [r6, #4]
 8004a80:	e7b4      	b.n	80049ec <_malloc_r+0x4c>
 8004a82:	4613      	mov	r3, r2
 8004a84:	e7cc      	b.n	8004a20 <_malloc_r+0x80>
 8004a86:	230c      	movs	r3, #12
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	f000 f80e 	bl	8004aac <__malloc_unlock>
 8004a90:	e797      	b.n	80049c2 <_malloc_r+0x22>
 8004a92:	6025      	str	r5, [r4, #0]
 8004a94:	e7dc      	b.n	8004a50 <_malloc_r+0xb0>
 8004a96:	605b      	str	r3, [r3, #4]
 8004a98:	deff      	udf	#255	; 0xff
 8004a9a:	bf00      	nop
 8004a9c:	20004144 	.word	0x20004144

08004aa0 <__malloc_lock>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	; (8004aa8 <__malloc_lock+0x8>)
 8004aa2:	f7ff bf01 	b.w	80048a8 <__retarget_lock_acquire_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	20004140 	.word	0x20004140

08004aac <__malloc_unlock>:
 8004aac:	4801      	ldr	r0, [pc, #4]	; (8004ab4 <__malloc_unlock+0x8>)
 8004aae:	f7ff befc 	b.w	80048aa <__retarget_lock_release_recursive>
 8004ab2:	bf00      	nop
 8004ab4:	20004140 	.word	0x20004140

08004ab8 <__ssputs_r>:
 8004ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004abc:	688e      	ldr	r6, [r1, #8]
 8004abe:	461f      	mov	r7, r3
 8004ac0:	42be      	cmp	r6, r7
 8004ac2:	680b      	ldr	r3, [r1, #0]
 8004ac4:	4682      	mov	sl, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	4690      	mov	r8, r2
 8004aca:	d82c      	bhi.n	8004b26 <__ssputs_r+0x6e>
 8004acc:	898a      	ldrh	r2, [r1, #12]
 8004ace:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ad2:	d026      	beq.n	8004b22 <__ssputs_r+0x6a>
 8004ad4:	6965      	ldr	r5, [r4, #20]
 8004ad6:	6909      	ldr	r1, [r1, #16]
 8004ad8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004adc:	eba3 0901 	sub.w	r9, r3, r1
 8004ae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ae4:	1c7b      	adds	r3, r7, #1
 8004ae6:	444b      	add	r3, r9
 8004ae8:	106d      	asrs	r5, r5, #1
 8004aea:	429d      	cmp	r5, r3
 8004aec:	bf38      	it	cc
 8004aee:	461d      	movcc	r5, r3
 8004af0:	0553      	lsls	r3, r2, #21
 8004af2:	d527      	bpl.n	8004b44 <__ssputs_r+0x8c>
 8004af4:	4629      	mov	r1, r5
 8004af6:	f7ff ff53 	bl	80049a0 <_malloc_r>
 8004afa:	4606      	mov	r6, r0
 8004afc:	b360      	cbz	r0, 8004b58 <__ssputs_r+0xa0>
 8004afe:	6921      	ldr	r1, [r4, #16]
 8004b00:	464a      	mov	r2, r9
 8004b02:	f7ff fed3 	bl	80048ac <memcpy>
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b10:	81a3      	strh	r3, [r4, #12]
 8004b12:	6126      	str	r6, [r4, #16]
 8004b14:	6165      	str	r5, [r4, #20]
 8004b16:	444e      	add	r6, r9
 8004b18:	eba5 0509 	sub.w	r5, r5, r9
 8004b1c:	6026      	str	r6, [r4, #0]
 8004b1e:	60a5      	str	r5, [r4, #8]
 8004b20:	463e      	mov	r6, r7
 8004b22:	42be      	cmp	r6, r7
 8004b24:	d900      	bls.n	8004b28 <__ssputs_r+0x70>
 8004b26:	463e      	mov	r6, r7
 8004b28:	6820      	ldr	r0, [r4, #0]
 8004b2a:	4632      	mov	r2, r6
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	f000 faab 	bl	8005088 <memmove>
 8004b32:	68a3      	ldr	r3, [r4, #8]
 8004b34:	1b9b      	subs	r3, r3, r6
 8004b36:	60a3      	str	r3, [r4, #8]
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	4433      	add	r3, r6
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	2000      	movs	r0, #0
 8004b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b44:	462a      	mov	r2, r5
 8004b46:	f000 fac9 	bl	80050dc <_realloc_r>
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d1e0      	bne.n	8004b12 <__ssputs_r+0x5a>
 8004b50:	6921      	ldr	r1, [r4, #16]
 8004b52:	4650      	mov	r0, sl
 8004b54:	f7ff feb8 	bl	80048c8 <_free_r>
 8004b58:	230c      	movs	r3, #12
 8004b5a:	f8ca 3000 	str.w	r3, [sl]
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b64:	81a3      	strh	r3, [r4, #12]
 8004b66:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6a:	e7e9      	b.n	8004b40 <__ssputs_r+0x88>

08004b6c <_svfiprintf_r>:
 8004b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b70:	4698      	mov	r8, r3
 8004b72:	898b      	ldrh	r3, [r1, #12]
 8004b74:	061b      	lsls	r3, r3, #24
 8004b76:	b09d      	sub	sp, #116	; 0x74
 8004b78:	4607      	mov	r7, r0
 8004b7a:	460d      	mov	r5, r1
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	d50e      	bpl.n	8004b9e <_svfiprintf_r+0x32>
 8004b80:	690b      	ldr	r3, [r1, #16]
 8004b82:	b963      	cbnz	r3, 8004b9e <_svfiprintf_r+0x32>
 8004b84:	2140      	movs	r1, #64	; 0x40
 8004b86:	f7ff ff0b 	bl	80049a0 <_malloc_r>
 8004b8a:	6028      	str	r0, [r5, #0]
 8004b8c:	6128      	str	r0, [r5, #16]
 8004b8e:	b920      	cbnz	r0, 8004b9a <_svfiprintf_r+0x2e>
 8004b90:	230c      	movs	r3, #12
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	f04f 30ff 	mov.w	r0, #4294967295
 8004b98:	e0d0      	b.n	8004d3c <_svfiprintf_r+0x1d0>
 8004b9a:	2340      	movs	r3, #64	; 0x40
 8004b9c:	616b      	str	r3, [r5, #20]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ba2:	2320      	movs	r3, #32
 8004ba4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ba8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bac:	2330      	movs	r3, #48	; 0x30
 8004bae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d54 <_svfiprintf_r+0x1e8>
 8004bb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bb6:	f04f 0901 	mov.w	r9, #1
 8004bba:	4623      	mov	r3, r4
 8004bbc:	469a      	mov	sl, r3
 8004bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bc2:	b10a      	cbz	r2, 8004bc8 <_svfiprintf_r+0x5c>
 8004bc4:	2a25      	cmp	r2, #37	; 0x25
 8004bc6:	d1f9      	bne.n	8004bbc <_svfiprintf_r+0x50>
 8004bc8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bcc:	d00b      	beq.n	8004be6 <_svfiprintf_r+0x7a>
 8004bce:	465b      	mov	r3, fp
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	f7ff ff6f 	bl	8004ab8 <__ssputs_r>
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f000 80a9 	beq.w	8004d32 <_svfiprintf_r+0x1c6>
 8004be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004be2:	445a      	add	r2, fp
 8004be4:	9209      	str	r2, [sp, #36]	; 0x24
 8004be6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 80a1 	beq.w	8004d32 <_svfiprintf_r+0x1c6>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bfa:	f10a 0a01 	add.w	sl, sl, #1
 8004bfe:	9304      	str	r3, [sp, #16]
 8004c00:	9307      	str	r3, [sp, #28]
 8004c02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c06:	931a      	str	r3, [sp, #104]	; 0x68
 8004c08:	4654      	mov	r4, sl
 8004c0a:	2205      	movs	r2, #5
 8004c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c10:	4850      	ldr	r0, [pc, #320]	; (8004d54 <_svfiprintf_r+0x1e8>)
 8004c12:	f7fb fab5 	bl	8000180 <memchr>
 8004c16:	9a04      	ldr	r2, [sp, #16]
 8004c18:	b9d8      	cbnz	r0, 8004c52 <_svfiprintf_r+0xe6>
 8004c1a:	06d0      	lsls	r0, r2, #27
 8004c1c:	bf44      	itt	mi
 8004c1e:	2320      	movmi	r3, #32
 8004c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c24:	0711      	lsls	r1, r2, #28
 8004c26:	bf44      	itt	mi
 8004c28:	232b      	movmi	r3, #43	; 0x2b
 8004c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c32:	2b2a      	cmp	r3, #42	; 0x2a
 8004c34:	d015      	beq.n	8004c62 <_svfiprintf_r+0xf6>
 8004c36:	9a07      	ldr	r2, [sp, #28]
 8004c38:	4654      	mov	r4, sl
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	f04f 0c0a 	mov.w	ip, #10
 8004c40:	4621      	mov	r1, r4
 8004c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c46:	3b30      	subs	r3, #48	; 0x30
 8004c48:	2b09      	cmp	r3, #9
 8004c4a:	d94d      	bls.n	8004ce8 <_svfiprintf_r+0x17c>
 8004c4c:	b1b0      	cbz	r0, 8004c7c <_svfiprintf_r+0x110>
 8004c4e:	9207      	str	r2, [sp, #28]
 8004c50:	e014      	b.n	8004c7c <_svfiprintf_r+0x110>
 8004c52:	eba0 0308 	sub.w	r3, r0, r8
 8004c56:	fa09 f303 	lsl.w	r3, r9, r3
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	9304      	str	r3, [sp, #16]
 8004c5e:	46a2      	mov	sl, r4
 8004c60:	e7d2      	b.n	8004c08 <_svfiprintf_r+0x9c>
 8004c62:	9b03      	ldr	r3, [sp, #12]
 8004c64:	1d19      	adds	r1, r3, #4
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	9103      	str	r1, [sp, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bfbb      	ittet	lt
 8004c6e:	425b      	neglt	r3, r3
 8004c70:	f042 0202 	orrlt.w	r2, r2, #2
 8004c74:	9307      	strge	r3, [sp, #28]
 8004c76:	9307      	strlt	r3, [sp, #28]
 8004c78:	bfb8      	it	lt
 8004c7a:	9204      	strlt	r2, [sp, #16]
 8004c7c:	7823      	ldrb	r3, [r4, #0]
 8004c7e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c80:	d10c      	bne.n	8004c9c <_svfiprintf_r+0x130>
 8004c82:	7863      	ldrb	r3, [r4, #1]
 8004c84:	2b2a      	cmp	r3, #42	; 0x2a
 8004c86:	d134      	bne.n	8004cf2 <_svfiprintf_r+0x186>
 8004c88:	9b03      	ldr	r3, [sp, #12]
 8004c8a:	1d1a      	adds	r2, r3, #4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	9203      	str	r2, [sp, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bfb8      	it	lt
 8004c94:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c98:	3402      	adds	r4, #2
 8004c9a:	9305      	str	r3, [sp, #20]
 8004c9c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004d64 <_svfiprintf_r+0x1f8>
 8004ca0:	7821      	ldrb	r1, [r4, #0]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	4650      	mov	r0, sl
 8004ca6:	f7fb fa6b 	bl	8000180 <memchr>
 8004caa:	b138      	cbz	r0, 8004cbc <_svfiprintf_r+0x150>
 8004cac:	9b04      	ldr	r3, [sp, #16]
 8004cae:	eba0 000a 	sub.w	r0, r0, sl
 8004cb2:	2240      	movs	r2, #64	; 0x40
 8004cb4:	4082      	lsls	r2, r0
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	3401      	adds	r4, #1
 8004cba:	9304      	str	r3, [sp, #16]
 8004cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc0:	4825      	ldr	r0, [pc, #148]	; (8004d58 <_svfiprintf_r+0x1ec>)
 8004cc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cc6:	2206      	movs	r2, #6
 8004cc8:	f7fb fa5a 	bl	8000180 <memchr>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d038      	beq.n	8004d42 <_svfiprintf_r+0x1d6>
 8004cd0:	4b22      	ldr	r3, [pc, #136]	; (8004d5c <_svfiprintf_r+0x1f0>)
 8004cd2:	bb1b      	cbnz	r3, 8004d1c <_svfiprintf_r+0x1b0>
 8004cd4:	9b03      	ldr	r3, [sp, #12]
 8004cd6:	3307      	adds	r3, #7
 8004cd8:	f023 0307 	bic.w	r3, r3, #7
 8004cdc:	3308      	adds	r3, #8
 8004cde:	9303      	str	r3, [sp, #12]
 8004ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce2:	4433      	add	r3, r6
 8004ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce6:	e768      	b.n	8004bba <_svfiprintf_r+0x4e>
 8004ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cec:	460c      	mov	r4, r1
 8004cee:	2001      	movs	r0, #1
 8004cf0:	e7a6      	b.n	8004c40 <_svfiprintf_r+0xd4>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	3401      	adds	r4, #1
 8004cf6:	9305      	str	r3, [sp, #20]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f04f 0c0a 	mov.w	ip, #10
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d04:	3a30      	subs	r2, #48	; 0x30
 8004d06:	2a09      	cmp	r2, #9
 8004d08:	d903      	bls.n	8004d12 <_svfiprintf_r+0x1a6>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0c6      	beq.n	8004c9c <_svfiprintf_r+0x130>
 8004d0e:	9105      	str	r1, [sp, #20]
 8004d10:	e7c4      	b.n	8004c9c <_svfiprintf_r+0x130>
 8004d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d16:	4604      	mov	r4, r0
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e7f0      	b.n	8004cfe <_svfiprintf_r+0x192>
 8004d1c:	ab03      	add	r3, sp, #12
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	462a      	mov	r2, r5
 8004d22:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <_svfiprintf_r+0x1f4>)
 8004d24:	a904      	add	r1, sp, #16
 8004d26:	4638      	mov	r0, r7
 8004d28:	f3af 8000 	nop.w
 8004d2c:	1c42      	adds	r2, r0, #1
 8004d2e:	4606      	mov	r6, r0
 8004d30:	d1d6      	bne.n	8004ce0 <_svfiprintf_r+0x174>
 8004d32:	89ab      	ldrh	r3, [r5, #12]
 8004d34:	065b      	lsls	r3, r3, #25
 8004d36:	f53f af2d 	bmi.w	8004b94 <_svfiprintf_r+0x28>
 8004d3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d3c:	b01d      	add	sp, #116	; 0x74
 8004d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d42:	ab03      	add	r3, sp, #12
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	462a      	mov	r2, r5
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <_svfiprintf_r+0x1f4>)
 8004d4a:	a904      	add	r1, sp, #16
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	f000 f879 	bl	8004e44 <_printf_i>
 8004d52:	e7eb      	b.n	8004d2c <_svfiprintf_r+0x1c0>
 8004d54:	080087fc 	.word	0x080087fc
 8004d58:	08008806 	.word	0x08008806
 8004d5c:	00000000 	.word	0x00000000
 8004d60:	08004ab9 	.word	0x08004ab9
 8004d64:	08008802 	.word	0x08008802

08004d68 <_printf_common>:
 8004d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	4699      	mov	r9, r3
 8004d70:	688a      	ldr	r2, [r1, #8]
 8004d72:	690b      	ldr	r3, [r1, #16]
 8004d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	bfb8      	it	lt
 8004d7c:	4613      	movlt	r3, r2
 8004d7e:	6033      	str	r3, [r6, #0]
 8004d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d84:	4607      	mov	r7, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	b10a      	cbz	r2, 8004d8e <_printf_common+0x26>
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	6033      	str	r3, [r6, #0]
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	0699      	lsls	r1, r3, #26
 8004d92:	bf42      	ittt	mi
 8004d94:	6833      	ldrmi	r3, [r6, #0]
 8004d96:	3302      	addmi	r3, #2
 8004d98:	6033      	strmi	r3, [r6, #0]
 8004d9a:	6825      	ldr	r5, [r4, #0]
 8004d9c:	f015 0506 	ands.w	r5, r5, #6
 8004da0:	d106      	bne.n	8004db0 <_printf_common+0x48>
 8004da2:	f104 0a19 	add.w	sl, r4, #25
 8004da6:	68e3      	ldr	r3, [r4, #12]
 8004da8:	6832      	ldr	r2, [r6, #0]
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	42ab      	cmp	r3, r5
 8004dae:	dc26      	bgt.n	8004dfe <_printf_common+0x96>
 8004db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004db4:	1e13      	subs	r3, r2, #0
 8004db6:	6822      	ldr	r2, [r4, #0]
 8004db8:	bf18      	it	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	0692      	lsls	r2, r2, #26
 8004dbe:	d42b      	bmi.n	8004e18 <_printf_common+0xb0>
 8004dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	47c0      	blx	r8
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d01e      	beq.n	8004e0c <_printf_common+0xa4>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	6922      	ldr	r2, [r4, #16]
 8004dd2:	f003 0306 	and.w	r3, r3, #6
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	bf02      	ittt	eq
 8004dda:	68e5      	ldreq	r5, [r4, #12]
 8004ddc:	6833      	ldreq	r3, [r6, #0]
 8004dde:	1aed      	subeq	r5, r5, r3
 8004de0:	68a3      	ldr	r3, [r4, #8]
 8004de2:	bf0c      	ite	eq
 8004de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de8:	2500      	movne	r5, #0
 8004dea:	4293      	cmp	r3, r2
 8004dec:	bfc4      	itt	gt
 8004dee:	1a9b      	subgt	r3, r3, r2
 8004df0:	18ed      	addgt	r5, r5, r3
 8004df2:	2600      	movs	r6, #0
 8004df4:	341a      	adds	r4, #26
 8004df6:	42b5      	cmp	r5, r6
 8004df8:	d11a      	bne.n	8004e30 <_printf_common+0xc8>
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	e008      	b.n	8004e10 <_printf_common+0xa8>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4652      	mov	r2, sl
 8004e02:	4649      	mov	r1, r9
 8004e04:	4638      	mov	r0, r7
 8004e06:	47c0      	blx	r8
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d103      	bne.n	8004e14 <_printf_common+0xac>
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e14:	3501      	adds	r5, #1
 8004e16:	e7c6      	b.n	8004da6 <_printf_common+0x3e>
 8004e18:	18e1      	adds	r1, r4, r3
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	2030      	movs	r0, #48	; 0x30
 8004e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e22:	4422      	add	r2, r4
 8004e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	e7c7      	b.n	8004dc0 <_printf_common+0x58>
 8004e30:	2301      	movs	r3, #1
 8004e32:	4622      	mov	r2, r4
 8004e34:	4649      	mov	r1, r9
 8004e36:	4638      	mov	r0, r7
 8004e38:	47c0      	blx	r8
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d0e6      	beq.n	8004e0c <_printf_common+0xa4>
 8004e3e:	3601      	adds	r6, #1
 8004e40:	e7d9      	b.n	8004df6 <_printf_common+0x8e>
	...

08004e44 <_printf_i>:
 8004e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	7e0f      	ldrb	r7, [r1, #24]
 8004e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e4c:	2f78      	cmp	r7, #120	; 0x78
 8004e4e:	4691      	mov	r9, r2
 8004e50:	4680      	mov	r8, r0
 8004e52:	460c      	mov	r4, r1
 8004e54:	469a      	mov	sl, r3
 8004e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e5a:	d807      	bhi.n	8004e6c <_printf_i+0x28>
 8004e5c:	2f62      	cmp	r7, #98	; 0x62
 8004e5e:	d80a      	bhi.n	8004e76 <_printf_i+0x32>
 8004e60:	2f00      	cmp	r7, #0
 8004e62:	f000 80d4 	beq.w	800500e <_printf_i+0x1ca>
 8004e66:	2f58      	cmp	r7, #88	; 0x58
 8004e68:	f000 80c0 	beq.w	8004fec <_printf_i+0x1a8>
 8004e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e74:	e03a      	b.n	8004eec <_printf_i+0xa8>
 8004e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e7a:	2b15      	cmp	r3, #21
 8004e7c:	d8f6      	bhi.n	8004e6c <_printf_i+0x28>
 8004e7e:	a101      	add	r1, pc, #4	; (adr r1, 8004e84 <_printf_i+0x40>)
 8004e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e84:	08004edd 	.word	0x08004edd
 8004e88:	08004ef1 	.word	0x08004ef1
 8004e8c:	08004e6d 	.word	0x08004e6d
 8004e90:	08004e6d 	.word	0x08004e6d
 8004e94:	08004e6d 	.word	0x08004e6d
 8004e98:	08004e6d 	.word	0x08004e6d
 8004e9c:	08004ef1 	.word	0x08004ef1
 8004ea0:	08004e6d 	.word	0x08004e6d
 8004ea4:	08004e6d 	.word	0x08004e6d
 8004ea8:	08004e6d 	.word	0x08004e6d
 8004eac:	08004e6d 	.word	0x08004e6d
 8004eb0:	08004ff5 	.word	0x08004ff5
 8004eb4:	08004f1d 	.word	0x08004f1d
 8004eb8:	08004faf 	.word	0x08004faf
 8004ebc:	08004e6d 	.word	0x08004e6d
 8004ec0:	08004e6d 	.word	0x08004e6d
 8004ec4:	08005017 	.word	0x08005017
 8004ec8:	08004e6d 	.word	0x08004e6d
 8004ecc:	08004f1d 	.word	0x08004f1d
 8004ed0:	08004e6d 	.word	0x08004e6d
 8004ed4:	08004e6d 	.word	0x08004e6d
 8004ed8:	08004fb7 	.word	0x08004fb7
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	1d1a      	adds	r2, r3, #4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	602a      	str	r2, [r5, #0]
 8004ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eec:	2301      	movs	r3, #1
 8004eee:	e09f      	b.n	8005030 <_printf_i+0x1ec>
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	682b      	ldr	r3, [r5, #0]
 8004ef4:	0607      	lsls	r7, r0, #24
 8004ef6:	f103 0104 	add.w	r1, r3, #4
 8004efa:	6029      	str	r1, [r5, #0]
 8004efc:	d501      	bpl.n	8004f02 <_printf_i+0xbe>
 8004efe:	681e      	ldr	r6, [r3, #0]
 8004f00:	e003      	b.n	8004f0a <_printf_i+0xc6>
 8004f02:	0646      	lsls	r6, r0, #25
 8004f04:	d5fb      	bpl.n	8004efe <_printf_i+0xba>
 8004f06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f0a:	2e00      	cmp	r6, #0
 8004f0c:	da03      	bge.n	8004f16 <_printf_i+0xd2>
 8004f0e:	232d      	movs	r3, #45	; 0x2d
 8004f10:	4276      	negs	r6, r6
 8004f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f16:	485a      	ldr	r0, [pc, #360]	; (8005080 <_printf_i+0x23c>)
 8004f18:	230a      	movs	r3, #10
 8004f1a:	e012      	b.n	8004f42 <_printf_i+0xfe>
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	6820      	ldr	r0, [r4, #0]
 8004f20:	1d19      	adds	r1, r3, #4
 8004f22:	6029      	str	r1, [r5, #0]
 8004f24:	0605      	lsls	r5, r0, #24
 8004f26:	d501      	bpl.n	8004f2c <_printf_i+0xe8>
 8004f28:	681e      	ldr	r6, [r3, #0]
 8004f2a:	e002      	b.n	8004f32 <_printf_i+0xee>
 8004f2c:	0641      	lsls	r1, r0, #25
 8004f2e:	d5fb      	bpl.n	8004f28 <_printf_i+0xe4>
 8004f30:	881e      	ldrh	r6, [r3, #0]
 8004f32:	4853      	ldr	r0, [pc, #332]	; (8005080 <_printf_i+0x23c>)
 8004f34:	2f6f      	cmp	r7, #111	; 0x6f
 8004f36:	bf0c      	ite	eq
 8004f38:	2308      	moveq	r3, #8
 8004f3a:	230a      	movne	r3, #10
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f42:	6865      	ldr	r5, [r4, #4]
 8004f44:	60a5      	str	r5, [r4, #8]
 8004f46:	2d00      	cmp	r5, #0
 8004f48:	bfa2      	ittt	ge
 8004f4a:	6821      	ldrge	r1, [r4, #0]
 8004f4c:	f021 0104 	bicge.w	r1, r1, #4
 8004f50:	6021      	strge	r1, [r4, #0]
 8004f52:	b90e      	cbnz	r6, 8004f58 <_printf_i+0x114>
 8004f54:	2d00      	cmp	r5, #0
 8004f56:	d04b      	beq.n	8004ff0 <_printf_i+0x1ac>
 8004f58:	4615      	mov	r5, r2
 8004f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f62:	5dc7      	ldrb	r7, [r0, r7]
 8004f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f68:	4637      	mov	r7, r6
 8004f6a:	42bb      	cmp	r3, r7
 8004f6c:	460e      	mov	r6, r1
 8004f6e:	d9f4      	bls.n	8004f5a <_printf_i+0x116>
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d10b      	bne.n	8004f8c <_printf_i+0x148>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	07de      	lsls	r6, r3, #31
 8004f78:	d508      	bpl.n	8004f8c <_printf_i+0x148>
 8004f7a:	6923      	ldr	r3, [r4, #16]
 8004f7c:	6861      	ldr	r1, [r4, #4]
 8004f7e:	4299      	cmp	r1, r3
 8004f80:	bfde      	ittt	le
 8004f82:	2330      	movle	r3, #48	; 0x30
 8004f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f8c:	1b52      	subs	r2, r2, r5
 8004f8e:	6122      	str	r2, [r4, #16]
 8004f90:	f8cd a000 	str.w	sl, [sp]
 8004f94:	464b      	mov	r3, r9
 8004f96:	aa03      	add	r2, sp, #12
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	f7ff fee4 	bl	8004d68 <_printf_common>
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d14a      	bne.n	800503a <_printf_i+0x1f6>
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa8:	b004      	add	sp, #16
 8004faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	f043 0320 	orr.w	r3, r3, #32
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	4833      	ldr	r0, [pc, #204]	; (8005084 <_printf_i+0x240>)
 8004fb8:	2778      	movs	r7, #120	; 0x78
 8004fba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	6829      	ldr	r1, [r5, #0]
 8004fc2:	061f      	lsls	r7, r3, #24
 8004fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fc8:	d402      	bmi.n	8004fd0 <_printf_i+0x18c>
 8004fca:	065f      	lsls	r7, r3, #25
 8004fcc:	bf48      	it	mi
 8004fce:	b2b6      	uxthmi	r6, r6
 8004fd0:	07df      	lsls	r7, r3, #31
 8004fd2:	bf48      	it	mi
 8004fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8004fd8:	6029      	str	r1, [r5, #0]
 8004fda:	bf48      	it	mi
 8004fdc:	6023      	strmi	r3, [r4, #0]
 8004fde:	b91e      	cbnz	r6, 8004fe8 <_printf_i+0x1a4>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	f023 0320 	bic.w	r3, r3, #32
 8004fe6:	6023      	str	r3, [r4, #0]
 8004fe8:	2310      	movs	r3, #16
 8004fea:	e7a7      	b.n	8004f3c <_printf_i+0xf8>
 8004fec:	4824      	ldr	r0, [pc, #144]	; (8005080 <_printf_i+0x23c>)
 8004fee:	e7e4      	b.n	8004fba <_printf_i+0x176>
 8004ff0:	4615      	mov	r5, r2
 8004ff2:	e7bd      	b.n	8004f70 <_printf_i+0x12c>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	6826      	ldr	r6, [r4, #0]
 8004ff8:	6961      	ldr	r1, [r4, #20]
 8004ffa:	1d18      	adds	r0, r3, #4
 8004ffc:	6028      	str	r0, [r5, #0]
 8004ffe:	0635      	lsls	r5, r6, #24
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	d501      	bpl.n	8005008 <_printf_i+0x1c4>
 8005004:	6019      	str	r1, [r3, #0]
 8005006:	e002      	b.n	800500e <_printf_i+0x1ca>
 8005008:	0670      	lsls	r0, r6, #25
 800500a:	d5fb      	bpl.n	8005004 <_printf_i+0x1c0>
 800500c:	8019      	strh	r1, [r3, #0]
 800500e:	2300      	movs	r3, #0
 8005010:	6123      	str	r3, [r4, #16]
 8005012:	4615      	mov	r5, r2
 8005014:	e7bc      	b.n	8004f90 <_printf_i+0x14c>
 8005016:	682b      	ldr	r3, [r5, #0]
 8005018:	1d1a      	adds	r2, r3, #4
 800501a:	602a      	str	r2, [r5, #0]
 800501c:	681d      	ldr	r5, [r3, #0]
 800501e:	6862      	ldr	r2, [r4, #4]
 8005020:	2100      	movs	r1, #0
 8005022:	4628      	mov	r0, r5
 8005024:	f7fb f8ac 	bl	8000180 <memchr>
 8005028:	b108      	cbz	r0, 800502e <_printf_i+0x1ea>
 800502a:	1b40      	subs	r0, r0, r5
 800502c:	6060      	str	r0, [r4, #4]
 800502e:	6863      	ldr	r3, [r4, #4]
 8005030:	6123      	str	r3, [r4, #16]
 8005032:	2300      	movs	r3, #0
 8005034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005038:	e7aa      	b.n	8004f90 <_printf_i+0x14c>
 800503a:	6923      	ldr	r3, [r4, #16]
 800503c:	462a      	mov	r2, r5
 800503e:	4649      	mov	r1, r9
 8005040:	4640      	mov	r0, r8
 8005042:	47d0      	blx	sl
 8005044:	3001      	adds	r0, #1
 8005046:	d0ad      	beq.n	8004fa4 <_printf_i+0x160>
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	079b      	lsls	r3, r3, #30
 800504c:	d413      	bmi.n	8005076 <_printf_i+0x232>
 800504e:	68e0      	ldr	r0, [r4, #12]
 8005050:	9b03      	ldr	r3, [sp, #12]
 8005052:	4298      	cmp	r0, r3
 8005054:	bfb8      	it	lt
 8005056:	4618      	movlt	r0, r3
 8005058:	e7a6      	b.n	8004fa8 <_printf_i+0x164>
 800505a:	2301      	movs	r3, #1
 800505c:	4632      	mov	r2, r6
 800505e:	4649      	mov	r1, r9
 8005060:	4640      	mov	r0, r8
 8005062:	47d0      	blx	sl
 8005064:	3001      	adds	r0, #1
 8005066:	d09d      	beq.n	8004fa4 <_printf_i+0x160>
 8005068:	3501      	adds	r5, #1
 800506a:	68e3      	ldr	r3, [r4, #12]
 800506c:	9903      	ldr	r1, [sp, #12]
 800506e:	1a5b      	subs	r3, r3, r1
 8005070:	42ab      	cmp	r3, r5
 8005072:	dcf2      	bgt.n	800505a <_printf_i+0x216>
 8005074:	e7eb      	b.n	800504e <_printf_i+0x20a>
 8005076:	2500      	movs	r5, #0
 8005078:	f104 0619 	add.w	r6, r4, #25
 800507c:	e7f5      	b.n	800506a <_printf_i+0x226>
 800507e:	bf00      	nop
 8005080:	0800880d 	.word	0x0800880d
 8005084:	0800881e 	.word	0x0800881e

08005088 <memmove>:
 8005088:	4288      	cmp	r0, r1
 800508a:	b510      	push	{r4, lr}
 800508c:	eb01 0402 	add.w	r4, r1, r2
 8005090:	d902      	bls.n	8005098 <memmove+0x10>
 8005092:	4284      	cmp	r4, r0
 8005094:	4623      	mov	r3, r4
 8005096:	d807      	bhi.n	80050a8 <memmove+0x20>
 8005098:	1e43      	subs	r3, r0, #1
 800509a:	42a1      	cmp	r1, r4
 800509c:	d008      	beq.n	80050b0 <memmove+0x28>
 800509e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050a6:	e7f8      	b.n	800509a <memmove+0x12>
 80050a8:	4402      	add	r2, r0
 80050aa:	4601      	mov	r1, r0
 80050ac:	428a      	cmp	r2, r1
 80050ae:	d100      	bne.n	80050b2 <memmove+0x2a>
 80050b0:	bd10      	pop	{r4, pc}
 80050b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050ba:	e7f7      	b.n	80050ac <memmove+0x24>

080050bc <_sbrk_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4d06      	ldr	r5, [pc, #24]	; (80050d8 <_sbrk_r+0x1c>)
 80050c0:	2300      	movs	r3, #0
 80050c2:	4604      	mov	r4, r0
 80050c4:	4608      	mov	r0, r1
 80050c6:	602b      	str	r3, [r5, #0]
 80050c8:	f7fb ff7a 	bl	8000fc0 <_sbrk>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_sbrk_r+0x1a>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_sbrk_r+0x1a>
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	2000413c 	.word	0x2000413c

080050dc <_realloc_r>:
 80050dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e0:	4680      	mov	r8, r0
 80050e2:	4614      	mov	r4, r2
 80050e4:	460e      	mov	r6, r1
 80050e6:	b921      	cbnz	r1, 80050f2 <_realloc_r+0x16>
 80050e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ec:	4611      	mov	r1, r2
 80050ee:	f7ff bc57 	b.w	80049a0 <_malloc_r>
 80050f2:	b92a      	cbnz	r2, 8005100 <_realloc_r+0x24>
 80050f4:	f7ff fbe8 	bl	80048c8 <_free_r>
 80050f8:	4625      	mov	r5, r4
 80050fa:	4628      	mov	r0, r5
 80050fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005100:	f000 f81b 	bl	800513a <_malloc_usable_size_r>
 8005104:	4284      	cmp	r4, r0
 8005106:	4607      	mov	r7, r0
 8005108:	d802      	bhi.n	8005110 <_realloc_r+0x34>
 800510a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800510e:	d812      	bhi.n	8005136 <_realloc_r+0x5a>
 8005110:	4621      	mov	r1, r4
 8005112:	4640      	mov	r0, r8
 8005114:	f7ff fc44 	bl	80049a0 <_malloc_r>
 8005118:	4605      	mov	r5, r0
 800511a:	2800      	cmp	r0, #0
 800511c:	d0ed      	beq.n	80050fa <_realloc_r+0x1e>
 800511e:	42bc      	cmp	r4, r7
 8005120:	4622      	mov	r2, r4
 8005122:	4631      	mov	r1, r6
 8005124:	bf28      	it	cs
 8005126:	463a      	movcs	r2, r7
 8005128:	f7ff fbc0 	bl	80048ac <memcpy>
 800512c:	4631      	mov	r1, r6
 800512e:	4640      	mov	r0, r8
 8005130:	f7ff fbca 	bl	80048c8 <_free_r>
 8005134:	e7e1      	b.n	80050fa <_realloc_r+0x1e>
 8005136:	4635      	mov	r5, r6
 8005138:	e7df      	b.n	80050fa <_realloc_r+0x1e>

0800513a <_malloc_usable_size_r>:
 800513a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800513e:	1f18      	subs	r0, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	bfbc      	itt	lt
 8005144:	580b      	ldrlt	r3, [r1, r0]
 8005146:	18c0      	addlt	r0, r0, r3
 8005148:	4770      	bx	lr
	...

0800514c <_init>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	bf00      	nop
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr

08005158 <_fini>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	bf00      	nop
 800515c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515e:	bc08      	pop	{r3}
 8005160:	469e      	mov	lr, r3
 8005162:	4770      	bx	lr
