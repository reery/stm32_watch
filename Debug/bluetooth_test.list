
bluetooth_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036c4  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080095f4  080095f4  000195f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080095fc  080095fc  000195fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009600  08009600  00019600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000008  08009604  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003fc8  200001e4  080097e0  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200041ac  080097e0  000241ac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001b5f4  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003743  00000000  00000000  0003b84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001b18  00000000  00000000  0003ef90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000014c4  00000000  00000000  00040aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00023ec5  00000000  00000000  00041f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019f01  00000000  00000000  00065e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e5678  00000000  00000000  0007fd32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007844  00000000  00000000  001653ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  0016cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	08005f18 	.word	0x08005f18

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	08005f18 	.word	0x08005f18

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800052c:	f023 0218 	bic.w	r2, r3, #24
 8000530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4313      	orrs	r3, r2
 8000538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4013      	ands	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056c:	68fb      	ldr	r3, [r7, #12]
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <HAL_RTCEx_WakeUpTimerEventCallback>:
		updateDisplay(140, 188);
	}
}*/

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
    // Actions to be taken every second
	BLUE_LED_ON();
 8000584:	2201      	movs	r2, #1
 8000586:	2120      	movs	r1, #32
 8000588:	480c      	ldr	r0, [pc, #48]	; (80005bc <HAL_RTCEx_WakeUpTimerEventCallback+0x40>)
 800058a:	f001 fa67 	bl	8001a5c <HAL_GPIO_WritePin>
	uptime++;
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	3301      	adds	r3, #1
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>)
 8000596:	6013      	str	r3, [r2, #0]
	numToString(30, 140, uptime, "lu", 1);
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	2301      	movs	r3, #1
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>)
 80005a4:	218c      	movs	r1, #140	; 0x8c
 80005a6:	201e      	movs	r0, #30
 80005a8:	f000 fc2e 	bl	8000e08 <numToString>
	updateDisplay(140, 188);
 80005ac:	21bc      	movs	r1, #188	; 0xbc
 80005ae:	208c      	movs	r0, #140	; 0x8c
 80005b0:	f000 fb0a 	bl	8000bc8 <updateDisplay>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	48000400 	.word	0x48000400
 80005c0:	20000630 	.word	0x20000630
 80005c4:	08005f30 	.word	0x08005f30

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b090      	sub	sp, #64	; 0x40
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 ff1b 	bl	8001408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f837 	bl	8000644 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005d6:	f000 f8ad 	bl	8000734 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 fa1f 	bl	8000a1c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005de:	f000 f9a7 	bl	8000930 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80005e2:	f000 f9f3 	bl	80009cc <MX_USB_PCD_Init>
  MX_SPI1_Init();
 80005e6:	f000 f965 	bl	80008b4 <MX_SPI1_Init>
  MX_LPTIM1_Init();
 80005ea:	f000 f8cd 	bl	8000788 <MX_LPTIM1_Init>
  MX_RTC_Init();
 80005ee:	f000 f8f9 	bl	80007e4 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005f2:	f000 f8bc 	bl	800076e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  init_display();
 80005f6:	f000 fa93 	bl	8000b20 <init_display>
  initDisplayBuffer();
 80005fa:	f000 fc41 	bl	8000e80 <initDisplayBuffer>
  clearDisplay();
 80005fe:	f000 fa71 	bl	8000ae4 <clearDisplay>

  uint32_t startTime = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	63fb      	str	r3, [r7, #60]	; 0x3c
  const uint32_t lptimReset = 1024;
 8000606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  startTime = HAL_GetTick();
 800060c:	f000 ff6a 	bl	80014e4 <HAL_GetTick>
 8000610:	63f8      	str	r0, [r7, #60]	; 0x3c
  char str[12];
  uint32_t startTime1 = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	637b      	str	r3, [r7, #52]	; 0x34
  char str1[12];
  char str2[12];
  int vcom_bit = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t counterValue = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int counter = 1024;
 800061e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GREEN_LED_ON();
 8000624:	2201      	movs	r2, #1
 8000626:	2101      	movs	r1, #1
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <main+0x78>)
 800062a:	f001 fa17 	bl	8001a5c <HAL_GPIO_WritePin>
	  BLUE_LED_OFF();
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <main+0x78>)
 8000634:	f001 fa12 	bl	8001a5c <HAL_GPIO_WritePin>
	  //HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
	  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000638:	2001      	movs	r0, #1
 800063a:	f001 fcc1 	bl	8001fc0 <HAL_PWREx_EnterSTOP2Mode>
	  GREEN_LED_ON();
 800063e:	e7f1      	b.n	8000624 <main+0x5c>
 8000640:	48000400 	.word	0x48000400

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b09a      	sub	sp, #104	; 0x68
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2248      	movs	r2, #72	; 0x48
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 ffdc 	bl	8005610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
 8000666:	615a      	str	r2, [r3, #20]
 8000668:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800066a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000678:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800067a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	f023 0303 	bic.w	r3, r3, #3
 8000684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068e:	f001 fc79 	bl	8001f84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff ff42 	bl	800051c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <SystemClock_Config+0xec>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006a0:	4a23      	ldr	r2, [pc, #140]	; (8000730 <SystemClock_Config+0xec>)
 80006a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <SystemClock_Config+0xec>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80006b4:	232f      	movs	r3, #47	; 0x2f
 80006b6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006be:	2301      	movs	r3, #1
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006d0:	2300      	movs	r3, #0
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d4:	2360      	movs	r3, #96	; 0x60
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006d8:	2305      	movs	r3, #5
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006dc:	2300      	movs	r3, #0
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f80d 	bl	8002704 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006f0:	f000 f9f2 	bl	8000ad8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006f4:	236f      	movs	r3, #111	; 0x6f
 80006f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2101      	movs	r1, #1
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fb69 	bl	8002dec <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000720:	f000 f9da 	bl	8000ad8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000724:	f003 f924 	bl	8003970 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000728:	bf00      	nop
 800072a:	3768      	adds	r7, #104	; 0x68
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	58000400 	.word	0x58000400

08000734 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	; 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2250      	movs	r2, #80	; 0x50
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f004 ff65 	bl	8005610 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000750:	2300      	movs	r3, #0
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	4618      	mov	r0, r3
 8000758:	f002 ff94 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000762:	f000 f9b9 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* LPTIM1_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(LPTIM1_IRQn);

  HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	2003      	movs	r0, #3
 8000778:	f000 ffcb 	bl	8001712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800077c:	2003      	movs	r0, #3
 800077e:	f000 ffe2 	bl	8001746 <HAL_NVIC_EnableIRQ>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_LPTIM1_Init+0x54>)
 800078e:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <MX_LPTIM1_Init+0x58>)
 8000790:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_LPTIM1_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_LPTIM1_Init+0x54>)
 800079a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800079e:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_LPTIM1_Init+0x54>)
 80007a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a6:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_LPTIM1_Init+0x54>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_LPTIM1_Init+0x54>)
 80007b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_LPTIM1_Init+0x54>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_LPTIM1_Init+0x54>)
 80007be:	2200      	movs	r2, #0
 80007c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_LPTIM1_Init+0x54>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_LPTIM1_Init+0x54>)
 80007ca:	f001 f95f 	bl	8001a8c <HAL_LPTIM_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_LPTIM1_Init+0x50>
  {
    Error_Handler();
 80007d4:	f000 f980 	bl	8000ad8 <Error_Handler>
        // Starting Error
        Error_Handler();
    }*/
  /* USER CODE END LPTIM1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000200 	.word	0x20000200
 80007e0:	40007c00 	.word	0x40007c00

080007e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <MX_RTC_Init+0xc8>)
 80007fe:	4a2c      	ldr	r2, [pc, #176]	; (80008b0 <MX_RTC_Init+0xcc>)
 8000800:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <MX_RTC_Init+0xc8>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <MX_RTC_Init+0xc8>)
 800080a:	227f      	movs	r2, #127	; 0x7f
 800080c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800080e:	4b27      	ldr	r3, [pc, #156]	; (80008ac <MX_RTC_Init+0xc8>)
 8000810:	22ff      	movs	r2, #255	; 0xff
 8000812:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <MX_RTC_Init+0xc8>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800081a:	4b24      	ldr	r3, [pc, #144]	; (80008ac <MX_RTC_Init+0xc8>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <MX_RTC_Init+0xc8>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_RTC_Init+0xc8>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800082c:	481f      	ldr	r0, [pc, #124]	; (80008ac <MX_RTC_Init+0xc8>)
 800082e:	f003 f9b7 	bl	8003ba0 <HAL_RTC_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000838:	f000 f94e 	bl	8000ad8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 800083c:	2322      	movs	r3, #34	; 0x22
 800083e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x15;
 8000840:	2315      	movs	r3, #21
 8000842:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000844:	2300      	movs	r3, #0
 8000846:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2201      	movs	r2, #1
 8000858:	4619      	mov	r1, r3
 800085a:	4814      	ldr	r0, [pc, #80]	; (80008ac <MX_RTC_Init+0xc8>)
 800085c:	f003 fa50 	bl	8003d00 <HAL_RTC_SetTime>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000866:	f000 f937 	bl	8000ad8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800086a:	2303      	movs	r3, #3
 800086c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800086e:	2301      	movs	r3, #1
 8000870:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 8000872:	2331      	movs	r3, #49	; 0x31
 8000874:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8000876:	2324      	movs	r3, #36	; 0x24
 8000878:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800087a:	463b      	mov	r3, r7
 800087c:	2201      	movs	r2, #1
 800087e:	4619      	mov	r1, r3
 8000880:	480a      	ldr	r0, [pc, #40]	; (80008ac <MX_RTC_Init+0xc8>)
 8000882:	f003 fb01 	bl	8003e88 <HAL_RTC_SetDate>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 800088c:	f000 f924 	bl	8000ad8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000890:	2204      	movs	r2, #4
 8000892:	2100      	movs	r1, #0
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_RTC_Init+0xc8>)
 8000896:	f003 fc15 	bl	80040c4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 80008a0:	f000 f91a 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000238 	.word	0x20000238
 80008b0:	40002800 	.word	0x40002800

080008b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_SPI1_Init+0x74>)
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <MX_SPI1_Init+0x78>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_SPI1_Init+0x74>)
 80008c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_SPI1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_SPI1_Init+0x74>)
 80008ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_SPI1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_SPI1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_SPI1_Init+0x74>)
 80008e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_SPI1_Init+0x74>)
 80008ea:	2210      	movs	r2, #16
 80008ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_SPI1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_SPI1_Init+0x74>)
 8000902:	2207      	movs	r2, #7
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_SPI1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_SPI1_Init+0x74>)
 8000914:	f003 fcb8 	bl	8004288 <HAL_SPI_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800091e:	f000 f8db 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000025c 	.word	0x2000025c
 800092c:	40013000 	.word	0x40013000

08000930 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000936:	4a24      	ldr	r2, [pc, #144]	; (80009c8 <MX_USART1_UART_Init+0x98>)
 8000938:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800093a:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000948:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000958:	220c      	movs	r2, #12
 800095a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097a:	4812      	ldr	r0, [pc, #72]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 800097c:	f004 f820 	bl	80049c0 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000986:	f000 f8a7 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 800098e:	f004 fce7 	bl	8005360 <HAL_UARTEx_SetTxFifoThreshold>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000998:	f000 f89e 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	4809      	ldr	r0, [pc, #36]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 80009a0:	f004 fd1c 	bl	80053dc <HAL_UARTEx_SetRxFifoThreshold>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80009aa:	f000 f895 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 80009b0:	f004 fc9d 	bl	80052ee <HAL_UARTEx_DisableFifoMode>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80009ba:	f000 f88d 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200002c0 	.word	0x200002c0
 80009c8:	40013800 	.word	0x40013800

080009cc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009d2:	4a11      	ldr	r2, [pc, #68]	; (8000a18 <MX_USB_PCD_Init+0x4c>)
 80009d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009d8:	2208      	movs	r2, #8
 80009da:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009de:	2202      	movs	r2, #2
 80009e0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009e4:	2202      	movs	r2, #2
 80009e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_USB_PCD_Init+0x48>)
 8000a02:	f001 f9c6 	bl	8001d92 <HAL_PCD_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a0c:	f000 f864 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000354 	.word	0x20000354
 8000a18:	40006800 	.word	0x40006800

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a30:	2004      	movs	r0, #4
 8000a32:	f7ff fd89 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2001      	movs	r0, #1
 8000a38:	f7ff fd86 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f7ff fd83 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	2008      	movs	r0, #8
 8000a44:	f7ff fd80 	bl	8000548 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f001 f803 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2123      	movs	r1, #35	; 0x23
 8000a5a:	481c      	ldr	r0, [pc, #112]	; (8000acc <MX_GPIO_Init+0xb0>)
 8000a5c:	f000 fffe 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8000a60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f000 fe7f 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7e:	2310      	movs	r3, #16
 8000a80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <MX_GPIO_Init+0xb4>)
 8000a90:	f000 fe74 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000a94:	2323      	movs	r3, #35	; 0x23
 8000a96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <MX_GPIO_Init+0xb0>)
 8000aaa:	f000 fe67 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_GPIO_Init+0xb8>)
 8000ac0:	f000 fe5c 	bl	800177c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac4:	bf00      	nop
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	48000400 	.word	0x48000400
 8000ad0:	48000800 	.word	0x48000800
 8000ad4:	48000c00 	.word	0x48000c00

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>
	...

08000ae4 <clearDisplay>:
//uint8_t frontBuffer[DISPLAY_HEIGHT][DISPLAY_WIDTH / 8];
uint8_t backBuffer[DISPLAY_HEIGHT][DISPLAY_WIDTH / 8] __attribute__((aligned(4)));
uint8_t (*currentBuffer)[DISPLAY_WIDTH / 8] = backBuffer;
uint8_t sendToDisplayBuffer[TOTAL_DATA_SIZE];

void clearDisplay(void) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	SCS_HIGH();
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2110      	movs	r1, #16
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af0:	f000 ffb4 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &clear_command, 1, HAL_MAX_DELAY);
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295
 8000af8:	2201      	movs	r2, #1
 8000afa:	4907      	ldr	r1, [pc, #28]	; (8000b18 <clearDisplay+0x34>)
 8000afc:	4807      	ldr	r0, [pc, #28]	; (8000b1c <clearDisplay+0x38>)
 8000afe:	f003 fc66 	bl	80043ce <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, &dummy_8bit, 1, HAL_MAX_DELAY);
	SCS_LOW();
 8000b02:	2200      	movs	r2, #0
 8000b04:	2110      	movs	r1, #16
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0a:	f000 ffa7 	bl	8001a5c <HAL_GPIO_WritePin>
	toggle_vcom();
 8000b0e:	f000 f82d 	bl	8000b6c <toggle_vcom>
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000180 	.word	0x20000180
 8000b1c:	2000025c 	.word	0x2000025c

08000b20 <init_display>:

void init_display(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	// Step 1
	HAL_Delay(10);
 8000b24:	200a      	movs	r0, #10
 8000b26:	f000 fcf5 	bl	8001514 <HAL_Delay>
	DISP_LOW();
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f000 ff92 	bl	8001a5c <HAL_GPIO_WritePin>
	SCS_LOW();
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b40:	f000 ff8c 	bl	8001a5c <HAL_GPIO_WritePin>
	EXTCOMIN_LOW();
 8000b44:	2200      	movs	r2, #0
 8000b46:	2140      	movs	r1, #64	; 0x40
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4c:	f000 ff86 	bl	8001a5c <HAL_GPIO_WritePin>
	// Step 2
	clearDisplay();
 8000b50:	f7ff ffc8 	bl	8000ae4 <clearDisplay>
	HAL_Delay(50);
 8000b54:	2032      	movs	r0, #50	; 0x32
 8000b56:	f000 fcdd 	bl	8001514 <HAL_Delay>
	// Step 3
	DISP_HIGH();
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f000 ff7a 	bl	8001a5c <HAL_GPIO_WritePin>
	// Step 4
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <toggle_vcom>:

unsigned int toggle_vcom(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	SCS_HIGH();
 8000b70:	2201      	movs	r2, #1
 8000b72:	2110      	movs	r1, #16
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b78:	f000 ff70 	bl	8001a5c <HAL_GPIO_WritePin>
	vcom_bit ^= 0x40;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <toggle_vcom+0x50>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <toggle_vcom+0x50>)
 8000b88:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &vcom_bit, 1, HAL_MAX_DELAY);
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	2201      	movs	r2, #1
 8000b90:	490a      	ldr	r1, [pc, #40]	; (8000bbc <toggle_vcom+0x50>)
 8000b92:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <toggle_vcom+0x54>)
 8000b94:	f003 fc1b 	bl	80043ce <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &dummy_8bit, 1, HAL_MAX_DELAY);
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4909      	ldr	r1, [pc, #36]	; (8000bc4 <toggle_vcom+0x58>)
 8000ba0:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <toggle_vcom+0x54>)
 8000ba2:	f003 fc14 	bl	80043ce <HAL_SPI_Transmit>
	SCS_LOW();
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f000 ff55 	bl	8001a5c <HAL_GPIO_WritePin>
	return vcom_bit;
 8000bb2:	4b02      	ldr	r3, [pc, #8]	; (8000bbc <toggle_vcom+0x50>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000182 	.word	0x20000182
 8000bc0:	2000025c 	.word	0x2000025c
 8000bc4:	20000635 	.word	0x20000635

08000bc8 <updateDisplay>:

	int vcom_bit = toggle_vcom();
	return vcom_bit;
}

unsigned int updateDisplay(uint8_t y_start, uint8_t y_end) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	71bb      	strb	r3, [r7, #6]
	uint8_t* sendBufferPtr = sendToDisplayBuffer;
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <updateDisplay+0xe4>)
 8000bda:	61fb      	str	r3, [r7, #28]
	*sendBufferPtr++ = write_mode;
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	61fa      	str	r2, [r7, #28]
 8000be2:	4a33      	ldr	r2, [pc, #204]	; (8000cb0 <updateDisplay+0xe8>)
 8000be4:	7812      	ldrb	r2, [r2, #0]
 8000be6:	701a      	strb	r2, [r3, #0]

	for (uint8_t line = y_start; line <= y_end; line++) {
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	76fb      	strb	r3, [r7, #27]
 8000bec:	e027      	b.n	8000c3e <updateDisplay+0x76>
	    // Send line address inverted
	    uint8_t line_address = (uint8_t)(__RBIT((uint8_t)(line)) >> 24);
 8000bee:	7efb      	ldrb	r3, [r7, #27]
 8000bf0:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	fa93 f3a3 	rbit	r3, r3
 8000bf8:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	0e1b      	lsrs	r3, r3, #24
 8000bfe:	74fb      	strb	r3, [r7, #19]
	    *sendBufferPtr++ = line_address;
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	61fa      	str	r2, [r7, #28]
 8000c06:	7cfa      	ldrb	r2, [r7, #19]
 8000c08:	701a      	strb	r2, [r3, #0]

	    // Add pixel data from displayBuffer -> to improve this all the gfx code could modify only the bufferPtr/sendToDisplayBuffer
	    memcpy(sendBufferPtr, currentBuffer[line - 1], DISPLAY_WIDTH / 8);
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <updateDisplay+0xec>)
 8000c0c:	6819      	ldr	r1, [r3, #0]
 8000c0e:	7efa      	ldrb	r2, [r7, #27]
 8000c10:	4613      	mov	r3, r2
 8000c12:	011b      	lsls	r3, r3, #4
 8000c14:	1a9b      	subs	r3, r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	3b1e      	subs	r3, #30
 8000c1a:	440b      	add	r3, r1
 8000c1c:	221e      	movs	r2, #30
 8000c1e:	4619      	mov	r1, r3
 8000c20:	69f8      	ldr	r0, [r7, #28]
 8000c22:	f004 fd29 	bl	8005678 <memcpy>
	    sendBufferPtr += DISPLAY_WIDTH / 8;
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	331e      	adds	r3, #30
 8000c2a:	61fb      	str	r3, [r7, #28]

	    // Send 8 dummy bits after each line's pixel data
	    *sendBufferPtr++ = dummy_8bit;
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	61fa      	str	r2, [r7, #28]
 8000c32:	4a21      	ldr	r2, [pc, #132]	; (8000cb8 <updateDisplay+0xf0>)
 8000c34:	7812      	ldrb	r2, [r2, #0]
 8000c36:	701a      	strb	r2, [r3, #0]
	for (uint8_t line = y_start; line <= y_end; line++) {
 8000c38:	7efb      	ldrb	r3, [r7, #27]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	76fb      	strb	r3, [r7, #27]
 8000c3e:	7efa      	ldrb	r2, [r7, #27]
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d9d3      	bls.n	8000bee <updateDisplay+0x26>
	}
	*sendBufferPtr++ = dummy_16bit;
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	1c5a      	adds	r2, r3, #1
 8000c4a:	61fa      	str	r2, [r7, #28]
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	; (8000cbc <updateDisplay+0xf4>)
 8000c4e:	7812      	ldrb	r2, [r2, #0]
 8000c50:	701a      	strb	r2, [r3, #0]

	RED_LED_ON();
 8000c52:	2201      	movs	r2, #1
 8000c54:	2102      	movs	r1, #2
 8000c56:	481a      	ldr	r0, [pc, #104]	; (8000cc0 <updateDisplay+0xf8>)
 8000c58:	f000 ff00 	bl	8001a5c <HAL_GPIO_WritePin>
	SCS_HIGH();
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2110      	movs	r1, #16
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f000 fefa 	bl	8001a5c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, sendToDisplayBuffer, TOTAL_DATA_SIZE, HAL_MAX_DELAY);
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6c:	f641 6203 	movw	r2, #7683	; 0x1e03
 8000c70:	490e      	ldr	r1, [pc, #56]	; (8000cac <updateDisplay+0xe4>)
 8000c72:	4814      	ldr	r0, [pc, #80]	; (8000cc4 <updateDisplay+0xfc>)
 8000c74:	f003 fbab 	bl	80043ce <HAL_SPI_Transmit>
	SCS_LOW();
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f000 feec 	bl	8001a5c <HAL_GPIO_WritePin>
	//updateBuffer();
	//currentBuffer = (currentBuffer == frontBuffer) ? backBuffer : frontBuffer;
	//initCurrentBuffer();
	resetCurrentBuffer(y_start, y_end);
 8000c84:	79ba      	ldrb	r2, [r7, #6]
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f906 	bl	8000e9c <resetCurrentBuffer>
	RED_LED_OFF();
 8000c90:	2200      	movs	r2, #0
 8000c92:	2102      	movs	r1, #2
 8000c94:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <updateDisplay+0xf8>)
 8000c96:	f000 fee1 	bl	8001a5c <HAL_GPIO_WritePin>

	int vcom_bit = toggle_vcom();
 8000c9a:	f7ff ff67 	bl	8000b6c <toggle_vcom>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	617b      	str	r3, [r7, #20]
	return vcom_bit;
 8000ca2:	697b      	ldr	r3, [r7, #20]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3720      	adds	r7, #32
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20002258 	.word	0x20002258
 8000cb0:	20000181 	.word	0x20000181
 8000cb4:	20000184 	.word	0x20000184
 8000cb8:	20000635 	.word	0x20000635
 8000cbc:	20000634 	.word	0x20000634
 8000cc0:	48000400 	.word	0x48000400
 8000cc4:	2000025c 	.word	0x2000025c

08000cc8 <setPixel_BB>:
		// Clear the bit to erase a pixel (assuming 1 is the color for erasing)
		currentBuffer[y][byteIndex] |= (1 << bitIndex);
	}
}

void setPixel_BB(int x, int y, bool color) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b08b      	sub	sp, #44	; 0x2c
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	71fb      	strb	r3, [r7, #7]
	int byteIndex = x >> 3; // byteIndex = x / 8
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	10db      	asrs	r3, r3, #3
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
	int bitIndex = 7 - (x & 7); // bitIndex = 7 - (x % 8)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	623b      	str	r3, [r7, #32]

	// Calculate the byte offset within the buffer
	uint32_t byte_offset = (uint32_t)&currentBuffer[y][byteIndex] - SRAM_BASE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <setPixel_BB+0x64>)
 8000ce8:	6819      	ldr	r1, [r3, #0]
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	4613      	mov	r3, r2
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	1a9b      	subs	r3, r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	18ca      	adds	r2, r1, r3
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	4413      	add	r3, r2
 8000cfa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000cfe:	61fb      	str	r3, [r7, #28]

	// Calculate the bit_word_offset and bit_band_alias_address
	uint32_t bit_word_offset = (byte_offset << 5) + (bitIndex << 2); // bit_word_offset = (byte_offset) * 32 + (bitIndex * 4)
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	015b      	lsls	r3, r3, #5
 8000d04:	6a3a      	ldr	r2, [r7, #32]
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
	uint32_t bit_band_alias_address = SRAM_BB_BASE + bit_word_offset;
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 8000d12:	617b      	str	r3, [r7, #20]

	// Use bit-banding to set or clear the bit
	*(volatile uint32_t *)bit_band_alias_address = (color ? 0 : 1);
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f083 0301 	eor.w	r3, r3, #1
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	601a      	str	r2, [r3, #0]
}
 8000d20:	bf00      	nop
 8000d22:	372c      	adds	r7, #44	; 0x2c
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	20000184 	.word	0x20000184

08000d30 <drawChar>:

void drawChar(int x, int y, char c, bool color) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b092      	sub	sp, #72	; 0x48
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	460b      	mov	r3, r1
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	4613      	mov	r3, r2
 8000d44:	71bb      	strb	r3, [r7, #6]
	// Get the index of the character in the font arrays
	int charIndex = c - 33; // Assuming '!' (char 33) is the first character in your font
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	3b21      	subs	r3, #33	; 0x21
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34

	// Get the character width and bitmap address
	int width = char_width[charIndex];
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	; (8000e00 <drawChar+0xd0>)
 8000d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d50:	4413      	add	r3, r2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
	const char* bitmap = char_addr[charIndex];
 8000d56:	4a2b      	ldr	r2, [pc, #172]	; (8000e04 <drawChar+0xd4>)
 8000d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Iterate over each vertical slice (column) in the character's bitmap
	for (int col = 0; col < width; col++) {
 8000d60:	2300      	movs	r3, #0
 8000d62:	647b      	str	r3, [r7, #68]	; 0x44
 8000d64:	e043      	b.n	8000dee <drawChar+0xbe>
		int displayX = x + col;  // X position is based on the column (width)
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d6a:	4413      	add	r3, r2
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
		int bitmapColOffset = col; // Pre-calculate column offset in the bitmap
 8000d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24

		int prevRowDivisionResult = -1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	643b      	str	r3, [r7, #64]	; 0x40
		int prevRowDivisionResultTimesWidth = -1;
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7c:	63fb      	str	r3, [r7, #60]	; 0x3c

		// Iterate over each row in the character's bitmap
		for (int row = 0; row < 48; row++) { // Assuming 48 pixels in height
 8000d7e:	2300      	movs	r3, #0
 8000d80:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d82:	e02e      	b.n	8000de2 <drawChar+0xb2>
			int displayY = y + row;  // Y position is based on the row (height)
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d88:	4413      	add	r3, r2
 8000d8a:	623b      	str	r3, [r7, #32]

			// Optimize division and multiplication
			int rowDivisionResult = row >> 3;
 8000d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d8e:	10db      	asrs	r3, r3, #3
 8000d90:	61fb      	str	r3, [r7, #28]
			if (rowDivisionResult != prevRowDivisionResult) {
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d006      	beq.n	8000da8 <drawChar+0x78>
				prevRowDivisionResult = rowDivisionResult;
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	643b      	str	r3, [r7, #64]	; 0x40
				prevRowDivisionResultTimesWidth = rowDivisionResult * width;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000da2:	fb02 f303 	mul.w	r3, r2, r3
 8000da6:	63fb      	str	r3, [r7, #60]	; 0x3c
			}

			// Calculate the position in the bitmap array and the bit index
			int bitmapIndex = bitmapColOffset + prevRowDivisionResultTimesWidth;
 8000da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dac:	4413      	add	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
			int bitIndex = row & 7;  // Bit index within the byte, assuming LSB to MSB ordering
 8000db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	617b      	str	r3, [r7, #20]

			// Check if the pixel should be drawn (based on the bitmap data)
			if (bitmap[bitmapIndex] & (1 << bitIndex)) {
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dbc:	4413      	add	r3, r2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	fa42 f303 	asr.w	r3, r2, r3
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d005      	beq.n	8000ddc <drawChar+0xac>
				setPixel_BB(displayX, displayY, color); // Draw the pixel
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	6a39      	ldr	r1, [r7, #32]
 8000dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dd8:	f7ff ff76 	bl	8000cc8 <setPixel_BB>
		for (int row = 0; row < 48; row++) { // Assuming 48 pixels in height
 8000ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dde:	3301      	adds	r3, #1
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000de4:	2b2f      	cmp	r3, #47	; 0x2f
 8000de6:	ddcd      	ble.n	8000d84 <drawChar+0x54>
	for (int col = 0; col < width; col++) {
 8000de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dea:	3301      	adds	r3, #1
 8000dec:	647b      	str	r3, [r7, #68]	; 0x44
 8000dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df2:	429a      	cmp	r2, r3
 8000df4:	dbb7      	blt.n	8000d66 <drawChar+0x36>
			}
		}
	}
}
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
 8000dfa:	3748      	adds	r7, #72	; 0x48
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	08009498 	.word	0x08009498
 8000e04:	20000008 	.word	0x20000008

08000e08 <numToString>:
        x += char_width[*str - 33] + 1; // Move x to the next character position
        str++; // Next character
    }
}

void numToString(int x, int y, int number, char *format, bool color) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	; 0x30
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	603b      	str	r3, [r7, #0]
	char str[16];
	char *string_pointer = str;
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	char finalFormat[8];
	snprintf(finalFormat, sizeof(finalFormat), "%%%s", format);
 8000e1c:	f107 0014 	add.w	r0, r7, #20
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <numToString+0x70>)
 8000e24:	2108      	movs	r1, #8
 8000e26:	f004 fb9f 	bl	8005568 <sniprintf>
	sprintf(str, finalFormat, number);
 8000e2a:	f107 0114 	add.w	r1, r7, #20
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f004 fbcb 	bl	80055d0 <siprintf>
	while (*string_pointer) {
 8000e3a:	e013      	b.n	8000e64 <numToString+0x5c>
        drawChar(x, y, *string_pointer, color);
 8000e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3e:	781a      	ldrb	r2, [r3, #0]
 8000e40:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f7ff ff72 	bl	8000d30 <drawChar>
        x += char_width[*string_pointer - 33] + 1; // Move x to the next character position
 8000e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	3b21      	subs	r3, #33	; 0x21
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <numToString+0x74>)
 8000e54:	5cd3      	ldrb	r3, [r2, r3]
 8000e56:	3301      	adds	r3, #1
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
        string_pointer++; // Next character
 8000e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e60:	3301      	adds	r3, #1
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (*string_pointer) {
 8000e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1e7      	bne.n	8000e3c <numToString+0x34>
    }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3730      	adds	r7, #48	; 0x30
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	08005f34 	.word	0x08005f34
 8000e7c:	08009498 	.word	0x08009498

08000e80 <initDisplayBuffer>:
	    	currentBuffer[row][col] = ~currentBuffer[row][col];
	    }
	}
}

void initDisplayBuffer(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	//memset(frontBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
	memset(currentBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <initDisplayBuffer+0x18>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000e8c:	21ff      	movs	r1, #255	; 0xff
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f004 fbbe 	bl	8005610 <memset>
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000184 	.word	0x20000184

08000e9c <resetCurrentBuffer>:

void initCurrentBuffer(void) {
	memset(currentBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
}

void resetCurrentBuffer(uint8_t y_start, uint8_t y_end) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	460a      	mov	r2, r1
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	71bb      	strb	r3, [r7, #6]
	for (int i = y_start; i <= y_end; i++) {
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	e00f      	b.n	8000ed2 <resetCurrentBuffer+0x36>
		memset(currentBuffer[i], 0xFF, sizeof(currentBuffer[i]));
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <resetCurrentBuffer+0x48>)
 8000eb4:	6819      	ldr	r1, [r3, #0]
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	1a9b      	subs	r3, r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	440b      	add	r3, r1
 8000ec2:	221e      	movs	r2, #30
 8000ec4:	21ff      	movs	r1, #255	; 0xff
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f004 fba2 	bl	8005610 <memset>
	for (int i = y_start; i <= y_end; i++) {
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	ddeb      	ble.n	8000eb2 <resetCurrentBuffer+0x16>
	}
}
 8000eda:	bf00      	nop
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000184 	.word	0x20000184

08000ee8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <LL_AHB2_GRP1_EnableClock>:
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b085      	sub	sp, #20
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f60:	68fb      	ldr	r3, [r7, #12]
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b096      	sub	sp, #88	; 0x58
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	2250      	movs	r2, #80	; 0x50
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f004 fb25 	bl	8005610 <memset>
  if(hlptim->Instance==LPTIM1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <HAL_LPTIM_MspInit+0x4c>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d111      	bne.n	8000ff4 <HAL_LPTIM_MspInit+0x44>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000fd0:	2310      	movs	r3, #16
 8000fd2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_LPTIM_MspInit+0x50>)
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 fb51 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_LPTIM_MspInit+0x3c>
    {
      Error_Handler();
 8000fe8:	f7ff fd76 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000fec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000ff0:	f7ff ffa4 	bl	8000f3c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3758      	adds	r7, #88	; 0x58
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40007c00 	.word	0x40007c00
 8001000:	000c0004 	.word	0x000c0004

08001004 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b096      	sub	sp, #88	; 0x58
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	2250      	movs	r2, #80	; 0x50
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f004 fafb 	bl	8005610 <memset>
  if(hrtc->Instance==RTC)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a13      	ldr	r2, [pc, #76]	; (800106c <HAL_RTC_MspInit+0x68>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d11f      	bne.n	8001064 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001024:	f000 ffae 	bl	8001f84 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800102c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800102e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001032:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	4618      	mov	r0, r3
 800103a:	f002 fb23 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8001044:	f7ff fd48 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001048:	f7ff ff4e 	bl	8000ee8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800104c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001050:	f7ff ff74 	bl	8000f3c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2003      	movs	r0, #3
 800105a:	f000 fb5a 	bl	8001712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800105e:	2003      	movs	r0, #3
 8001060:	f000 fb71 	bl	8001746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	3758      	adds	r7, #88	; 0x58
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40002800 	.word	0x40002800

08001070 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <HAL_SPI_MspInit+0x5c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d117      	bne.n	80010c2 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001092:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001096:	f7ff ff6a 	bl	8000f6e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff ff35 	bl	8000f0a <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010a0:	23a0      	movs	r3, #160	; 0xa0
 80010a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b0:	2305      	movs	r3, #5
 80010b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f000 fb5d 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40013000 	.word	0x40013000

080010d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b09c      	sub	sp, #112	; 0x70
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2250      	movs	r2, #80	; 0x50
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f004 fa8d 	bl	8005610 <memset>
  if(huart->Instance==USART1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a16      	ldr	r2, [pc, #88]	; (8001154 <HAL_UART_MspInit+0x84>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d124      	bne.n	800114a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001100:	2301      	movs	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4618      	mov	r0, r3
 800110e:	f002 fab9 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001118:	f7ff fcde 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800111c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001120:	f7ff ff25 	bl	8000f6e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001124:	2002      	movs	r0, #2
 8001126:	f7ff fef0 	bl	8000f0a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800112a:	23c0      	movs	r3, #192	; 0xc0
 800112c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001132:	2301      	movs	r3, #1
 8001134:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800113a:	2307      	movs	r3, #7
 800113c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001142:	4619      	mov	r1, r3
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <HAL_UART_MspInit+0x88>)
 8001146:	f000 fb19 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3770      	adds	r7, #112	; 0x70
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40013800 	.word	0x40013800
 8001158:	48000400 	.word	0x48000400

0800115c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09c      	sub	sp, #112	; 0x70
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2250      	movs	r2, #80	; 0x50
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f004 fa47 	bl	8005610 <memset>
  if(hpcd->Instance==USB)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <HAL_PCD_MspInit+0xa8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d136      	bne.n	80011fa <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800118c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001190:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001192:	2318      	movs	r3, #24
 8001194:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001196:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800119a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800119c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80011a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80011a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ac:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80011ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011b2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fa63 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80011c4:	f7ff fc88 	bl	8000ad8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff fe9e 	bl	8000f0a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80011e0:	230a      	movs	r3, #10
 80011e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ee:	f000 fac5 	bl	800177c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011f2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80011f6:	f7ff fea1 	bl	8000f3c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	3770      	adds	r7, #112	; 0x70
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40006800 	.word	0x40006800

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800120c:	e7fe      	b.n	800120c <NMI_Handler+0x4>

0800120e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <MemManage_Handler+0x4>

0800121a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <UsageFault_Handler+0x4>

08001226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001254:	f000 f932 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <RTC_WKUP_IRQHandler+0x10>)
 8001262:	f002 ffeb 	bl	800423c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000238 	.word	0x20000238

08001270 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <LPTIM1_IRQHandler+0x10>)
 8001276:	f000 fcab 	bl	8001bd0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000200 	.word	0x20000200

08001284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <_sbrk+0x5c>)
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <_sbrk+0x60>)
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <_sbrk+0x64>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <_sbrk+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d207      	bcs.n	80012c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b4:	f004 f9b4 	bl	8005620 <__errno>
 80012b8:	4603      	mov	r3, r0
 80012ba:	220c      	movs	r2, #12
 80012bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e009      	b.n	80012d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <_sbrk+0x64>)
 80012d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20030000 	.word	0x20030000
 80012e4:	00000400 	.word	0x00000400
 80012e8:	2000405c 	.word	0x2000405c
 80012ec:	200041b0 	.word	0x200041b0

080012f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <SystemInit+0x98>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fa:	4a23      	ldr	r2, [pc, #140]	; (8001388 <SystemInit+0x98>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001318:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800131c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800131e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <SystemInit+0x9c>)
 800132a:	4013      	ands	r3, r2
 800132c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800132e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800133a:	f023 0305 	bic.w	r3, r3, #5
 800133e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800134a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800134e:	f023 0301 	bic.w	r3, r3, #1
 8001352:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135a:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <SystemInit+0xa0>)
 800135c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800135e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <SystemInit+0xa0>)
 8001364:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001374:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00
 800138c:	faf6fefb 	.word	0xfaf6fefb
 8001390:	22041000 	.word	0x22041000

08001394 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001394:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001396:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001398:	3304      	adds	r3, #4

0800139a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800139e:	d3f9      	bcc.n	8001394 <CopyDataInit>
  bx lr
 80013a0:	4770      	bx	lr

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80013a2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80013a4:	3004      	adds	r0, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80013a6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>
  bx lr
 80013aa:	4770      	bx	lr

080013ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013b0:	f7ff ff9e 	bl	80012f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80013b4:	480b      	ldr	r0, [pc, #44]	; (80013e4 <LoopForever+0x6>)
 80013b6:	490c      	ldr	r1, [pc, #48]	; (80013e8 <LoopForever+0xa>)
 80013b8:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <LoopForever+0xe>)
 80013ba:	2300      	movs	r3, #0
 80013bc:	f7ff ffed 	bl	800139a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <LoopForever+0x12>)
 80013c2:	490c      	ldr	r1, [pc, #48]	; (80013f4 <LoopForever+0x16>)
 80013c4:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <LoopForever+0x1a>)
 80013c6:	2300      	movs	r3, #0
 80013c8:	f7ff ffe7 	bl	800139a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <LoopForever+0x1e>)
 80013ce:	490c      	ldr	r1, [pc, #48]	; (8001400 <LoopForever+0x22>)
 80013d0:	2300      	movs	r3, #0
 80013d2:	f7ff ffe8 	bl	80013a6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013d6:	f004 f929 	bl	800562c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013da:	f7ff f8f5 	bl	80005c8 <main>

080013de <LoopForever>:

LoopForever:
  b LoopForever
 80013de:	e7fe      	b.n	80013de <LoopForever>
  ldr   r0, =_estack
 80013e0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80013e4:	20000008 	.word	0x20000008
 80013e8:	200001e4 	.word	0x200001e4
 80013ec:	08009604 	.word	0x08009604
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80013f0:	20030000 	.word	0x20030000
 80013f4:	20030000 	.word	0x20030000
 80013f8:	080097e0 	.word	0x080097e0
  INIT_BSS _sbss, _ebss
 80013fc:	200001e4 	.word	0x200001e4
 8001400:	200041ac 	.word	0x200041ac

08001404 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC1_IRQHandler>
	...

08001408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_Init+0x3c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <HAL_Init+0x3c>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141e:	2003      	movs	r0, #3
 8001420:	f000 f96c 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001424:	2000      	movs	r0, #0
 8001426:	f000 f80f 	bl	8001448 <HAL_InitTick>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	e001      	b.n	800143a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001436:	f7ff fdb3 	bl	8000fa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800143a:	79fb      	ldrb	r3, [r7, #7]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	58004000 	.word	0x58004000

08001448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_InitTick+0x6c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d024      	beq.n	80014a6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800145c:	f001 fe72 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8001460:	4602      	mov	r2, r0
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_InitTick+0x6c>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	4619      	mov	r1, r3
 8001468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001470:	fbb2 f3f3 	udiv	r3, r2, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f974 	bl	8001762 <HAL_SYSTICK_Config>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10f      	bne.n	80014a0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	d809      	bhi.n	800149a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001486:	2200      	movs	r2, #0
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	f04f 30ff 	mov.w	r0, #4294967295
 800148e:	f000 f940 	bl	8001712 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001492:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <HAL_InitTick+0x70>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	e007      	b.n	80014aa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e004      	b.n	80014aa <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e001      	b.n	80014aa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000190 	.word	0x20000190
 80014b8:	2000018c 	.word	0x2000018c

080014bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000190 	.word	0x20000190
 80014e0:	20004060 	.word	0x20004060

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20004060 	.word	0x20004060

080014fc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_GetTickPrio+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000018c 	.word	0x2000018c

08001514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff ffe2 	bl	80014e4 <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d005      	beq.n	800153a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_Delay+0x44>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800153a:	bf00      	nop
 800153c:	f7ff ffd2 	bl	80014e4 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8f7      	bhi.n	800153c <HAL_Delay+0x28>
  {
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000190 	.word	0x20000190

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <__NVIC_EnableIRQ+0x38>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c8:	d301      	bcc.n	80016ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00f      	b.n	80016ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <SysTick_Config+0x40>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d6:	210f      	movs	r1, #15
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f7ff ff8e 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <SysTick_Config+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <SysTick_Config+0x40>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010

080016fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff29 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff40 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff90 	bl	8001650 <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5f 	bl	80015fc <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff33 	bl	80015c0 <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa4 	bl	80016b8 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178a:	e14c      	b.n	8001a26 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 813e 	beq.w	8001a20 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d005      	beq.n	80017bc <HAL_GPIO_Init+0x40>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d130      	bne.n	800181e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017f2:	2201      	movs	r2, #1
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 0201 	and.w	r2, r3, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b03      	cmp	r3, #3
 8001828:	d017      	beq.n	800185a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d123      	bne.n	80018ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	08da      	lsrs	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3208      	adds	r2, #8
 800186e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	08da      	lsrs	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3208      	adds	r2, #8
 80018a8:	6939      	ldr	r1, [r7, #16]
 80018aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0203 	and.w	r2, r3, #3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8098 	beq.w	8001a20 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80018f0:	4a54      	ldr	r2, [pc, #336]	; (8001a44 <HAL_GPIO_Init+0x2c8>)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800191a:	d019      	beq.n	8001950 <HAL_GPIO_Init+0x1d4>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a4a      	ldr	r2, [pc, #296]	; (8001a48 <HAL_GPIO_Init+0x2cc>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d013      	beq.n	800194c <HAL_GPIO_Init+0x1d0>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a49      	ldr	r2, [pc, #292]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d00d      	beq.n	8001948 <HAL_GPIO_Init+0x1cc>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a48      	ldr	r2, [pc, #288]	; (8001a50 <HAL_GPIO_Init+0x2d4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d007      	beq.n	8001944 <HAL_GPIO_Init+0x1c8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a47      	ldr	r2, [pc, #284]	; (8001a54 <HAL_GPIO_Init+0x2d8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d101      	bne.n	8001940 <HAL_GPIO_Init+0x1c4>
 800193c:	2304      	movs	r3, #4
 800193e:	e008      	b.n	8001952 <HAL_GPIO_Init+0x1d6>
 8001940:	2307      	movs	r3, #7
 8001942:	e006      	b.n	8001952 <HAL_GPIO_Init+0x1d6>
 8001944:	2303      	movs	r3, #3
 8001946:	e004      	b.n	8001952 <HAL_GPIO_Init+0x1d6>
 8001948:	2302      	movs	r3, #2
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x1d6>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_GPIO_Init+0x1d6>
 8001950:	2300      	movs	r3, #0
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	f002 0203 	and.w	r2, r2, #3
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	4093      	lsls	r3, r2
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001962:	4938      	ldr	r1, [pc, #224]	; (8001a44 <HAL_GPIO_Init+0x2c8>)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001970:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001994:	4a30      	ldr	r2, [pc, #192]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800199a:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019be:	4a26      	ldr	r2, [pc, #152]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 80019c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019ea:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 80019f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a18:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f47f aeab 	bne.w	800178c <HAL_GPIO_Init+0x10>
  }
}
 8001a36:	bf00      	nop
 8001a38:	bf00      	nop
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40010000 	.word	0x40010000
 8001a48:	48000400 	.word	0x48000400
 8001a4c:	48000800 	.word	0x48000800
 8001a50:	48000c00 	.word	0x48000c00
 8001a54:	48001000 	.word	0x48001000
 8001a58:	58000800 	.word	0x58000800

08001a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a6c:	787b      	ldrb	r3, [r7, #1]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e08f      	b.n	8001bbe <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d106      	bne.n	8001abe <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fa79 	bl	8000fb0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d004      	beq.n	8001ae0 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ade:	d103      	bne.n	8001ae8 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f023 031e 	bic.w	r3, r3, #30
 8001ae6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d005      	beq.n	8001b00 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001afa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001afe:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <HAL_LPTIM_Init+0x13c>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001b10:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001b16:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001b1c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001b22:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d107      	bne.n	8001b42 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d004      	beq.n	8001b54 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b52:	d107      	bne.n	8001b64 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d00a      	beq.n	8001b86 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001b78:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001b7e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <HAL_LPTIM_Init+0x140>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d108      	bne.n	8001baa <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	621a      	str	r2, [r3, #32]
 8001ba8:	e004      	b.n	8001bb4 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bb2:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	ff19f1fe 	.word	0xff19f1fe
 8001bcc:	40007c00 	.word	0x40007c00

08001bd0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10d      	bne.n	8001c02 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d106      	bne.n	8001c02 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f882 	bl	8001d06 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d10d      	bne.n	8001c2c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d106      	bne.n	8001c2c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2202      	movs	r2, #2
 8001c24:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f877 	bl	8001d1a <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d10d      	bne.n	8001c56 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d106      	bne.n	8001c56 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f86c 	bl	8001d2e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d10d      	bne.n	8001c80 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d106      	bne.n	8001c80 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2208      	movs	r2, #8
 8001c78:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f861 	bl	8001d42 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b10      	cmp	r3, #16
 8001c8c:	d10d      	bne.n	8001caa <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b10      	cmp	r3, #16
 8001c9a:	d106      	bne.n	8001caa <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f856 	bl	8001d56 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d106      	bne.n	8001cd4 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f84b 	bl	8001d6a <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cde:	2b40      	cmp	r3, #64	; 0x40
 8001ce0:	d10d      	bne.n	8001cfe <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cec:	2b40      	cmp	r3, #64	; 0x40
 8001cee:	d106      	bne.n	8001cfe <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2240      	movs	r2, #64	; 0x40
 8001cf6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f840 	bl	8001d7e <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0c0      	b.n	8001f26 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d106      	bne.n	8001dbe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff f9cf 	bl	800115c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 fb92 	bl	80054f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e03e      	b.n	8001e54 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	3311      	adds	r3, #17
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	3310      	adds	r3, #16
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3313      	adds	r3, #19
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	440b      	add	r3, r1
 8001e20:	3320      	adds	r3, #32
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	3324      	adds	r3, #36	; 0x24
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	3301      	adds	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	791b      	ldrb	r3, [r3, #4]
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d3bb      	bcc.n	8001dd6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e044      	b.n	8001eee <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	440b      	add	r3, r1
 8001e72:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	440b      	add	r3, r1
 8001eca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	3301      	adds	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	791b      	ldrb	r3, [r3, #4]
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d3b5      	bcc.n	8001e64 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3304      	adds	r3, #4
 8001f00:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f04:	f003 fb11 	bl	800552a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7a9b      	ldrb	r3, [r3, #10]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d102      	bne.n	8001f24 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f805 	bl	8001f2e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	58000400 	.word	0x58000400

08001fa4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <HAL_PWREx_GetVoltageRange+0x18>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	58000400 	.word	0x58000400

08001fc0 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 0307 	bic.w	r3, r3, #7
 8001fd2:	4a0f      	ldr	r2, [pc, #60]	; (8002010 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001fec:	bf30      	wfi
 8001fee:	e002      	b.n	8001ff6 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001ff0:	bf40      	sev
    __WFE();
 8001ff2:	bf20      	wfe
    __WFE();
 8001ff4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	4a06      	ldr	r2, [pc, #24]	; (8002014 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001ffc:	f023 0304 	bic.w	r3, r3, #4
 8002000:	6113      	str	r3, [r2, #16]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	58000400 	.word	0x58000400
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800201c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800202a:	d101      	bne.n	8002030 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_RCC_HSE_Enable>:
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800204a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_RCC_HSE_Disable>:
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800205e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206c:	6013      	str	r3, [r2, #0]
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_RCC_HSE_IsReady>:
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800207c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800208a:	d101      	bne.n	8002090 <LL_RCC_HSE_IsReady+0x18>
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <LL_RCC_HSE_IsReady+0x1a>
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_RCC_HSI_Enable>:
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80020a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <LL_RCC_HSI_Disable>:
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_RCC_HSI_IsReady>:
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ea:	d101      	bne.n	80020f0 <LL_RCC_HSI_IsReady+0x18>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <LL_RCC_HSI_IsReady+0x1a>
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_RCC_HSI_SetCalibTrimming>:
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	061b      	lsls	r3, r3, #24
 8002112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002116:	4313      	orrs	r3, r2
 8002118:	604b      	str	r3, [r1, #4]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_RCC_HSI48_Enable>:
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800212a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_RCC_HSI48_Disable>:
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <LL_RCC_HSI48_IsReady>:
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002172:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b02      	cmp	r3, #2
 800217c:	d101      	bne.n	8002182 <LL_RCC_HSI48_IsReady+0x18>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <LL_RCC_HSI48_IsReady+0x1a>
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_RCC_LSE_Enable>:
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_RCC_LSE_Disable>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_RCC_LSE_EnableBypass>:
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80021d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_RCC_LSE_DisableBypass>:
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_RCC_LSE_IsReady>:
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800221a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b02      	cmp	r3, #2
 8002228:	d101      	bne.n	800222e <LL_RCC_LSE_IsReady+0x18>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <LL_RCC_LSE_IsReady+0x1a>
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_RCC_LSI1_Enable>:
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800223e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_RCC_LSI1_Disable>:
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800226c:	f023 0301 	bic.w	r3, r3, #1
 8002270:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LL_RCC_LSI1_IsReady>:
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b02      	cmp	r3, #2
 8002290:	d101      	bne.n	8002296 <LL_RCC_LSI1_IsReady+0x18>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_RCC_LSI1_IsReady+0x1a>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_RCC_LSI2_Enable>:
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80022a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_RCC_LSI2_Disable>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80022c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_RCC_LSI2_IsReady>:
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80022ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d101      	bne.n	80022fe <LL_RCC_LSI2_IsReady+0x18>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <LL_RCC_LSI2_IsReady+0x1a>
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_RCC_LSI2_SetTrimming>:
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800231a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_RCC_MSI_Enable>:
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800233c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_RCC_MSI_Disable>:
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800235a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6013      	str	r3, [r2, #0]
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_RCC_MSI_IsReady>:
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d101      	bne.n	800238a <LL_RCC_MSI_IsReady+0x16>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <LL_RCC_MSI_IsReady+0x18>
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <LL_RCC_MSI_SetRange>:
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800239e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_RCC_MSI_GetRange>:
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80023c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ce:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2bb0      	cmp	r3, #176	; 0xb0
 80023d4:	d901      	bls.n	80023da <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80023d6:	23b0      	movs	r3, #176	; 0xb0
 80023d8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80023da:	687b      	ldr	r3, [r7, #4]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <LL_RCC_SetSysClkSource>:
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800241a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 0203 	bic.w	r2, r3, #3
 8002424:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <LL_RCC_GetSysClkSource>:
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 030c 	and.w	r3, r3, #12
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_RCC_SetAHBPrescaler>:
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800245a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_C2_RCC_SetAHBPrescaler>:
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002486:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800248a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800248e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_RCC_SetAHB4Prescaler>:
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024b6:	f023 020f 	bic.w	r2, r3, #15
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_RCC_SetAPB1Prescaler>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80024dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	608b      	str	r3, [r1, #8]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_RCC_SetAPB2Prescaler>:
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800250e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4313      	orrs	r3, r2
 8002516:	608b      	str	r3, [r1, #8]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_RCC_GetAHBPrescaler>:
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_RCC_GetAHB4Prescaler>:
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002544:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_RCC_GetAPB1Prescaler>:
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800255c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_RCC_GetAPB2Prescaler>:
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80025aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b8:	6013      	str	r3, [r2, #0]
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80025c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025d6:	d101      	bne.n	80025dc <LL_RCC_PLL_IsReady+0x18>
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <LL_RCC_PLL_IsReady+0x1a>
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80025ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800261e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0303 	and.w	r3, r3, #3
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800264e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d101      	bne.n	8002662 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002676:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002682:	d101      	bne.n	8002688 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a8:	d101      	bne.n	80026ae <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80026be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026cc:	d101      	bne.n	80026d2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80026e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026f0:	d101      	bne.n	80026f6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b08d      	sub	sp, #52	; 0x34
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e363      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 808d 	beq.w	800283e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002724:	f7ff fe89 	bl	800243a <LL_RCC_GetSysClkSource>
 8002728:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800272a:	f7ff ff82 	bl	8002632 <LL_RCC_PLL_GetMainSource>
 800272e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_RCC_OscConfig+0x3e>
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	2b0c      	cmp	r3, #12
 800273a:	d147      	bne.n	80027cc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273e:	2b01      	cmp	r3, #1
 8002740:	d144      	bne.n	80027cc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e347      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002752:	f7ff fe34 	bl	80023be <LL_RCC_MSI_GetRange>
 8002756:	4603      	mov	r3, r0
 8002758:	429c      	cmp	r4, r3
 800275a:	d914      	bls.n	8002786 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fd2f 	bl	80031c4 <RCC_SetFlashLatencyFromMSIRange>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e336      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fe0e 	bl	8002396 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fe32 	bl	80023e8 <LL_RCC_MSI_SetCalibTrimming>
 8002784:	e013      	b.n	80027ae <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fe03 	bl	8002396 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fe27 	bl	80023e8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fd10 	bl	80031c4 <RCC_SetFlashLatencyFromMSIRange>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e317      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80027ae:	f000 fcc9 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4aa4      	ldr	r2, [pc, #656]	; (8002a48 <HAL_RCC_OscConfig+0x344>)
 80027b6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027b8:	4ba4      	ldr	r3, [pc, #656]	; (8002a4c <HAL_RCC_OscConfig+0x348>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fe43 	bl	8001448 <HAL_InitTick>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d039      	beq.n	800283c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e308      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01e      	beq.n	8002812 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027d4:	f7ff fdb0 	bl	8002338 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027d8:	f7fe fe84 	bl	80014e4 <HAL_GetTick>
 80027dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027e0:	f7fe fe80 	bl	80014e4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e2f5      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80027f2:	f7ff fdbf 	bl	8002374 <LL_RCC_MSI_IsReady>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f1      	beq.n	80027e0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fdc8 	bl	8002396 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fdec 	bl	80023e8 <LL_RCC_MSI_SetCalibTrimming>
 8002810:	e015      	b.n	800283e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002812:	f7ff fda0 	bl	8002356 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002816:	f7fe fe65 	bl	80014e4 <HAL_GetTick>
 800281a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800281e:	f7fe fe61 	bl	80014e4 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e2d6      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002830:	f7ff fda0 	bl	8002374 <LL_RCC_MSI_IsReady>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f1      	bne.n	800281e <HAL_RCC_OscConfig+0x11a>
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800283c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d047      	beq.n	80028da <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284a:	f7ff fdf6 	bl	800243a <LL_RCC_GetSysClkSource>
 800284e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002850:	f7ff feef 	bl	8002632 <LL_RCC_PLL_GetMainSource>
 8002854:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d005      	beq.n	8002868 <HAL_RCC_OscConfig+0x164>
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	2b0c      	cmp	r3, #12
 8002860:	d108      	bne.n	8002874 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d105      	bne.n	8002874 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d134      	bne.n	80028da <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e2b4      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287c:	d102      	bne.n	8002884 <HAL_RCC_OscConfig+0x180>
 800287e:	f7ff fbdd 	bl	800203c <LL_RCC_HSE_Enable>
 8002882:	e001      	b.n	8002888 <HAL_RCC_OscConfig+0x184>
 8002884:	f7ff fbe9 	bl	800205a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fe28 	bl	80014e4 <HAL_GetTick>
 8002894:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002898:	f7fe fe24 	bl	80014e4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e299      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80028aa:	f7ff fbe5 	bl	8002078 <LL_RCC_HSE_IsReady>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f1      	beq.n	8002898 <HAL_RCC_OscConfig+0x194>
 80028b4:	e011      	b.n	80028da <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fe15 	bl	80014e4 <HAL_GetTick>
 80028ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028be:	f7fe fe11 	bl	80014e4 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b64      	cmp	r3, #100	; 0x64
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e286      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80028d0:	f7ff fbd2 	bl	8002078 <LL_RCC_HSE_IsReady>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f1      	bne.n	80028be <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d04c      	beq.n	8002980 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028e6:	f7ff fda8 	bl	800243a <LL_RCC_GetSysClkSource>
 80028ea:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ec:	f7ff fea1 	bl	8002632 <LL_RCC_PLL_GetMainSource>
 80028f0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_OscConfig+0x200>
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d10e      	bne.n	800291c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d10b      	bne.n	800291c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e266      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fbf1 	bl	80020fc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800291a:	e031      	b.n	8002980 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d019      	beq.n	8002958 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	f7ff fbba 	bl	800209c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe fddc 	bl	80014e4 <HAL_GetTick>
 800292c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002930:	f7fe fdd8 	bl	80014e4 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e24d      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002942:	f7ff fbc9 	bl	80020d8 <LL_RCC_HSI_IsReady>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f1      	beq.n	8002930 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fbd3 	bl	80020fc <LL_RCC_HSI_SetCalibTrimming>
 8002956:	e013      	b.n	8002980 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002958:	f7ff fbaf 	bl	80020ba <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe fdc2 	bl	80014e4 <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002964:	f7fe fdbe 	bl	80014e4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e233      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002976:	f7ff fbaf 	bl	80020d8 <LL_RCC_HSI_IsReady>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f1      	bne.n	8002964 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80a3 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d076      	beq.n	8002a90 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d046      	beq.n	8002a3c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80029ae:	f7ff fc66 	bl	800227e <LL_RCC_LSI1_IsReady>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d113      	bne.n	80029e0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80029b8:	f7ff fc3f 	bl	800223a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029bc:	f7fe fd92 	bl	80014e4 <HAL_GetTick>
 80029c0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029c4:	f7fe fd8e 	bl	80014e4 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e203      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80029d6:	f7ff fc52 	bl	800227e <LL_RCC_LSI1_IsReady>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f1      	beq.n	80029c4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80029e0:	f7ff fc5f 	bl	80022a2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe fd7e 	bl	80014e4 <HAL_GetTick>
 80029e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80029ec:	f7fe fd7a 	bl	80014e4 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e1ef      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80029fe:	f7ff fc72 	bl	80022e6 <LL_RCC_LSI2_IsReady>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f1      	beq.n	80029ec <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fc7c 	bl	800230a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002a12:	f7ff fc23 	bl	800225c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a16:	f7fe fd65 	bl	80014e4 <HAL_GetTick>
 8002a1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a1e:	f7fe fd61 	bl	80014e4 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e1d6      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002a30:	f7ff fc25 	bl	800227e <LL_RCC_LSI1_IsReady>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f1      	bne.n	8002a1e <HAL_RCC_OscConfig+0x31a>
 8002a3a:	e051      	b.n	8002ae0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002a3c:	f7ff fbfd 	bl	800223a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe fd50 	bl	80014e4 <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002a46:	e00c      	b.n	8002a62 <HAL_RCC_OscConfig+0x35e>
 8002a48:	20000188 	.word	0x20000188
 8002a4c:	2000018c 	.word	0x2000018c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a50:	f7fe fd48 	bl	80014e4 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e1bd      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002a62:	f7ff fc0c 	bl	800227e <LL_RCC_LSI1_IsReady>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f1      	beq.n	8002a50 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002a6c:	f7ff fc2a 	bl	80022c4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a72:	f7fe fd37 	bl	80014e4 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e1ac      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002a84:	f7ff fc2f 	bl	80022e6 <LL_RCC_LSI2_IsReady>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f1      	bne.n	8002a72 <HAL_RCC_OscConfig+0x36e>
 8002a8e:	e027      	b.n	8002ae0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002a90:	f7ff fc18 	bl	80022c4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a94:	f7fe fd26 	bl	80014e4 <HAL_GetTick>
 8002a98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a9c:	f7fe fd22 	bl	80014e4 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e197      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002aae:	f7ff fc1a 	bl	80022e6 <LL_RCC_LSI2_IsReady>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f1      	bne.n	8002a9c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002ab8:	f7ff fbd0 	bl	800225c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7fe fd12 	bl	80014e4 <HAL_GetTick>
 8002ac0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ac4:	f7fe fd0e 	bl	80014e4 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e183      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002ad6:	f7ff fbd2 	bl	800227e <LL_RCC_LSI1_IsReady>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f1      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d05b      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aec:	4ba7      	ldr	r3, [pc, #668]	; (8002d8c <HAL_RCC_OscConfig+0x688>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d114      	bne.n	8002b22 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002af8:	f7ff fa44 	bl	8001f84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afc:	f7fe fcf2 	bl	80014e4 <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b04:	f7fe fcee 	bl	80014e4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e163      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b16:	4b9d      	ldr	r3, [pc, #628]	; (8002d8c <HAL_RCC_OscConfig+0x688>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d102      	bne.n	8002b30 <HAL_RCC_OscConfig+0x42c>
 8002b2a:	f7ff fb30 	bl	800218e <LL_RCC_LSE_Enable>
 8002b2e:	e00c      	b.n	8002b4a <HAL_RCC_OscConfig+0x446>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b05      	cmp	r3, #5
 8002b36:	d104      	bne.n	8002b42 <HAL_RCC_OscConfig+0x43e>
 8002b38:	f7ff fb4b 	bl	80021d2 <LL_RCC_LSE_EnableBypass>
 8002b3c:	f7ff fb27 	bl	800218e <LL_RCC_LSE_Enable>
 8002b40:	e003      	b.n	8002b4a <HAL_RCC_OscConfig+0x446>
 8002b42:	f7ff fb35 	bl	80021b0 <LL_RCC_LSE_Disable>
 8002b46:	f7ff fb55 	bl	80021f4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d014      	beq.n	8002b7c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7fe fcc7 	bl	80014e4 <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe fcc3 	bl	80014e4 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e136      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b70:	f7ff fb51 	bl	8002216 <LL_RCC_LSE_IsReady>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0ef      	beq.n	8002b5a <HAL_RCC_OscConfig+0x456>
 8002b7a:	e013      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fcb2 	bl	80014e4 <HAL_GetTick>
 8002b80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b84:	f7fe fcae 	bl	80014e4 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e121      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b9a:	f7ff fb3c 	bl	8002216 <LL_RCC_LSE_IsReady>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ef      	bne.n	8002b84 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d02c      	beq.n	8002c0a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d014      	beq.n	8002be2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bb8:	f7ff fab5 	bl	8002126 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fc92 	bl	80014e4 <HAL_GetTick>
 8002bc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bc4:	f7fe fc8e 	bl	80014e4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e103      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002bd6:	f7ff fac8 	bl	800216a <LL_RCC_HSI48_IsReady>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f1      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4c0>
 8002be0:	e013      	b.n	8002c0a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002be2:	f7ff fab1 	bl	8002148 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be6:	f7fe fc7d 	bl	80014e4 <HAL_GetTick>
 8002bea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bee:	f7fe fc79 	bl	80014e4 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e0ee      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002c00:	f7ff fab3 	bl	800216a <LL_RCC_HSI48_IsReady>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f1      	bne.n	8002bee <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80e4 	beq.w	8002ddc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c14:	f7ff fc11 	bl	800243a <LL_RCC_GetSysClkSource>
 8002c18:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	f040 80b4 	bne.w	8002d94 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0203 	and.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d123      	bne.n	8002c82 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d11c      	bne.n	8002c82 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d114      	bne.n	8002c82 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d10d      	bne.n	8002c82 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d05d      	beq.n	8002d3e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b0c      	cmp	r3, #12
 8002c86:	d058      	beq.n	8002d3a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e0a1      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c9a:	f7ff fc84 	bl	80025a6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c9e:	f7fe fc21 	bl	80014e4 <HAL_GetTick>
 8002ca2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7fe fc1d 	bl	80014e4 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e092      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1ef      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	4b30      	ldr	r3, [pc, #192]	; (8002d90 <HAL_RCC_OscConfig+0x68c>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cde:	0212      	lsls	r2, r2, #8
 8002ce0:	4311      	orrs	r1, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ce6:	4311      	orrs	r1, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cec:	4311      	orrs	r1, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cfc:	f7ff fc44 	bl	8002588 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d10:	f7fe fbe8 	bl	80014e4 <HAL_GetTick>
 8002d14:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe fbe4 	bl	80014e4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e059      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ef      	beq.n	8002d18 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d38:	e050      	b.n	8002ddc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e04f      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d147      	bne.n	8002ddc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d4c:	f7ff fc1c 	bl	8002588 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d60:	f7fe fbc0 	bl	80014e4 <HAL_GetTick>
 8002d64:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe fbbc 	bl	80014e4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e031      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ef      	beq.n	8002d68 <HAL_RCC_OscConfig+0x664>
 8002d88:	e028      	b.n	8002ddc <HAL_RCC_OscConfig+0x6d8>
 8002d8a:	bf00      	nop
 8002d8c:	58000400 	.word	0x58000400
 8002d90:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	d01e      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9a:	f7ff fc04 	bl	80025a6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9e:	f7fe fba1 	bl	80014e4 <HAL_GetTick>
 8002da2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fe fb9d 	bl	80014e4 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e012      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ef      	bne.n	8002da6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RCC_OscConfig+0x6e4>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	60cb      	str	r3, [r1, #12]
 8002dd6:	e001      	b.n	8002ddc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3734      	adds	r7, #52	; 0x34
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd90      	pop	{r4, r7, pc}
 8002de6:	bf00      	nop
 8002de8:	eefefffc 	.word	0xeefefffc

08002dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e12d      	b.n	800305c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e00:	4b98      	ldr	r3, [pc, #608]	; (8003064 <HAL_RCC_ClockConfig+0x278>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d91b      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b95      	ldr	r3, [pc, #596]	; (8003064 <HAL_RCC_ClockConfig+0x278>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 0207 	bic.w	r2, r3, #7
 8002e16:	4993      	ldr	r1, [pc, #588]	; (8003064 <HAL_RCC_ClockConfig+0x278>)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e1e:	f7fe fb61 	bl	80014e4 <HAL_GetTick>
 8002e22:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e26:	f7fe fb5d 	bl	80014e4 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e111      	b.n	800305c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e38:	4b8a      	ldr	r3, [pc, #552]	; (8003064 <HAL_RCC_ClockConfig+0x278>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d1ef      	bne.n	8002e26 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d016      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fafb 	bl	8002452 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e5c:	f7fe fb42 	bl	80014e4 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e64:	f7fe fb3e 	bl	80014e4 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e0f2      	b.n	800305c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e76:	f7ff fbe8 	bl	800264a <LL_RCC_IsActiveFlag_HPRE>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f1      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d016      	beq.n	8002eba <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff faf2 	bl	800247a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e96:	f7fe fb25 	bl	80014e4 <HAL_GetTick>
 8002e9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e9e:	f7fe fb21 	bl	80014e4 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0d5      	b.n	800305c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002eb0:	f7ff fbdd 	bl	800266e <LL_RCC_IsActiveFlag_C2HPRE>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f1      	beq.n	8002e9e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d016      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff faeb 	bl	80024a6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ed0:	f7fe fb08 	bl	80014e4 <HAL_GetTick>
 8002ed4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ed8:	f7fe fb04 	bl	80014e4 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e0b8      	b.n	800305c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002eea:	f7ff fbd3 	bl	8002694 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f1      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d016      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fae5 	bl	80024d4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f0a:	f7fe faeb 	bl	80014e4 <HAL_GetTick>
 8002f0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f12:	f7fe fae7 	bl	80014e4 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e09b      	b.n	800305c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f24:	f7ff fbc9 	bl	80026ba <LL_RCC_IsActiveFlag_PPRE1>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f1      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d017      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fadb 	bl	80024fc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f46:	f7fe facd 	bl	80014e4 <HAL_GetTick>
 8002f4a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f4e:	f7fe fac9 	bl	80014e4 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e07d      	b.n	800305c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f60:	f7ff fbbd 	bl	80026de <LL_RCC_IsActiveFlag_PPRE2>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f1      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d043      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d106      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002f7e:	f7ff f87b 	bl	8002078 <LL_RCC_HSE_IsReady>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d11e      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e067      	b.n	800305c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002f94:	f7ff fb16 	bl	80025c4 <LL_RCC_PLL_IsReady>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d113      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e05c      	b.n	800305c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002faa:	f7ff f9e3 	bl	8002374 <LL_RCC_MSI_IsReady>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d108      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e051      	b.n	800305c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002fb8:	f7ff f88e 	bl	80020d8 <LL_RCC_HSI_IsReady>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e04a      	b.n	800305c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fa21 	bl	8002412 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd0:	f7fe fa88 	bl	80014e4 <HAL_GetTick>
 8002fd4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7fe fa84 	bl	80014e4 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e036      	b.n	800305c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	f7ff fa24 	bl	800243a <LL_RCC_GetSysClkSource>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d1ec      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffe:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_RCC_ClockConfig+0x278>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d21b      	bcs.n	8003044 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300c:	4b15      	ldr	r3, [pc, #84]	; (8003064 <HAL_RCC_ClockConfig+0x278>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 0207 	bic.w	r2, r3, #7
 8003014:	4913      	ldr	r1, [pc, #76]	; (8003064 <HAL_RCC_ClockConfig+0x278>)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800301c:	f7fe fa62 	bl	80014e4 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	e008      	b.n	8003036 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003024:	f7fe fa5e 	bl	80014e4 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e012      	b.n	800305c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCC_ClockConfig+0x278>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d1ef      	bne.n	8003024 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003044:	f000 f87e 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8003048:	4603      	mov	r3, r0
 800304a:	4a07      	ldr	r2, [pc, #28]	; (8003068 <HAL_RCC_ClockConfig+0x27c>)
 800304c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800304e:	f7fe fa55 	bl	80014fc <HAL_GetTickPrio>
 8003052:	4603      	mov	r3, r0
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe f9f7 	bl	8001448 <HAL_InitTick>
 800305a:	4603      	mov	r3, r0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	58004000 	.word	0x58004000
 8003068:	20000188 	.word	0x20000188

0800306c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003072:	f7ff f9e2 	bl	800243a <LL_RCC_GetSysClkSource>
 8003076:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800307e:	f7ff f99e 	bl	80023be <LL_RCC_MSI_GetRange>
 8003082:	4603      	mov	r3, r0
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	4a2b      	ldr	r2, [pc, #172]	; (8003138 <HAL_RCC_GetSysClockFreq+0xcc>)
 800308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e04b      	b.n	800312c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b04      	cmp	r3, #4
 8003098:	d102      	bne.n	80030a0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800309a:	4b28      	ldr	r3, [pc, #160]	; (800313c <HAL_RCC_GetSysClockFreq+0xd0>)
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	e045      	b.n	800312c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d10a      	bne.n	80030bc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80030a6:	f7fe ffb7 	bl	8002018 <LL_RCC_HSE_IsEnabledDiv2>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d102      	bne.n	80030b6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80030b0:	4b22      	ldr	r3, [pc, #136]	; (800313c <HAL_RCC_GetSysClockFreq+0xd0>)
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e03a      	b.n	800312c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80030b6:	4b22      	ldr	r3, [pc, #136]	; (8003140 <HAL_RCC_GetSysClockFreq+0xd4>)
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	e037      	b.n	800312c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80030bc:	f7ff fab9 	bl	8002632 <LL_RCC_PLL_GetMainSource>
 80030c0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d003      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x64>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d003      	beq.n	80030d6 <HAL_RCC_GetSysClockFreq+0x6a>
 80030ce:	e00d      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80030d0:	4b1a      	ldr	r3, [pc, #104]	; (800313c <HAL_RCC_GetSysClockFreq+0xd0>)
 80030d2:	60bb      	str	r3, [r7, #8]
        break;
 80030d4:	e015      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80030d6:	f7fe ff9f 	bl	8002018 <LL_RCC_HSE_IsEnabledDiv2>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d102      	bne.n	80030e6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80030e0:	4b16      	ldr	r3, [pc, #88]	; (800313c <HAL_RCC_GetSysClockFreq+0xd0>)
 80030e2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80030e4:	e00d      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80030e6:	4b16      	ldr	r3, [pc, #88]	; (8003140 <HAL_RCC_GetSysClockFreq+0xd4>)
 80030e8:	60bb      	str	r3, [r7, #8]
        break;
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80030ec:	f7ff f967 	bl	80023be <LL_RCC_MSI_GetRange>
 80030f0:	4603      	mov	r3, r0
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	4a0f      	ldr	r2, [pc, #60]	; (8003138 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fe:	60bb      	str	r3, [r7, #8]
        break;
 8003100:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003102:	f7ff fa71 	bl	80025e8 <LL_RCC_PLL_GetN>
 8003106:	4602      	mov	r2, r0
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	fb03 f402 	mul.w	r4, r3, r2
 800310e:	f7ff fa84 	bl	800261a <LL_RCC_PLL_GetDivider>
 8003112:	4603      	mov	r3, r0
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	3301      	adds	r3, #1
 8003118:	fbb4 f4f3 	udiv	r4, r4, r3
 800311c:	f7ff fa71 	bl	8002602 <LL_RCC_PLL_GetR>
 8003120:	4603      	mov	r3, r0
 8003122:	0f5b      	lsrs	r3, r3, #29
 8003124:	3301      	adds	r3, #1
 8003126:	fbb4 f3f3 	udiv	r3, r4, r3
 800312a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800312c:	68fb      	ldr	r3, [r7, #12]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bd90      	pop	{r4, r7, pc}
 8003136:	bf00      	nop
 8003138:	08009558 	.word	0x08009558
 800313c:	00f42400 	.word	0x00f42400
 8003140:	01e84800 	.word	0x01e84800

08003144 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003144:	b598      	push	{r3, r4, r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003148:	f7ff ff90 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800314c:	4604      	mov	r4, r0
 800314e:	f7ff f9e9 	bl	8002524 <LL_RCC_GetAHBPrescaler>
 8003152:	4603      	mov	r3, r0
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	4a03      	ldr	r2, [pc, #12]	; (8003168 <HAL_RCC_GetHCLKFreq+0x24>)
 800315c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003160:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003164:	4618      	mov	r0, r3
 8003166:	bd98      	pop	{r3, r4, r7, pc}
 8003168:	080094f8 	.word	0x080094f8

0800316c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800316c:	b598      	push	{r3, r4, r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003170:	f7ff ffe8 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8003174:	4604      	mov	r4, r0
 8003176:	f7ff f9ef 	bl	8002558 <LL_RCC_GetAPB1Prescaler>
 800317a:	4603      	mov	r3, r0
 800317c:	0a1b      	lsrs	r3, r3, #8
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	4a04      	ldr	r2, [pc, #16]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003190:	4618      	mov	r0, r3
 8003192:	bd98      	pop	{r3, r4, r7, pc}
 8003194:	08009538 	.word	0x08009538

08003198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003198:	b598      	push	{r3, r4, r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800319c:	f7ff ffd2 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 80031a0:	4604      	mov	r4, r0
 80031a2:	f7ff f9e5 	bl	8002570 <LL_RCC_GetAPB2Prescaler>
 80031a6:	4603      	mov	r3, r0
 80031a8:	0adb      	lsrs	r3, r3, #11
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd98      	pop	{r3, r4, r7, pc}
 80031c0:	08009538 	.word	0x08009538

080031c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2bb0      	cmp	r3, #176	; 0xb0
 80031d0:	d903      	bls.n	80031da <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e007      	b.n	80031ea <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	4a11      	ldr	r2, [pc, #68]	; (8003228 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80031e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80031ea:	f7ff f9a7 	bl	800253c <LL_RCC_GetAHB4Prescaler>
 80031ee:	4603      	mov	r3, r0
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	4a0d      	ldr	r2, [pc, #52]	; (800322c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80031f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003202:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	0c9c      	lsrs	r4, r3, #18
 800320e:	f7fe fec9 	bl	8001fa4 <HAL_PWREx_GetVoltageRange>
 8003212:	4603      	mov	r3, r0
 8003214:	4619      	mov	r1, r3
 8003216:	4620      	mov	r0, r4
 8003218:	f000 f80c 	bl	8003234 <RCC_SetFlashLatency>
 800321c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	bd90      	pop	{r4, r7, pc}
 8003226:	bf00      	nop
 8003228:	08009558 	.word	0x08009558
 800322c:	080094f8 	.word	0x080094f8
 8003230:	431bde83 	.word	0x431bde83

08003234 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b093      	sub	sp, #76	; 0x4c
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800323e:	4b37      	ldr	r3, [pc, #220]	; (800331c <RCC_SetFlashLatency+0xe8>)
 8003240:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800324a:	4a35      	ldr	r2, [pc, #212]	; (8003320 <RCC_SetFlashLatency+0xec>)
 800324c:	f107 031c 	add.w	r3, r7, #28
 8003250:	ca07      	ldmia	r2, {r0, r1, r2}
 8003252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003256:	4b33      	ldr	r3, [pc, #204]	; (8003324 <RCC_SetFlashLatency+0xf0>)
 8003258:	f107 040c 	add.w	r4, r7, #12
 800325c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800325e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003262:	2300      	movs	r3, #0
 8003264:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800326c:	d11a      	bne.n	80032a4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800326e:	2300      	movs	r3, #0
 8003270:	643b      	str	r3, [r7, #64]	; 0x40
 8003272:	e013      	b.n	800329c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	3348      	adds	r3, #72	; 0x48
 800327a:	443b      	add	r3, r7
 800327c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	429a      	cmp	r2, r3
 8003284:	d807      	bhi.n	8003296 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	3348      	adds	r3, #72	; 0x48
 800328c:	443b      	add	r3, r7
 800328e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003292:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003294:	e020      	b.n	80032d8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003298:	3301      	adds	r3, #1
 800329a:	643b      	str	r3, [r7, #64]	; 0x40
 800329c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d9e8      	bls.n	8003274 <RCC_SetFlashLatency+0x40>
 80032a2:	e019      	b.n	80032d8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a8:	e013      	b.n	80032d2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80032aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	3348      	adds	r3, #72	; 0x48
 80032b0:	443b      	add	r3, r7
 80032b2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d807      	bhi.n	80032cc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80032bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	3348      	adds	r3, #72	; 0x48
 80032c2:	443b      	add	r3, r7
 80032c4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80032c8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80032ca:	e005      	b.n	80032d8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80032cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ce:	3301      	adds	r3, #1
 80032d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d9e8      	bls.n	80032aa <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80032d8:	4b13      	ldr	r3, [pc, #76]	; (8003328 <RCC_SetFlashLatency+0xf4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 0207 	bic.w	r2, r3, #7
 80032e0:	4911      	ldr	r1, [pc, #68]	; (8003328 <RCC_SetFlashLatency+0xf4>)
 80032e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032e8:	f7fe f8fc 	bl	80014e4 <HAL_GetTick>
 80032ec:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80032ee:	e008      	b.n	8003302 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032f0:	f7fe f8f8 	bl	80014e4 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e007      	b.n	8003312 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <RCC_SetFlashLatency+0xf4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800330c:	429a      	cmp	r2, r3
 800330e:	d1ef      	bne.n	80032f0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	374c      	adds	r7, #76	; 0x4c
 8003316:	46bd      	mov	sp, r7
 8003318:	bd90      	pop	{r4, r7, pc}
 800331a:	bf00      	nop
 800331c:	08005f3c 	.word	0x08005f3c
 8003320:	08005f4c 	.word	0x08005f4c
 8003324:	08005f58 	.word	0x08005f58
 8003328:	58004000 	.word	0x58004000

0800332c <LL_RCC_LSE_IsEnabled>:
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <LL_RCC_LSE_IsEnabled+0x18>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <LL_RCC_LSE_IsEnabled+0x1a>
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_RCC_LSE_IsReady>:
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b02      	cmp	r3, #2
 8003362:	d101      	bne.n	8003368 <LL_RCC_LSE_IsReady+0x18>
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <LL_RCC_LSE_IsReady+0x1a>
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <LL_RCC_MSI_EnablePLLMode>:
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003382:	f043 0304 	orr.w	r3, r3, #4
 8003386:	6013      	str	r3, [r2, #0]
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <LL_RCC_SetRFWKPClockSource>:
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800339a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <LL_RCC_SetSMPSClockSource>:
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80033c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f023 0203 	bic.w	r2, r3, #3
 80033d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <LL_RCC_SetSMPSPrescaler>:
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80033ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4313      	orrs	r3, r2
 8003400:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <LL_RCC_SetUSARTClockSource>:
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f023 0203 	bic.w	r2, r3, #3
 8003422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <LL_RCC_SetLPUARTClockSource>:
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800344e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <LL_RCC_SetI2CClockSource>:
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800346e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003472:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800347e:	43db      	mvns	r3, r3
 8003480:	401a      	ands	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800348a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <LL_RCC_SetLPTIMClockSource>:
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80034a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	0c1b      	lsrs	r3, r3, #16
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	43db      	mvns	r3, r3
 80034b8:	401a      	ands	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <LL_RCC_SetSAIClockSource>:
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80034dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <LL_RCC_SetRNGClockSource>:
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <LL_RCC_SetCLK48ClockSource>:
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_RCC_SetUSBClockSource>:
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ffe3 	bl	800352c <LL_RCC_SetCLK48ClockSource>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <LL_RCC_SetADCClockSource>:
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <LL_RCC_SetRTCClockSource>:
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80035a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <LL_RCC_GetRTCClockSource>:
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80035ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_RCC_ForceBackupDomainReset>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80035e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003602:	b480      	push	{r7}
 8003604:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800361a:	bf00      	nop
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <LL_RCC_PLLSAI1_Enable>:
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003632:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003636:	6013      	str	r3, [r2, #0]
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <LL_RCC_PLLSAI1_Disable>:
{
 8003642:	b480      	push	{r7}
 8003644:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003650:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003654:	6013      	str	r3, [r2, #0]
}
 8003656:	bf00      	nop
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <LL_RCC_PLLSAI1_IsReady>:
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800366e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003672:	d101      	bne.n	8003678 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800368c:	2300      	movs	r3, #0
 800368e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003690:	2300      	movs	r3, #0
 8003692:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d034      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036a8:	d021      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80036aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036ae:	d81b      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036b4:	d01d      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80036b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036ba:	d815      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80036c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c4:	d110      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80036c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80036d6:	e00d      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 f94d 	bl	800397c <RCCEx_PLLSAI1_ConfigNP>
 80036e2:	4603      	mov	r3, r0
 80036e4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80036e6:	e005      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	77fb      	strb	r3, [r7, #31]
        break;
 80036ec:	e002      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80036f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f4:	7ffb      	ldrb	r3, [r7, #31]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff fee8 	bl	80034d4 <LL_RCC_SetSAIClockSource>
 8003704:	e001      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003706:	7ffb      	ldrb	r3, [r7, #31]
 8003708:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003712:	2b00      	cmp	r3, #0
 8003714:	d046      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003716:	f7ff ff56 	bl	80035c6 <LL_RCC_GetRTCClockSource>
 800371a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	429a      	cmp	r2, r3
 8003724:	d03c      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003726:	f7fe fc2d 	bl	8001f84 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d105      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff30 	bl	800359a <LL_RCC_SetRTCClockSource>
 800373a:	e02e      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800373c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003746:	f7ff ff4b 	bl	80035e0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800374a:	f7ff ff5a 	bl	8003602 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800375c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003766:	f7ff fde1 	bl	800332c <LL_RCC_LSE_IsEnabled>
 800376a:	4603      	mov	r3, r0
 800376c:	2b01      	cmp	r3, #1
 800376e:	d114      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003770:	f7fd feb8 	bl	80014e4 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003776:	e00b      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003778:	f7fd feb4 	bl	80014e4 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d902      	bls.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	77fb      	strb	r3, [r7, #31]
              break;
 800378e:	e004      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003790:	f7ff fdde 	bl	8003350 <LL_RCC_LSE_IsReady>
 8003794:	4603      	mov	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d1ee      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800379a:	7ffb      	ldrb	r3, [r7, #31]
 800379c:	77bb      	strb	r3, [r7, #30]
 800379e:	e001      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a0:	7ffb      	ldrb	r3, [r7, #31]
 80037a2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d004      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fe2a 	bl	800340e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d004      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fe35 	bl	800343a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fe5d 	bl	80034a0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d004      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fe52 	bl	80034a0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d004      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fe2a 	bl	8003466 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d004      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fe1f 	bl	8003466 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d022      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fe8d 	bl	8003558 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003846:	d107      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003856:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003860:	d10b      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3304      	adds	r3, #4
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f8e3 	bl	8003a32 <RCCEx_PLLSAI1_ConfigNQ>
 800386c:	4603      	mov	r3, r0
 800386e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003870:	7ffb      	ldrb	r3, [r7, #31]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003876:	7ffb      	ldrb	r3, [r7, #31]
 8003878:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003882:	2b00      	cmp	r3, #0
 8003884:	d02b      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388e:	d008      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003898:	d003      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d105      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fe2a 	bl	8003500 <LL_RCC_SetRNGClockSource>
 80038ac:	e00a      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	2000      	movs	r0, #0
 80038ba:	f7ff fe21 	bl	8003500 <LL_RCC_SetRNGClockSource>
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f7ff fe34 	bl	800352c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80038cc:	d107      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80038ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d022      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fe3d 	bl	800356e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038fc:	d107      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003916:	d10b      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	4618      	mov	r0, r3
 800391e:	f000 f8e3 	bl	8003ae8 <RCCEx_PLLSAI1_ConfigNR>
 8003922:	4603      	mov	r3, r0
 8003924:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003926:	7ffb      	ldrb	r3, [r7, #31]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800392c:	7ffb      	ldrb	r3, [r7, #31]
 800392e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fd26 	bl	8003392 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d009      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fd45 	bl	80033e6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fd2c 	bl	80033be <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003966:	7fbb      	ldrb	r3, [r7, #30]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003974:	f7ff fcfe 	bl	8003374 <LL_RCC_MSI_EnablePLLMode>
}
 8003978:	bf00      	nop
 800397a:	bd80      	pop	{r7, pc}

0800397c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003988:	f7ff fe5b 	bl	8003642 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800398c:	f7fd fdaa 	bl	80014e4 <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003992:	e009      	b.n	80039a8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003994:	f7fd fda6 	bl	80014e4 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d902      	bls.n	80039a8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	73fb      	strb	r3, [r7, #15]
      break;
 80039a6:	e004      	b.n	80039b2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039a8:	f7ff fe5a 	bl	8003660 <LL_RCC_PLLSAI1_IsReady>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d137      	bne.n	8003a28 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80039b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039cc:	4313      	orrs	r3, r2
 80039ce:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80039d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039e2:	4313      	orrs	r3, r2
 80039e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80039e6:	f7ff fe1d 	bl	8003624 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ea:	f7fd fd7b 	bl	80014e4 <HAL_GetTick>
 80039ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039f0:	e009      	b.n	8003a06 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039f2:	f7fd fd77 	bl	80014e4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d902      	bls.n	8003a06 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	73fb      	strb	r3, [r7, #15]
        break;
 8003a04:	e004      	b.n	8003a10 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a06:	f7ff fe2b 	bl	8003660 <LL_RCC_PLLSAI1_IsReady>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d1f0      	bne.n	80039f2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d108      	bne.n	8003a28 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a24:	4313      	orrs	r3, r2
 8003a26:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003a3e:	f7ff fe00 	bl	8003642 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a42:	f7fd fd4f 	bl	80014e4 <HAL_GetTick>
 8003a46:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a48:	e009      	b.n	8003a5e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a4a:	f7fd fd4b 	bl	80014e4 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d902      	bls.n	8003a5e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5c:	e004      	b.n	8003a68 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a5e:	f7ff fdff 	bl	8003660 <LL_RCC_PLLSAI1_IsReady>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f0      	bne.n	8003a4a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d137      	bne.n	8003ade <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a82:	4313      	orrs	r3, r2
 8003a84:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a9c:	f7ff fdc2 	bl	8003624 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa0:	f7fd fd20 	bl	80014e4 <HAL_GetTick>
 8003aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003aa6:	e009      	b.n	8003abc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aa8:	f7fd fd1c 	bl	80014e4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d902      	bls.n	8003abc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8003aba:	e004      	b.n	8003ac6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003abc:	f7ff fdd0 	bl	8003660 <LL_RCC_PLLSAI1_IsReady>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d1f0      	bne.n	8003aa8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d108      	bne.n	8003ade <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ada:	4313      	orrs	r3, r2
 8003adc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003af4:	f7ff fda5 	bl	8003642 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003af8:	f7fd fcf4 	bl	80014e4 <HAL_GetTick>
 8003afc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003afe:	e009      	b.n	8003b14 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b00:	f7fd fcf0 	bl	80014e4 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d902      	bls.n	8003b14 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	73fb      	strb	r3, [r7, #15]
      break;
 8003b12:	e004      	b.n	8003b1e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b14:	f7ff fda4 	bl	8003660 <LL_RCC_PLLSAI1_IsReady>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d137      	bne.n	8003b94 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	021b      	lsls	r3, r3, #8
 8003b34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003b52:	f7ff fd67 	bl	8003624 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b56:	f7fd fcc5 	bl	80014e4 <HAL_GetTick>
 8003b5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b5c:	e009      	b.n	8003b72 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b5e:	f7fd fcc1 	bl	80014e4 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d902      	bls.n	8003b72 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	73fb      	strb	r3, [r7, #15]
        break;
 8003b70:	e004      	b.n	8003b7c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b72:	f7ff fd75 	bl	8003660 <LL_RCC_PLLSAI1_IsReady>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d1f0      	bne.n	8003b5e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d108      	bne.n	8003b94 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b90:	4313      	orrs	r3, r2
 8003b92:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e09f      	b.n	8003cf2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fd fa1c 	bl	8001004 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003bd4:	4b49      	ldr	r3, [pc, #292]	; (8003cfc <HAL_RTC_Init+0x15c>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d07e      	beq.n	8003cde <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	22ca      	movs	r2, #202	; 0xca
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2253      	movs	r2, #83	; 0x53
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fa1d 	bl	8004030 <RTC_EnterInitMode>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	22ff      	movs	r2, #255	; 0xff
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2204      	movs	r2, #4
 8003c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
 8003c10:	e067      	b.n	8003ce2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c24:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6899      	ldr	r1, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68d2      	ldr	r2, [r2, #12]
 8003c4c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6919      	ldr	r1, [r3, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	041a      	lsls	r2, r3, #16
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c70:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0203 	bic.w	r2, r2, #3
 8003c80:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d113      	bne.n	8003cd0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f99b 	bl	8003fe4 <HAL_RTC_WaitForSynchro>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00d      	beq.n	8003cd0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	22ff      	movs	r2, #255	; 0xff
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e010      	b.n	8003cf2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	22ff      	movs	r2, #255	; 0xff
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	73fb      	strb	r3, [r7, #15]
 8003cdc:	e001      	b.n	8003ce2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d103      	bne.n	8003cf0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40002800 	.word	0x40002800

08003d00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_RTC_SetTime+0x1a>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e0b2      	b.n	8003e80 <HAL_RTC_SetTime+0x180>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2202      	movs	r2, #2
 8003d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d126      	bne.n	8003d7e <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2200      	movs	r2, #0
 8003d42:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 f99b 	bl	8004084 <RTC_ByteToBcd2>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	785b      	ldrb	r3, [r3, #1]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 f994 	bl	8004084 <RTC_ByteToBcd2>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003d60:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	789b      	ldrb	r3, [r3, #2]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f98c 	bl	8004084 <RTC_ByteToBcd2>
 8003d6c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003d6e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	78db      	ldrb	r3, [r3, #3]
 8003d76:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e018      	b.n	8003db0 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d102      	bne.n	8003d92 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	785b      	ldrb	r3, [r3, #1]
 8003d9c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003d9e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003da4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	78db      	ldrb	r3, [r3, #3]
 8003daa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	22ca      	movs	r2, #202	; 0xca
 8003db6:	625a      	str	r2, [r3, #36]	; 0x24
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2253      	movs	r2, #83	; 0x53
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f935 	bl	8004030 <RTC_EnterInitMode>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00d      	beq.n	8003de8 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	22ff      	movs	r2, #255	; 0xff
 8003dd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e04b      	b.n	8003e80 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003df2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003df6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e06:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6899      	ldr	r1, [r3, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e2e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d113      	bne.n	8003e66 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f8d0 	bl	8003fe4 <HAL_RTC_WaitForSynchro>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00d      	beq.n	8003e66 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	22ff      	movs	r2, #255	; 0xff
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2204      	movs	r2, #4
 8003e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00c      	b.n	8003e80 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	22ff      	movs	r2, #255	; 0xff
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
  }
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd90      	pop	{r4, r7, pc}

08003e88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e88:	b590      	push	{r4, r7, lr}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_RTC_SetDate+0x1a>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e09c      	b.n	8003fdc <HAL_RTC_SetDate+0x154>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2202      	movs	r2, #2
 8003eae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10e      	bne.n	8003ed6 <HAL_RTC_SetDate+0x4e>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	785b      	ldrb	r3, [r3, #1]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	785b      	ldrb	r3, [r3, #1]
 8003ec8:	f023 0310 	bic.w	r3, r3, #16
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	330a      	adds	r3, #10
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d11c      	bne.n	8003f16 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	78db      	ldrb	r3, [r3, #3]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 f8cf 	bl	8004084 <RTC_ByteToBcd2>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	785b      	ldrb	r3, [r3, #1]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f8c8 	bl	8004084 <RTC_ByteToBcd2>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003ef8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	789b      	ldrb	r3, [r3, #2]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 f8c0 	bl	8004084 <RTC_ByteToBcd2>
 8003f04:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003f06:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	e00e      	b.n	8003f34 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	78db      	ldrb	r3, [r3, #3]
 8003f1a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	785b      	ldrb	r3, [r3, #1]
 8003f20:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003f22:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003f28:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	22ca      	movs	r2, #202	; 0xca
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2253      	movs	r2, #83	; 0x53
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f873 	bl	8004030 <RTC_EnterInitMode>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00d      	beq.n	8003f6c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	22ff      	movs	r2, #255	; 0xff
 8003f56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e037      	b.n	8003fdc <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f7a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d113      	bne.n	8003fc2 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f822 	bl	8003fe4 <HAL_RTC_WaitForSynchro>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	22ff      	movs	r2, #255	; 0xff
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e00c      	b.n	8003fdc <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	22ff      	movs	r2, #255	; 0xff
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003fda:	2300      	movs	r3, #0
  }
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd90      	pop	{r4, r7, pc}

08003fe4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ffa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003ffc:	f7fd fa72 	bl	80014e4 <HAL_GetTick>
 8004000:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004002:	e009      	b.n	8004018 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004004:	f7fd fa6e 	bl	80014e4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004012:	d901      	bls.n	8004018 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e007      	b.n	8004028 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0ee      	beq.n	8004004 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d119      	bne.n	800407a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f04f 32ff 	mov.w	r2, #4294967295
 800404e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004050:	f7fd fa48 	bl	80014e4 <HAL_GetTick>
 8004054:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004056:	e009      	b.n	800406c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004058:	f7fd fa44 	bl	80014e4 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004066:	d901      	bls.n	800406c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e007      	b.n	800407c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0ee      	beq.n	8004058 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8004096:	e005      	b.n	80040a4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3301      	adds	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800409e:	7afb      	ldrb	r3, [r7, #11]
 80040a0:	3b0a      	subs	r3, #10
 80040a2:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 80040a4:	7afb      	ldrb	r3, [r7, #11]
 80040a6:	2b09      	cmp	r3, #9
 80040a8:	d8f6      	bhi.n	8004098 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	7afb      	ldrb	r3, [r7, #11]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	b2db      	uxtb	r3, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80040da:	2302      	movs	r3, #2
 80040dc:	e0a8      	b.n	8004230 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2202      	movs	r2, #2
 80040ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	22ca      	movs	r2, #202	; 0xca
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2253      	movs	r2, #83	; 0x53
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004108:	2b00      	cmp	r3, #0
 800410a:	d020      	beq.n	800414e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800410c:	f7fd f9ea 	bl	80014e4 <HAL_GetTick>
 8004110:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004112:	e015      	b.n	8004140 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004114:	f7fd f9e6 	bl	80014e4 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004122:	d90d      	bls.n	8004140 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	22ff      	movs	r2, #255	; 0xff
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2203      	movs	r2, #3
 8004130:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e077      	b.n	8004230 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e2      	bne.n	8004114 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800416e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004170:	f7fd f9b8 	bl	80014e4 <HAL_GetTick>
 8004174:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004176:	e015      	b.n	80041a4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004178:	f7fd f9b4 	bl	80014e4 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004186:	d90d      	bls.n	80041a4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	22ff      	movs	r2, #255	; 0xff
 800418e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2203      	movs	r2, #3
 8004194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e045      	b.n	8004230 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0e2      	beq.n	8004178 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0207 	bic.w	r2, r2, #7
 80041c8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6899      	ldr	r1, [r3, #8]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80041da:	4b17      	ldr	r3, [pc, #92]	; (8004238 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80041dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e0:	4a15      	ldr	r2, [pc, #84]	; (8004238 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80041e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80041ea:	4b13      	ldr	r3, [pc, #76]	; (8004238 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a12      	ldr	r2, [pc, #72]	; (8004238 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80041f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041f4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004204:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004214:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	22ff      	movs	r2, #255	; 0xff
 800421c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	58000800 	.word	0x58000800

0800423c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fc f992 	bl	800057c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	b2da      	uxtb	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004268:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800426c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004270:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	58000800 	.word	0x58000800

08004288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e095      	b.n	80043c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d108      	bne.n	80042b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042aa:	d009      	beq.n	80042c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	61da      	str	r2, [r3, #28]
 80042b2:	e005      	b.n	80042c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fc fec8 	bl	8001070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004300:	d902      	bls.n	8004308 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	e002      	b.n	800430e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800430c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004316:	d007      	beq.n	8004328 <HAL_SPI_Init+0xa0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004320:	d002      	beq.n	8004328 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	ea42 0103 	orr.w	r1, r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	0c1b      	lsrs	r3, r3, #16
 8004384:	f003 0204 	and.w	r2, r3, #4
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80043a4:	ea42 0103 	orr.w	r1, r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b088      	sub	sp, #32
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	603b      	str	r3, [r7, #0]
 80043da:	4613      	mov	r3, r2
 80043dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_SPI_Transmit+0x22>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e15f      	b.n	80046b0 <HAL_SPI_Transmit+0x2e2>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043f8:	f7fd f874 	bl	80014e4 <HAL_GetTick>
 80043fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b01      	cmp	r3, #1
 800440c:	d002      	beq.n	8004414 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800440e:	2302      	movs	r3, #2
 8004410:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004412:	e148      	b.n	80046a6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_SPI_Transmit+0x52>
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004424:	e13f      	b.n	80046a6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2203      	movs	r2, #3
 800442a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	88fa      	ldrh	r2, [r7, #6]
 800443e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004470:	d10f      	bne.n	8004492 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004480:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004490:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d007      	beq.n	80044b0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044b8:	d94f      	bls.n	800455a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_SPI_Transmit+0xfa>
 80044c2:	8afb      	ldrh	r3, [r7, #22]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d142      	bne.n	800454e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	881a      	ldrh	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	1c9a      	adds	r2, r3, #2
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044ec:	e02f      	b.n	800454e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d112      	bne.n	8004522 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	881a      	ldrh	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	1c9a      	adds	r2, r3, #2
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004520:	e015      	b.n	800454e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004522:	f7fc ffdf 	bl	80014e4 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d803      	bhi.n	800453a <HAL_SPI_Transmit+0x16c>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d102      	bne.n	8004540 <HAL_SPI_Transmit+0x172>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800454c:	e0ab      	b.n	80046a6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ca      	bne.n	80044ee <HAL_SPI_Transmit+0x120>
 8004558:	e080      	b.n	800465c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_SPI_Transmit+0x19a>
 8004562:	8afb      	ldrh	r3, [r7, #22]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d174      	bne.n	8004652 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d912      	bls.n	8004598 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	881a      	ldrh	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	1c9a      	adds	r2, r3, #2
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b02      	subs	r3, #2
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004596:	e05c      	b.n	8004652 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	7812      	ldrb	r2, [r2, #0]
 80045a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80045be:	e048      	b.n	8004652 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d12b      	bne.n	8004626 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d912      	bls.n	80045fe <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	881a      	ldrh	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	1c9a      	adds	r2, r3, #2
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b02      	subs	r3, #2
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045fc:	e029      	b.n	8004652 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	330c      	adds	r3, #12
 8004608:	7812      	ldrb	r2, [r2, #0]
 800460a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004624:	e015      	b.n	8004652 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004626:	f7fc ff5d 	bl	80014e4 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d803      	bhi.n	800463e <HAL_SPI_Transmit+0x270>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d102      	bne.n	8004644 <HAL_SPI_Transmit+0x276>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004650:	e029      	b.n	80046a6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1b1      	bne.n	80045c0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	6839      	ldr	r1, [r7, #0]
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f947 	bl	80048f4 <SPI_EndRxTxTransaction>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800467a:	2300      	movs	r3, #0
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e003      	b.n	80046a6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3720      	adds	r7, #32
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046c8:	f7fc ff0c 	bl	80014e4 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	4413      	add	r3, r2
 80046d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046d8:	f7fc ff04 	bl	80014e4 <HAL_GetTick>
 80046dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046de:	4b39      	ldr	r3, [pc, #228]	; (80047c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	015b      	lsls	r3, r3, #5
 80046e4:	0d1b      	lsrs	r3, r3, #20
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	fb02 f303 	mul.w	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ee:	e054      	b.n	800479a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d050      	beq.n	800479a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046f8:	f7fc fef4 	bl	80014e4 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	429a      	cmp	r2, r3
 8004706:	d902      	bls.n	800470e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d13d      	bne.n	800478a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800471c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004726:	d111      	bne.n	800474c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004730:	d004      	beq.n	800473c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473a:	d107      	bne.n	800474c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004754:	d10f      	bne.n	8004776 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004774:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e017      	b.n	80047ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3b01      	subs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d19b      	bne.n	80046f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3720      	adds	r7, #32
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000188 	.word	0x20000188

080047c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	; 0x28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80047da:	f7fc fe83 	bl	80014e4 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	4413      	add	r3, r2
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80047ea:	f7fc fe7b 	bl	80014e4 <HAL_GetTick>
 80047ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80047f8:	4b3d      	ldr	r3, [pc, #244]	; (80048f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	00da      	lsls	r2, r3, #3
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	0d1b      	lsrs	r3, r3, #20
 8004808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004810:	e060      	b.n	80048d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004818:	d107      	bne.n	800482a <SPI_WaitFifoStateUntilTimeout+0x62>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d104      	bne.n	800482a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004828:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d050      	beq.n	80048d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004832:	f7fc fe57 	bl	80014e4 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483e:	429a      	cmp	r2, r3
 8004840:	d902      	bls.n	8004848 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	2b00      	cmp	r3, #0
 8004846:	d13d      	bne.n	80048c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004856:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004860:	d111      	bne.n	8004886 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486a:	d004      	beq.n	8004876 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004874:	d107      	bne.n	8004886 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004884:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488e:	d10f      	bne.n	80048b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e010      	b.n	80048e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4013      	ands	r3, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d196      	bne.n	8004812 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3728      	adds	r7, #40	; 0x28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000188 	.word	0x20000188

080048f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2200      	movs	r2, #0
 8004908:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7ff ff5b 	bl	80047c8 <SPI_WaitFifoStateUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d007      	beq.n	8004928 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491c:	f043 0220 	orr.w	r2, r3, #32
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e027      	b.n	8004978 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2200      	movs	r2, #0
 8004930:	2180      	movs	r1, #128	; 0x80
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f7ff fec0 	bl	80046b8 <SPI_WaitFlagStateUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e014      	b.n	8004978 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2200      	movs	r2, #0
 8004956:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f7ff ff34 	bl	80047c8 <SPI_WaitFifoStateUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496a:	f043 0220 	orr.w	r2, r3, #32
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e000      	b.n	8004978 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <LL_RCC_GetUSARTClockSource>:
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4013      	ands	r3, r2
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_RCC_GetLPUARTClockSource>:
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80049a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4013      	ands	r3, r2
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e042      	b.n	8004a58 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7fc fb73 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2224      	movs	r2, #36	; 0x24
 80049ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0201 	bic.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fa50 	bl	8004eb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f825 	bl	8004a60 <UART_SetConfig>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e01b      	b.n	8004a58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 facf 	bl	8004ff4 <UART_CheckIdleState>
 8004a56:	4603      	mov	r3, r0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a64:	b08c      	sub	sp, #48	; 0x30
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4baf      	ldr	r3, [pc, #700]	; (8004d4c <UART_SetConfig+0x2ec>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4aa4      	ldr	r2, [pc, #656]	; (8004d50 <UART_SetConfig+0x2f0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ad6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	f023 010f 	bic.w	r1, r3, #15
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a95      	ldr	r2, [pc, #596]	; (8004d54 <UART_SetConfig+0x2f4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d125      	bne.n	8004b50 <UART_SetConfig+0xf0>
 8004b04:	2003      	movs	r0, #3
 8004b06:	f7ff ff3b 	bl	8004980 <LL_RCC_GetUSARTClockSource>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d81b      	bhi.n	8004b48 <UART_SetConfig+0xe8>
 8004b10:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <UART_SetConfig+0xb8>)
 8004b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b16:	bf00      	nop
 8004b18:	08004b29 	.word	0x08004b29
 8004b1c:	08004b39 	.word	0x08004b39
 8004b20:	08004b31 	.word	0x08004b31
 8004b24:	08004b41 	.word	0x08004b41
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b2e:	e042      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004b30:	2302      	movs	r3, #2
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b36:	e03e      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004b38:	2304      	movs	r3, #4
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3e:	e03a      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004b40:	2308      	movs	r3, #8
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b46:	e036      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4e:	e032      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a7e      	ldr	r2, [pc, #504]	; (8004d50 <UART_SetConfig+0x2f0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d12a      	bne.n	8004bb0 <UART_SetConfig+0x150>
 8004b5a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004b5e:	f7ff ff1f 	bl	80049a0 <LL_RCC_GetLPUARTClockSource>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b68:	d01a      	beq.n	8004ba0 <UART_SetConfig+0x140>
 8004b6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b6e:	d81b      	bhi.n	8004ba8 <UART_SetConfig+0x148>
 8004b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b74:	d00c      	beq.n	8004b90 <UART_SetConfig+0x130>
 8004b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7a:	d815      	bhi.n	8004ba8 <UART_SetConfig+0x148>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <UART_SetConfig+0x128>
 8004b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b84:	d008      	beq.n	8004b98 <UART_SetConfig+0x138>
 8004b86:	e00f      	b.n	8004ba8 <UART_SetConfig+0x148>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b8e:	e012      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004b90:	2302      	movs	r3, #2
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b96:	e00e      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9e:	e00a      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba6:	e006      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bae:	e002      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a65      	ldr	r2, [pc, #404]	; (8004d50 <UART_SetConfig+0x2f0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	f040 8097 	bne.w	8004cf0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d823      	bhi.n	8004c12 <UART_SetConfig+0x1b2>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <UART_SetConfig+0x170>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004bf5 	.word	0x08004bf5
 8004bd4:	08004c13 	.word	0x08004c13
 8004bd8:	08004bfd 	.word	0x08004bfd
 8004bdc:	08004c13 	.word	0x08004c13
 8004be0:	08004c03 	.word	0x08004c03
 8004be4:	08004c13 	.word	0x08004c13
 8004be8:	08004c13 	.word	0x08004c13
 8004bec:	08004c13 	.word	0x08004c13
 8004bf0:	08004c0b 	.word	0x08004c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf4:	f7fe faba 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 8004bf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bfa:	e010      	b.n	8004c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bfc:	4b56      	ldr	r3, [pc, #344]	; (8004d58 <UART_SetConfig+0x2f8>)
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c00:	e00d      	b.n	8004c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c02:	f7fe fa33 	bl	800306c <HAL_RCC_GetSysClockFreq>
 8004c06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c08:	e009      	b.n	8004c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c10:	e005      	b.n	8004c1e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 812b 	beq.w	8004e7c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	4a4c      	ldr	r2, [pc, #304]	; (8004d5c <UART_SetConfig+0x2fc>)
 8004c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c30:	461a      	mov	r2, r3
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	4413      	add	r3, r2
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d305      	bcc.n	8004c56 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d903      	bls.n	8004c5e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c5c:	e10e      	b.n	8004e7c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	2200      	movs	r2, #0
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	60fa      	str	r2, [r7, #12]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	4a3c      	ldr	r2, [pc, #240]	; (8004d5c <UART_SetConfig+0x2fc>)
 8004c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2200      	movs	r2, #0
 8004c74:	603b      	str	r3, [r7, #0]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c80:	f7fb face 	bl	8000220 <__aeabi_uldivmod>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	020b      	lsls	r3, r1, #8
 8004c96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c9a:	0202      	lsls	r2, r0, #8
 8004c9c:	6979      	ldr	r1, [r7, #20]
 8004c9e:	6849      	ldr	r1, [r1, #4]
 8004ca0:	0849      	lsrs	r1, r1, #1
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	eb12 0804 	adds.w	r8, r2, r4
 8004cac:	eb43 0905 	adc.w	r9, r3, r5
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	469a      	mov	sl, r3
 8004cb8:	4693      	mov	fp, r2
 8004cba:	4652      	mov	r2, sl
 8004cbc:	465b      	mov	r3, fp
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	f7fb faad 	bl	8000220 <__aeabi_uldivmod>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4613      	mov	r3, r2
 8004ccc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd4:	d308      	bcc.n	8004ce8 <UART_SetConfig+0x288>
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cdc:	d204      	bcs.n	8004ce8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6a3a      	ldr	r2, [r7, #32]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	e0c9      	b.n	8004e7c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cee:	e0c5      	b.n	8004e7c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf8:	d16d      	bne.n	8004dd6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	2b07      	cmp	r3, #7
 8004d02:	d82d      	bhi.n	8004d60 <UART_SetConfig+0x300>
 8004d04:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <UART_SetConfig+0x2ac>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d2d 	.word	0x08004d2d
 8004d10:	08004d35 	.word	0x08004d35
 8004d14:	08004d61 	.word	0x08004d61
 8004d18:	08004d3b 	.word	0x08004d3b
 8004d1c:	08004d61 	.word	0x08004d61
 8004d20:	08004d61 	.word	0x08004d61
 8004d24:	08004d61 	.word	0x08004d61
 8004d28:	08004d43 	.word	0x08004d43
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d2c:	f7fe fa34 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 8004d30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d32:	e01b      	b.n	8004d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d34:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <UART_SetConfig+0x2f8>)
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d38:	e018      	b.n	8004d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d3a:	f7fe f997 	bl	800306c <HAL_RCC_GetSysClockFreq>
 8004d3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d40:	e014      	b.n	8004d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d48:	e010      	b.n	8004d6c <UART_SetConfig+0x30c>
 8004d4a:	bf00      	nop
 8004d4c:	cfff69f3 	.word	0xcfff69f3
 8004d50:	40008000 	.word	0x40008000
 8004d54:	40013800 	.word	0x40013800
 8004d58:	00f42400 	.word	0x00f42400
 8004d5c:	08009598 	.word	0x08009598
      default:
        pclk = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 8084 	beq.w	8004e7c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	4a4b      	ldr	r2, [pc, #300]	; (8004ea8 <UART_SetConfig+0x448>)
 8004d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d86:	005a      	lsls	r2, r3, #1
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	085b      	lsrs	r3, r3, #1
 8004d8e:	441a      	add	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	2b0f      	cmp	r3, #15
 8004d9e:	d916      	bls.n	8004dce <UART_SetConfig+0x36e>
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da6:	d212      	bcs.n	8004dce <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	f023 030f 	bic.w	r3, r3, #15
 8004db0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	085b      	lsrs	r3, r3, #1
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	8bfb      	ldrh	r3, [r7, #30]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	8bfa      	ldrh	r2, [r7, #30]
 8004dca:	60da      	str	r2, [r3, #12]
 8004dcc:	e056      	b.n	8004e7c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004dd4:	e052      	b.n	8004e7c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	2b07      	cmp	r3, #7
 8004dde:	d822      	bhi.n	8004e26 <UART_SetConfig+0x3c6>
 8004de0:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <UART_SetConfig+0x388>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004e09 	.word	0x08004e09
 8004dec:	08004e11 	.word	0x08004e11
 8004df0:	08004e27 	.word	0x08004e27
 8004df4:	08004e17 	.word	0x08004e17
 8004df8:	08004e27 	.word	0x08004e27
 8004dfc:	08004e27 	.word	0x08004e27
 8004e00:	08004e27 	.word	0x08004e27
 8004e04:	08004e1f 	.word	0x08004e1f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e08:	f7fe f9c6 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 8004e0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e0e:	e010      	b.n	8004e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e10:	4b26      	ldr	r3, [pc, #152]	; (8004eac <UART_SetConfig+0x44c>)
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e14:	e00d      	b.n	8004e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e16:	f7fe f929 	bl	800306c <HAL_RCC_GetSysClockFreq>
 8004e1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e1c:	e009      	b.n	8004e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e24:	e005      	b.n	8004e32 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e30:	bf00      	nop
    }

    if (pclk != 0U)
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d021      	beq.n	8004e7c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ea8 <UART_SetConfig+0x448>)
 8004e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e42:	461a      	mov	r2, r3
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	085b      	lsrs	r3, r3, #1
 8004e50:	441a      	add	r2, r3
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	2b0f      	cmp	r3, #15
 8004e60:	d909      	bls.n	8004e76 <UART_SetConfig+0x416>
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e68:	d205      	bcs.n	8004e76 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60da      	str	r2, [r3, #12]
 8004e74:	e002      	b.n	8004e7c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2200      	movs	r2, #0
 8004e96:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e98:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3730      	adds	r7, #48	; 0x30
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea6:	bf00      	nop
 8004ea8:	08009598 	.word	0x08009598
 8004eac:	00f42400 	.word	0x00f42400

08004eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01a      	beq.n	8004fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fae:	d10a      	bne.n	8004fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  }
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b098      	sub	sp, #96	; 0x60
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005004:	f7fc fa6e 	bl	80014e4 <HAL_GetTick>
 8005008:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b08      	cmp	r3, #8
 8005016:	d12f      	bne.n	8005078 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005020:	2200      	movs	r2, #0
 8005022:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f88e 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d022      	beq.n	8005078 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005046:	653b      	str	r3, [r7, #80]	; 0x50
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005050:	647b      	str	r3, [r7, #68]	; 0x44
 8005052:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800505e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e6      	bne.n	8005032 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2220      	movs	r2, #32
 8005068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e063      	b.n	8005140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b04      	cmp	r3, #4
 8005084:	d149      	bne.n	800511a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005086:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800508e:	2200      	movs	r2, #0
 8005090:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f857 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d03c      	beq.n	800511a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	623b      	str	r3, [r7, #32]
   return(result);
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050be:	633b      	str	r3, [r7, #48]	; 0x30
 80050c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e6      	bne.n	80050a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3308      	adds	r3, #8
 80050d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3308      	adds	r3, #8
 80050f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050f2:	61fa      	str	r2, [r7, #28]
 80050f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	69b9      	ldr	r1, [r7, #24]
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e5      	bne.n	80050d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e012      	b.n	8005140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3758      	adds	r7, #88	; 0x58
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	4613      	mov	r3, r2
 8005156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005158:	e04f      	b.n	80051fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005160:	d04b      	beq.n	80051fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005162:	f7fc f9bf 	bl	80014e4 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	429a      	cmp	r2, r3
 8005170:	d302      	bcc.n	8005178 <UART_WaitOnFlagUntilTimeout+0x30>
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e04e      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d037      	beq.n	80051fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b80      	cmp	r3, #128	; 0x80
 800518e:	d034      	beq.n	80051fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b40      	cmp	r3, #64	; 0x40
 8005194:	d031      	beq.n	80051fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d110      	bne.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2208      	movs	r2, #8
 80051aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f838 	bl	8005222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2208      	movs	r2, #8
 80051b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e029      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d4:	d111      	bne.n	80051fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f81e 	bl	8005222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e00f      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4013      	ands	r3, r2
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	429a      	cmp	r2, r3
 8005208:	bf0c      	ite	eq
 800520a:	2301      	moveq	r3, #1
 800520c:	2300      	movne	r3, #0
 800520e:	b2db      	uxtb	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	429a      	cmp	r2, r3
 8005216:	d0a0      	beq.n	800515a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005222:	b480      	push	{r7}
 8005224:	b095      	sub	sp, #84	; 0x54
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800523e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005248:	643b      	str	r3, [r7, #64]	; 0x40
 800524a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800524e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e6      	bne.n	800522a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3308      	adds	r3, #8
 8005262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	61fb      	str	r3, [r7, #28]
   return(result);
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	64bb      	str	r3, [r7, #72]	; 0x48
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3308      	adds	r3, #8
 800527e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005280:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e3      	bne.n	800525c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005298:	2b01      	cmp	r3, #1
 800529a:	d118      	bne.n	80052ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f023 0310 	bic.w	r3, r3, #16
 80052b0:	647b      	str	r3, [r7, #68]	; 0x44
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6979      	ldr	r1, [r7, #20]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	613b      	str	r3, [r7, #16]
   return(result);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e6      	bne.n	800529c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80052e2:	bf00      	nop
 80052e4:	3754      	adds	r7, #84	; 0x54
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_UARTEx_DisableFifoMode+0x16>
 8005300:	2302      	movs	r3, #2
 8005302:	e027      	b.n	8005354 <HAL_UARTEx_DisableFifoMode+0x66>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2224      	movs	r2, #36	; 0x24
 8005310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0201 	bic.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005332:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005374:	2302      	movs	r3, #2
 8005376:	e02d      	b.n	80053d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2224      	movs	r2, #36	; 0x24
 8005384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0201 	bic.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f84f 	bl	8005458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e02d      	b.n	8005450 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2224      	movs	r2, #36	; 0x24
 8005400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f811 	bl	8005458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005464:	2b00      	cmp	r3, #0
 8005466:	d108      	bne.n	800547a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005478:	e031      	b.n	80054de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800547a:	2308      	movs	r3, #8
 800547c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800547e:	2308      	movs	r3, #8
 8005480:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	0e5b      	lsrs	r3, r3, #25
 800548a:	b2db      	uxtb	r3, r3
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	0f5b      	lsrs	r3, r3, #29
 800549a:	b2db      	uxtb	r3, r3
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054a2:	7bbb      	ldrb	r3, [r7, #14]
 80054a4:	7b3a      	ldrb	r2, [r7, #12]
 80054a6:	4911      	ldr	r1, [pc, #68]	; (80054ec <UARTEx_SetNbDataToProcess+0x94>)
 80054a8:	5c8a      	ldrb	r2, [r1, r2]
 80054aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054ae:	7b3a      	ldrb	r2, [r7, #12]
 80054b0:	490f      	ldr	r1, [pc, #60]	; (80054f0 <UARTEx_SetNbDataToProcess+0x98>)
 80054b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	7b7a      	ldrb	r2, [r7, #13]
 80054c4:	4909      	ldr	r1, [pc, #36]	; (80054ec <UARTEx_SetNbDataToProcess+0x94>)
 80054c6:	5c8a      	ldrb	r2, [r1, r2]
 80054c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80054cc:	7b7a      	ldrb	r2, [r7, #13]
 80054ce:	4908      	ldr	r1, [pc, #32]	; (80054f0 <UARTEx_SetNbDataToProcess+0x98>)
 80054d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80054de:	bf00      	nop
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	080095b0 	.word	0x080095b0
 80054f0:	080095b8 	.word	0x080095b8

080054f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80054fc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005500:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	b29b      	uxth	r3, r3
 800550e:	43db      	mvns	r3, r3
 8005510:	b29b      	uxth	r3, r3
 8005512:	4013      	ands	r3, r2
 8005514:	b29a      	uxth	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	1d3b      	adds	r3, r7, #4
 8005534:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2201      	movs	r2, #1
 800553c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
	...

08005568 <sniprintf>:
 8005568:	b40c      	push	{r2, r3}
 800556a:	b530      	push	{r4, r5, lr}
 800556c:	4b17      	ldr	r3, [pc, #92]	; (80055cc <sniprintf+0x64>)
 800556e:	1e0c      	subs	r4, r1, #0
 8005570:	681d      	ldr	r5, [r3, #0]
 8005572:	b09d      	sub	sp, #116	; 0x74
 8005574:	da08      	bge.n	8005588 <sniprintf+0x20>
 8005576:	238b      	movs	r3, #139	; 0x8b
 8005578:	602b      	str	r3, [r5, #0]
 800557a:	f04f 30ff 	mov.w	r0, #4294967295
 800557e:	b01d      	add	sp, #116	; 0x74
 8005580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005584:	b002      	add	sp, #8
 8005586:	4770      	bx	lr
 8005588:	f44f 7302 	mov.w	r3, #520	; 0x208
 800558c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005590:	bf14      	ite	ne
 8005592:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005596:	4623      	moveq	r3, r4
 8005598:	9304      	str	r3, [sp, #16]
 800559a:	9307      	str	r3, [sp, #28]
 800559c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055a0:	9002      	str	r0, [sp, #8]
 80055a2:	9006      	str	r0, [sp, #24]
 80055a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80055a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80055aa:	ab21      	add	r3, sp, #132	; 0x84
 80055ac:	a902      	add	r1, sp, #8
 80055ae:	4628      	mov	r0, r5
 80055b0:	9301      	str	r3, [sp, #4]
 80055b2:	f000 f9c1 	bl	8005938 <_svfiprintf_r>
 80055b6:	1c43      	adds	r3, r0, #1
 80055b8:	bfbc      	itt	lt
 80055ba:	238b      	movlt	r3, #139	; 0x8b
 80055bc:	602b      	strlt	r3, [r5, #0]
 80055be:	2c00      	cmp	r4, #0
 80055c0:	d0dd      	beq.n	800557e <sniprintf+0x16>
 80055c2:	9b02      	ldr	r3, [sp, #8]
 80055c4:	2200      	movs	r2, #0
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	e7d9      	b.n	800557e <sniprintf+0x16>
 80055ca:	bf00      	nop
 80055cc:	200001e0 	.word	0x200001e0

080055d0 <siprintf>:
 80055d0:	b40e      	push	{r1, r2, r3}
 80055d2:	b500      	push	{lr}
 80055d4:	b09c      	sub	sp, #112	; 0x70
 80055d6:	ab1d      	add	r3, sp, #116	; 0x74
 80055d8:	9002      	str	r0, [sp, #8]
 80055da:	9006      	str	r0, [sp, #24]
 80055dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055e0:	4809      	ldr	r0, [pc, #36]	; (8005608 <siprintf+0x38>)
 80055e2:	9107      	str	r1, [sp, #28]
 80055e4:	9104      	str	r1, [sp, #16]
 80055e6:	4909      	ldr	r1, [pc, #36]	; (800560c <siprintf+0x3c>)
 80055e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ec:	9105      	str	r1, [sp, #20]
 80055ee:	6800      	ldr	r0, [r0, #0]
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	a902      	add	r1, sp, #8
 80055f4:	f000 f9a0 	bl	8005938 <_svfiprintf_r>
 80055f8:	9b02      	ldr	r3, [sp, #8]
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	b01c      	add	sp, #112	; 0x70
 8005600:	f85d eb04 	ldr.w	lr, [sp], #4
 8005604:	b003      	add	sp, #12
 8005606:	4770      	bx	lr
 8005608:	200001e0 	.word	0x200001e0
 800560c:	ffff0208 	.word	0xffff0208

08005610 <memset>:
 8005610:	4402      	add	r2, r0
 8005612:	4603      	mov	r3, r0
 8005614:	4293      	cmp	r3, r2
 8005616:	d100      	bne.n	800561a <memset+0xa>
 8005618:	4770      	bx	lr
 800561a:	f803 1b01 	strb.w	r1, [r3], #1
 800561e:	e7f9      	b.n	8005614 <memset+0x4>

08005620 <__errno>:
 8005620:	4b01      	ldr	r3, [pc, #4]	; (8005628 <__errno+0x8>)
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	200001e0 	.word	0x200001e0

0800562c <__libc_init_array>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	4d0d      	ldr	r5, [pc, #52]	; (8005664 <__libc_init_array+0x38>)
 8005630:	4c0d      	ldr	r4, [pc, #52]	; (8005668 <__libc_init_array+0x3c>)
 8005632:	1b64      	subs	r4, r4, r5
 8005634:	10a4      	asrs	r4, r4, #2
 8005636:	2600      	movs	r6, #0
 8005638:	42a6      	cmp	r6, r4
 800563a:	d109      	bne.n	8005650 <__libc_init_array+0x24>
 800563c:	4d0b      	ldr	r5, [pc, #44]	; (800566c <__libc_init_array+0x40>)
 800563e:	4c0c      	ldr	r4, [pc, #48]	; (8005670 <__libc_init_array+0x44>)
 8005640:	f000 fc6a 	bl	8005f18 <_init>
 8005644:	1b64      	subs	r4, r4, r5
 8005646:	10a4      	asrs	r4, r4, #2
 8005648:	2600      	movs	r6, #0
 800564a:	42a6      	cmp	r6, r4
 800564c:	d105      	bne.n	800565a <__libc_init_array+0x2e>
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f855 3b04 	ldr.w	r3, [r5], #4
 8005654:	4798      	blx	r3
 8005656:	3601      	adds	r6, #1
 8005658:	e7ee      	b.n	8005638 <__libc_init_array+0xc>
 800565a:	f855 3b04 	ldr.w	r3, [r5], #4
 800565e:	4798      	blx	r3
 8005660:	3601      	adds	r6, #1
 8005662:	e7f2      	b.n	800564a <__libc_init_array+0x1e>
 8005664:	080095fc 	.word	0x080095fc
 8005668:	080095fc 	.word	0x080095fc
 800566c:	080095fc 	.word	0x080095fc
 8005670:	08009600 	.word	0x08009600

08005674 <__retarget_lock_acquire_recursive>:
 8005674:	4770      	bx	lr

08005676 <__retarget_lock_release_recursive>:
 8005676:	4770      	bx	lr

08005678 <memcpy>:
 8005678:	440a      	add	r2, r1
 800567a:	4291      	cmp	r1, r2
 800567c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005680:	d100      	bne.n	8005684 <memcpy+0xc>
 8005682:	4770      	bx	lr
 8005684:	b510      	push	{r4, lr}
 8005686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800568a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800568e:	4291      	cmp	r1, r2
 8005690:	d1f9      	bne.n	8005686 <memcpy+0xe>
 8005692:	bd10      	pop	{r4, pc}

08005694 <_free_r>:
 8005694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005696:	2900      	cmp	r1, #0
 8005698:	d044      	beq.n	8005724 <_free_r+0x90>
 800569a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800569e:	9001      	str	r0, [sp, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f1a1 0404 	sub.w	r4, r1, #4
 80056a6:	bfb8      	it	lt
 80056a8:	18e4      	addlt	r4, r4, r3
 80056aa:	f000 f8df 	bl	800586c <__malloc_lock>
 80056ae:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <_free_r+0x94>)
 80056b0:	9801      	ldr	r0, [sp, #4]
 80056b2:	6813      	ldr	r3, [r2, #0]
 80056b4:	b933      	cbnz	r3, 80056c4 <_free_r+0x30>
 80056b6:	6063      	str	r3, [r4, #4]
 80056b8:	6014      	str	r4, [r2, #0]
 80056ba:	b003      	add	sp, #12
 80056bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056c0:	f000 b8da 	b.w	8005878 <__malloc_unlock>
 80056c4:	42a3      	cmp	r3, r4
 80056c6:	d908      	bls.n	80056da <_free_r+0x46>
 80056c8:	6825      	ldr	r5, [r4, #0]
 80056ca:	1961      	adds	r1, r4, r5
 80056cc:	428b      	cmp	r3, r1
 80056ce:	bf01      	itttt	eq
 80056d0:	6819      	ldreq	r1, [r3, #0]
 80056d2:	685b      	ldreq	r3, [r3, #4]
 80056d4:	1949      	addeq	r1, r1, r5
 80056d6:	6021      	streq	r1, [r4, #0]
 80056d8:	e7ed      	b.n	80056b6 <_free_r+0x22>
 80056da:	461a      	mov	r2, r3
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	b10b      	cbz	r3, 80056e4 <_free_r+0x50>
 80056e0:	42a3      	cmp	r3, r4
 80056e2:	d9fa      	bls.n	80056da <_free_r+0x46>
 80056e4:	6811      	ldr	r1, [r2, #0]
 80056e6:	1855      	adds	r5, r2, r1
 80056e8:	42a5      	cmp	r5, r4
 80056ea:	d10b      	bne.n	8005704 <_free_r+0x70>
 80056ec:	6824      	ldr	r4, [r4, #0]
 80056ee:	4421      	add	r1, r4
 80056f0:	1854      	adds	r4, r2, r1
 80056f2:	42a3      	cmp	r3, r4
 80056f4:	6011      	str	r1, [r2, #0]
 80056f6:	d1e0      	bne.n	80056ba <_free_r+0x26>
 80056f8:	681c      	ldr	r4, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	6053      	str	r3, [r2, #4]
 80056fe:	440c      	add	r4, r1
 8005700:	6014      	str	r4, [r2, #0]
 8005702:	e7da      	b.n	80056ba <_free_r+0x26>
 8005704:	d902      	bls.n	800570c <_free_r+0x78>
 8005706:	230c      	movs	r3, #12
 8005708:	6003      	str	r3, [r0, #0]
 800570a:	e7d6      	b.n	80056ba <_free_r+0x26>
 800570c:	6825      	ldr	r5, [r4, #0]
 800570e:	1961      	adds	r1, r4, r5
 8005710:	428b      	cmp	r3, r1
 8005712:	bf04      	itt	eq
 8005714:	6819      	ldreq	r1, [r3, #0]
 8005716:	685b      	ldreq	r3, [r3, #4]
 8005718:	6063      	str	r3, [r4, #4]
 800571a:	bf04      	itt	eq
 800571c:	1949      	addeq	r1, r1, r5
 800571e:	6021      	streq	r1, [r4, #0]
 8005720:	6054      	str	r4, [r2, #4]
 8005722:	e7ca      	b.n	80056ba <_free_r+0x26>
 8005724:	b003      	add	sp, #12
 8005726:	bd30      	pop	{r4, r5, pc}
 8005728:	200041a4 	.word	0x200041a4

0800572c <sbrk_aligned>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	4e0e      	ldr	r6, [pc, #56]	; (8005768 <sbrk_aligned+0x3c>)
 8005730:	460c      	mov	r4, r1
 8005732:	6831      	ldr	r1, [r6, #0]
 8005734:	4605      	mov	r5, r0
 8005736:	b911      	cbnz	r1, 800573e <sbrk_aligned+0x12>
 8005738:	f000 fba6 	bl	8005e88 <_sbrk_r>
 800573c:	6030      	str	r0, [r6, #0]
 800573e:	4621      	mov	r1, r4
 8005740:	4628      	mov	r0, r5
 8005742:	f000 fba1 	bl	8005e88 <_sbrk_r>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	d00a      	beq.n	8005760 <sbrk_aligned+0x34>
 800574a:	1cc4      	adds	r4, r0, #3
 800574c:	f024 0403 	bic.w	r4, r4, #3
 8005750:	42a0      	cmp	r0, r4
 8005752:	d007      	beq.n	8005764 <sbrk_aligned+0x38>
 8005754:	1a21      	subs	r1, r4, r0
 8005756:	4628      	mov	r0, r5
 8005758:	f000 fb96 	bl	8005e88 <_sbrk_r>
 800575c:	3001      	adds	r0, #1
 800575e:	d101      	bne.n	8005764 <sbrk_aligned+0x38>
 8005760:	f04f 34ff 	mov.w	r4, #4294967295
 8005764:	4620      	mov	r0, r4
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	200041a8 	.word	0x200041a8

0800576c <_malloc_r>:
 800576c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005770:	1ccd      	adds	r5, r1, #3
 8005772:	f025 0503 	bic.w	r5, r5, #3
 8005776:	3508      	adds	r5, #8
 8005778:	2d0c      	cmp	r5, #12
 800577a:	bf38      	it	cc
 800577c:	250c      	movcc	r5, #12
 800577e:	2d00      	cmp	r5, #0
 8005780:	4607      	mov	r7, r0
 8005782:	db01      	blt.n	8005788 <_malloc_r+0x1c>
 8005784:	42a9      	cmp	r1, r5
 8005786:	d905      	bls.n	8005794 <_malloc_r+0x28>
 8005788:	230c      	movs	r3, #12
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	2600      	movs	r6, #0
 800578e:	4630      	mov	r0, r6
 8005790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005794:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005868 <_malloc_r+0xfc>
 8005798:	f000 f868 	bl	800586c <__malloc_lock>
 800579c:	f8d8 3000 	ldr.w	r3, [r8]
 80057a0:	461c      	mov	r4, r3
 80057a2:	bb5c      	cbnz	r4, 80057fc <_malloc_r+0x90>
 80057a4:	4629      	mov	r1, r5
 80057a6:	4638      	mov	r0, r7
 80057a8:	f7ff ffc0 	bl	800572c <sbrk_aligned>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	4604      	mov	r4, r0
 80057b0:	d155      	bne.n	800585e <_malloc_r+0xf2>
 80057b2:	f8d8 4000 	ldr.w	r4, [r8]
 80057b6:	4626      	mov	r6, r4
 80057b8:	2e00      	cmp	r6, #0
 80057ba:	d145      	bne.n	8005848 <_malloc_r+0xdc>
 80057bc:	2c00      	cmp	r4, #0
 80057be:	d048      	beq.n	8005852 <_malloc_r+0xe6>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	4631      	mov	r1, r6
 80057c4:	4638      	mov	r0, r7
 80057c6:	eb04 0903 	add.w	r9, r4, r3
 80057ca:	f000 fb5d 	bl	8005e88 <_sbrk_r>
 80057ce:	4581      	cmp	r9, r0
 80057d0:	d13f      	bne.n	8005852 <_malloc_r+0xe6>
 80057d2:	6821      	ldr	r1, [r4, #0]
 80057d4:	1a6d      	subs	r5, r5, r1
 80057d6:	4629      	mov	r1, r5
 80057d8:	4638      	mov	r0, r7
 80057da:	f7ff ffa7 	bl	800572c <sbrk_aligned>
 80057de:	3001      	adds	r0, #1
 80057e0:	d037      	beq.n	8005852 <_malloc_r+0xe6>
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	442b      	add	r3, r5
 80057e6:	6023      	str	r3, [r4, #0]
 80057e8:	f8d8 3000 	ldr.w	r3, [r8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d038      	beq.n	8005862 <_malloc_r+0xf6>
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	42a2      	cmp	r2, r4
 80057f4:	d12b      	bne.n	800584e <_malloc_r+0xe2>
 80057f6:	2200      	movs	r2, #0
 80057f8:	605a      	str	r2, [r3, #4]
 80057fa:	e00f      	b.n	800581c <_malloc_r+0xb0>
 80057fc:	6822      	ldr	r2, [r4, #0]
 80057fe:	1b52      	subs	r2, r2, r5
 8005800:	d41f      	bmi.n	8005842 <_malloc_r+0xd6>
 8005802:	2a0b      	cmp	r2, #11
 8005804:	d917      	bls.n	8005836 <_malloc_r+0xca>
 8005806:	1961      	adds	r1, r4, r5
 8005808:	42a3      	cmp	r3, r4
 800580a:	6025      	str	r5, [r4, #0]
 800580c:	bf18      	it	ne
 800580e:	6059      	strne	r1, [r3, #4]
 8005810:	6863      	ldr	r3, [r4, #4]
 8005812:	bf08      	it	eq
 8005814:	f8c8 1000 	streq.w	r1, [r8]
 8005818:	5162      	str	r2, [r4, r5]
 800581a:	604b      	str	r3, [r1, #4]
 800581c:	4638      	mov	r0, r7
 800581e:	f104 060b 	add.w	r6, r4, #11
 8005822:	f000 f829 	bl	8005878 <__malloc_unlock>
 8005826:	f026 0607 	bic.w	r6, r6, #7
 800582a:	1d23      	adds	r3, r4, #4
 800582c:	1af2      	subs	r2, r6, r3
 800582e:	d0ae      	beq.n	800578e <_malloc_r+0x22>
 8005830:	1b9b      	subs	r3, r3, r6
 8005832:	50a3      	str	r3, [r4, r2]
 8005834:	e7ab      	b.n	800578e <_malloc_r+0x22>
 8005836:	42a3      	cmp	r3, r4
 8005838:	6862      	ldr	r2, [r4, #4]
 800583a:	d1dd      	bne.n	80057f8 <_malloc_r+0x8c>
 800583c:	f8c8 2000 	str.w	r2, [r8]
 8005840:	e7ec      	b.n	800581c <_malloc_r+0xb0>
 8005842:	4623      	mov	r3, r4
 8005844:	6864      	ldr	r4, [r4, #4]
 8005846:	e7ac      	b.n	80057a2 <_malloc_r+0x36>
 8005848:	4634      	mov	r4, r6
 800584a:	6876      	ldr	r6, [r6, #4]
 800584c:	e7b4      	b.n	80057b8 <_malloc_r+0x4c>
 800584e:	4613      	mov	r3, r2
 8005850:	e7cc      	b.n	80057ec <_malloc_r+0x80>
 8005852:	230c      	movs	r3, #12
 8005854:	603b      	str	r3, [r7, #0]
 8005856:	4638      	mov	r0, r7
 8005858:	f000 f80e 	bl	8005878 <__malloc_unlock>
 800585c:	e797      	b.n	800578e <_malloc_r+0x22>
 800585e:	6025      	str	r5, [r4, #0]
 8005860:	e7dc      	b.n	800581c <_malloc_r+0xb0>
 8005862:	605b      	str	r3, [r3, #4]
 8005864:	deff      	udf	#255	; 0xff
 8005866:	bf00      	nop
 8005868:	200041a4 	.word	0x200041a4

0800586c <__malloc_lock>:
 800586c:	4801      	ldr	r0, [pc, #4]	; (8005874 <__malloc_lock+0x8>)
 800586e:	f7ff bf01 	b.w	8005674 <__retarget_lock_acquire_recursive>
 8005872:	bf00      	nop
 8005874:	200041a0 	.word	0x200041a0

08005878 <__malloc_unlock>:
 8005878:	4801      	ldr	r0, [pc, #4]	; (8005880 <__malloc_unlock+0x8>)
 800587a:	f7ff befc 	b.w	8005676 <__retarget_lock_release_recursive>
 800587e:	bf00      	nop
 8005880:	200041a0 	.word	0x200041a0

08005884 <__ssputs_r>:
 8005884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005888:	688e      	ldr	r6, [r1, #8]
 800588a:	461f      	mov	r7, r3
 800588c:	42be      	cmp	r6, r7
 800588e:	680b      	ldr	r3, [r1, #0]
 8005890:	4682      	mov	sl, r0
 8005892:	460c      	mov	r4, r1
 8005894:	4690      	mov	r8, r2
 8005896:	d82c      	bhi.n	80058f2 <__ssputs_r+0x6e>
 8005898:	898a      	ldrh	r2, [r1, #12]
 800589a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800589e:	d026      	beq.n	80058ee <__ssputs_r+0x6a>
 80058a0:	6965      	ldr	r5, [r4, #20]
 80058a2:	6909      	ldr	r1, [r1, #16]
 80058a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058a8:	eba3 0901 	sub.w	r9, r3, r1
 80058ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058b0:	1c7b      	adds	r3, r7, #1
 80058b2:	444b      	add	r3, r9
 80058b4:	106d      	asrs	r5, r5, #1
 80058b6:	429d      	cmp	r5, r3
 80058b8:	bf38      	it	cc
 80058ba:	461d      	movcc	r5, r3
 80058bc:	0553      	lsls	r3, r2, #21
 80058be:	d527      	bpl.n	8005910 <__ssputs_r+0x8c>
 80058c0:	4629      	mov	r1, r5
 80058c2:	f7ff ff53 	bl	800576c <_malloc_r>
 80058c6:	4606      	mov	r6, r0
 80058c8:	b360      	cbz	r0, 8005924 <__ssputs_r+0xa0>
 80058ca:	6921      	ldr	r1, [r4, #16]
 80058cc:	464a      	mov	r2, r9
 80058ce:	f7ff fed3 	bl	8005678 <memcpy>
 80058d2:	89a3      	ldrh	r3, [r4, #12]
 80058d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058dc:	81a3      	strh	r3, [r4, #12]
 80058de:	6126      	str	r6, [r4, #16]
 80058e0:	6165      	str	r5, [r4, #20]
 80058e2:	444e      	add	r6, r9
 80058e4:	eba5 0509 	sub.w	r5, r5, r9
 80058e8:	6026      	str	r6, [r4, #0]
 80058ea:	60a5      	str	r5, [r4, #8]
 80058ec:	463e      	mov	r6, r7
 80058ee:	42be      	cmp	r6, r7
 80058f0:	d900      	bls.n	80058f4 <__ssputs_r+0x70>
 80058f2:	463e      	mov	r6, r7
 80058f4:	6820      	ldr	r0, [r4, #0]
 80058f6:	4632      	mov	r2, r6
 80058f8:	4641      	mov	r1, r8
 80058fa:	f000 faab 	bl	8005e54 <memmove>
 80058fe:	68a3      	ldr	r3, [r4, #8]
 8005900:	1b9b      	subs	r3, r3, r6
 8005902:	60a3      	str	r3, [r4, #8]
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	4433      	add	r3, r6
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	2000      	movs	r0, #0
 800590c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005910:	462a      	mov	r2, r5
 8005912:	f000 fac9 	bl	8005ea8 <_realloc_r>
 8005916:	4606      	mov	r6, r0
 8005918:	2800      	cmp	r0, #0
 800591a:	d1e0      	bne.n	80058de <__ssputs_r+0x5a>
 800591c:	6921      	ldr	r1, [r4, #16]
 800591e:	4650      	mov	r0, sl
 8005920:	f7ff feb8 	bl	8005694 <_free_r>
 8005924:	230c      	movs	r3, #12
 8005926:	f8ca 3000 	str.w	r3, [sl]
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005930:	81a3      	strh	r3, [r4, #12]
 8005932:	f04f 30ff 	mov.w	r0, #4294967295
 8005936:	e7e9      	b.n	800590c <__ssputs_r+0x88>

08005938 <_svfiprintf_r>:
 8005938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593c:	4698      	mov	r8, r3
 800593e:	898b      	ldrh	r3, [r1, #12]
 8005940:	061b      	lsls	r3, r3, #24
 8005942:	b09d      	sub	sp, #116	; 0x74
 8005944:	4607      	mov	r7, r0
 8005946:	460d      	mov	r5, r1
 8005948:	4614      	mov	r4, r2
 800594a:	d50e      	bpl.n	800596a <_svfiprintf_r+0x32>
 800594c:	690b      	ldr	r3, [r1, #16]
 800594e:	b963      	cbnz	r3, 800596a <_svfiprintf_r+0x32>
 8005950:	2140      	movs	r1, #64	; 0x40
 8005952:	f7ff ff0b 	bl	800576c <_malloc_r>
 8005956:	6028      	str	r0, [r5, #0]
 8005958:	6128      	str	r0, [r5, #16]
 800595a:	b920      	cbnz	r0, 8005966 <_svfiprintf_r+0x2e>
 800595c:	230c      	movs	r3, #12
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	f04f 30ff 	mov.w	r0, #4294967295
 8005964:	e0d0      	b.n	8005b08 <_svfiprintf_r+0x1d0>
 8005966:	2340      	movs	r3, #64	; 0x40
 8005968:	616b      	str	r3, [r5, #20]
 800596a:	2300      	movs	r3, #0
 800596c:	9309      	str	r3, [sp, #36]	; 0x24
 800596e:	2320      	movs	r3, #32
 8005970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005974:	f8cd 800c 	str.w	r8, [sp, #12]
 8005978:	2330      	movs	r3, #48	; 0x30
 800597a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b20 <_svfiprintf_r+0x1e8>
 800597e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005982:	f04f 0901 	mov.w	r9, #1
 8005986:	4623      	mov	r3, r4
 8005988:	469a      	mov	sl, r3
 800598a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800598e:	b10a      	cbz	r2, 8005994 <_svfiprintf_r+0x5c>
 8005990:	2a25      	cmp	r2, #37	; 0x25
 8005992:	d1f9      	bne.n	8005988 <_svfiprintf_r+0x50>
 8005994:	ebba 0b04 	subs.w	fp, sl, r4
 8005998:	d00b      	beq.n	80059b2 <_svfiprintf_r+0x7a>
 800599a:	465b      	mov	r3, fp
 800599c:	4622      	mov	r2, r4
 800599e:	4629      	mov	r1, r5
 80059a0:	4638      	mov	r0, r7
 80059a2:	f7ff ff6f 	bl	8005884 <__ssputs_r>
 80059a6:	3001      	adds	r0, #1
 80059a8:	f000 80a9 	beq.w	8005afe <_svfiprintf_r+0x1c6>
 80059ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059ae:	445a      	add	r2, fp
 80059b0:	9209      	str	r2, [sp, #36]	; 0x24
 80059b2:	f89a 3000 	ldrb.w	r3, [sl]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 80a1 	beq.w	8005afe <_svfiprintf_r+0x1c6>
 80059bc:	2300      	movs	r3, #0
 80059be:	f04f 32ff 	mov.w	r2, #4294967295
 80059c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059c6:	f10a 0a01 	add.w	sl, sl, #1
 80059ca:	9304      	str	r3, [sp, #16]
 80059cc:	9307      	str	r3, [sp, #28]
 80059ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059d2:	931a      	str	r3, [sp, #104]	; 0x68
 80059d4:	4654      	mov	r4, sl
 80059d6:	2205      	movs	r2, #5
 80059d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059dc:	4850      	ldr	r0, [pc, #320]	; (8005b20 <_svfiprintf_r+0x1e8>)
 80059de:	f7fa fbcf 	bl	8000180 <memchr>
 80059e2:	9a04      	ldr	r2, [sp, #16]
 80059e4:	b9d8      	cbnz	r0, 8005a1e <_svfiprintf_r+0xe6>
 80059e6:	06d0      	lsls	r0, r2, #27
 80059e8:	bf44      	itt	mi
 80059ea:	2320      	movmi	r3, #32
 80059ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059f0:	0711      	lsls	r1, r2, #28
 80059f2:	bf44      	itt	mi
 80059f4:	232b      	movmi	r3, #43	; 0x2b
 80059f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059fa:	f89a 3000 	ldrb.w	r3, [sl]
 80059fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005a00:	d015      	beq.n	8005a2e <_svfiprintf_r+0xf6>
 8005a02:	9a07      	ldr	r2, [sp, #28]
 8005a04:	4654      	mov	r4, sl
 8005a06:	2000      	movs	r0, #0
 8005a08:	f04f 0c0a 	mov.w	ip, #10
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a12:	3b30      	subs	r3, #48	; 0x30
 8005a14:	2b09      	cmp	r3, #9
 8005a16:	d94d      	bls.n	8005ab4 <_svfiprintf_r+0x17c>
 8005a18:	b1b0      	cbz	r0, 8005a48 <_svfiprintf_r+0x110>
 8005a1a:	9207      	str	r2, [sp, #28]
 8005a1c:	e014      	b.n	8005a48 <_svfiprintf_r+0x110>
 8005a1e:	eba0 0308 	sub.w	r3, r0, r8
 8005a22:	fa09 f303 	lsl.w	r3, r9, r3
 8005a26:	4313      	orrs	r3, r2
 8005a28:	9304      	str	r3, [sp, #16]
 8005a2a:	46a2      	mov	sl, r4
 8005a2c:	e7d2      	b.n	80059d4 <_svfiprintf_r+0x9c>
 8005a2e:	9b03      	ldr	r3, [sp, #12]
 8005a30:	1d19      	adds	r1, r3, #4
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	9103      	str	r1, [sp, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	bfbb      	ittet	lt
 8005a3a:	425b      	neglt	r3, r3
 8005a3c:	f042 0202 	orrlt.w	r2, r2, #2
 8005a40:	9307      	strge	r3, [sp, #28]
 8005a42:	9307      	strlt	r3, [sp, #28]
 8005a44:	bfb8      	it	lt
 8005a46:	9204      	strlt	r2, [sp, #16]
 8005a48:	7823      	ldrb	r3, [r4, #0]
 8005a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a4c:	d10c      	bne.n	8005a68 <_svfiprintf_r+0x130>
 8005a4e:	7863      	ldrb	r3, [r4, #1]
 8005a50:	2b2a      	cmp	r3, #42	; 0x2a
 8005a52:	d134      	bne.n	8005abe <_svfiprintf_r+0x186>
 8005a54:	9b03      	ldr	r3, [sp, #12]
 8005a56:	1d1a      	adds	r2, r3, #4
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	9203      	str	r2, [sp, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	bfb8      	it	lt
 8005a60:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a64:	3402      	adds	r4, #2
 8005a66:	9305      	str	r3, [sp, #20]
 8005a68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005b30 <_svfiprintf_r+0x1f8>
 8005a6c:	7821      	ldrb	r1, [r4, #0]
 8005a6e:	2203      	movs	r2, #3
 8005a70:	4650      	mov	r0, sl
 8005a72:	f7fa fb85 	bl	8000180 <memchr>
 8005a76:	b138      	cbz	r0, 8005a88 <_svfiprintf_r+0x150>
 8005a78:	9b04      	ldr	r3, [sp, #16]
 8005a7a:	eba0 000a 	sub.w	r0, r0, sl
 8005a7e:	2240      	movs	r2, #64	; 0x40
 8005a80:	4082      	lsls	r2, r0
 8005a82:	4313      	orrs	r3, r2
 8005a84:	3401      	adds	r4, #1
 8005a86:	9304      	str	r3, [sp, #16]
 8005a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a8c:	4825      	ldr	r0, [pc, #148]	; (8005b24 <_svfiprintf_r+0x1ec>)
 8005a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a92:	2206      	movs	r2, #6
 8005a94:	f7fa fb74 	bl	8000180 <memchr>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d038      	beq.n	8005b0e <_svfiprintf_r+0x1d6>
 8005a9c:	4b22      	ldr	r3, [pc, #136]	; (8005b28 <_svfiprintf_r+0x1f0>)
 8005a9e:	bb1b      	cbnz	r3, 8005ae8 <_svfiprintf_r+0x1b0>
 8005aa0:	9b03      	ldr	r3, [sp, #12]
 8005aa2:	3307      	adds	r3, #7
 8005aa4:	f023 0307 	bic.w	r3, r3, #7
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	9303      	str	r3, [sp, #12]
 8005aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aae:	4433      	add	r3, r6
 8005ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab2:	e768      	b.n	8005986 <_svfiprintf_r+0x4e>
 8005ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ab8:	460c      	mov	r4, r1
 8005aba:	2001      	movs	r0, #1
 8005abc:	e7a6      	b.n	8005a0c <_svfiprintf_r+0xd4>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	3401      	adds	r4, #1
 8005ac2:	9305      	str	r3, [sp, #20]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f04f 0c0a 	mov.w	ip, #10
 8005aca:	4620      	mov	r0, r4
 8005acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ad0:	3a30      	subs	r2, #48	; 0x30
 8005ad2:	2a09      	cmp	r2, #9
 8005ad4:	d903      	bls.n	8005ade <_svfiprintf_r+0x1a6>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0c6      	beq.n	8005a68 <_svfiprintf_r+0x130>
 8005ada:	9105      	str	r1, [sp, #20]
 8005adc:	e7c4      	b.n	8005a68 <_svfiprintf_r+0x130>
 8005ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e7f0      	b.n	8005aca <_svfiprintf_r+0x192>
 8005ae8:	ab03      	add	r3, sp, #12
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	462a      	mov	r2, r5
 8005aee:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <_svfiprintf_r+0x1f4>)
 8005af0:	a904      	add	r1, sp, #16
 8005af2:	4638      	mov	r0, r7
 8005af4:	f3af 8000 	nop.w
 8005af8:	1c42      	adds	r2, r0, #1
 8005afa:	4606      	mov	r6, r0
 8005afc:	d1d6      	bne.n	8005aac <_svfiprintf_r+0x174>
 8005afe:	89ab      	ldrh	r3, [r5, #12]
 8005b00:	065b      	lsls	r3, r3, #25
 8005b02:	f53f af2d 	bmi.w	8005960 <_svfiprintf_r+0x28>
 8005b06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b08:	b01d      	add	sp, #116	; 0x74
 8005b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b0e:	ab03      	add	r3, sp, #12
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	462a      	mov	r2, r5
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <_svfiprintf_r+0x1f4>)
 8005b16:	a904      	add	r1, sp, #16
 8005b18:	4638      	mov	r0, r7
 8005b1a:	f000 f879 	bl	8005c10 <_printf_i>
 8005b1e:	e7eb      	b.n	8005af8 <_svfiprintf_r+0x1c0>
 8005b20:	080095c0 	.word	0x080095c0
 8005b24:	080095ca 	.word	0x080095ca
 8005b28:	00000000 	.word	0x00000000
 8005b2c:	08005885 	.word	0x08005885
 8005b30:	080095c6 	.word	0x080095c6

08005b34 <_printf_common>:
 8005b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b38:	4616      	mov	r6, r2
 8005b3a:	4699      	mov	r9, r3
 8005b3c:	688a      	ldr	r2, [r1, #8]
 8005b3e:	690b      	ldr	r3, [r1, #16]
 8005b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b44:	4293      	cmp	r3, r2
 8005b46:	bfb8      	it	lt
 8005b48:	4613      	movlt	r3, r2
 8005b4a:	6033      	str	r3, [r6, #0]
 8005b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b50:	4607      	mov	r7, r0
 8005b52:	460c      	mov	r4, r1
 8005b54:	b10a      	cbz	r2, 8005b5a <_printf_common+0x26>
 8005b56:	3301      	adds	r3, #1
 8005b58:	6033      	str	r3, [r6, #0]
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	0699      	lsls	r1, r3, #26
 8005b5e:	bf42      	ittt	mi
 8005b60:	6833      	ldrmi	r3, [r6, #0]
 8005b62:	3302      	addmi	r3, #2
 8005b64:	6033      	strmi	r3, [r6, #0]
 8005b66:	6825      	ldr	r5, [r4, #0]
 8005b68:	f015 0506 	ands.w	r5, r5, #6
 8005b6c:	d106      	bne.n	8005b7c <_printf_common+0x48>
 8005b6e:	f104 0a19 	add.w	sl, r4, #25
 8005b72:	68e3      	ldr	r3, [r4, #12]
 8005b74:	6832      	ldr	r2, [r6, #0]
 8005b76:	1a9b      	subs	r3, r3, r2
 8005b78:	42ab      	cmp	r3, r5
 8005b7a:	dc26      	bgt.n	8005bca <_printf_common+0x96>
 8005b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b80:	1e13      	subs	r3, r2, #0
 8005b82:	6822      	ldr	r2, [r4, #0]
 8005b84:	bf18      	it	ne
 8005b86:	2301      	movne	r3, #1
 8005b88:	0692      	lsls	r2, r2, #26
 8005b8a:	d42b      	bmi.n	8005be4 <_printf_common+0xb0>
 8005b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b90:	4649      	mov	r1, r9
 8005b92:	4638      	mov	r0, r7
 8005b94:	47c0      	blx	r8
 8005b96:	3001      	adds	r0, #1
 8005b98:	d01e      	beq.n	8005bd8 <_printf_common+0xa4>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	6922      	ldr	r2, [r4, #16]
 8005b9e:	f003 0306 	and.w	r3, r3, #6
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	bf02      	ittt	eq
 8005ba6:	68e5      	ldreq	r5, [r4, #12]
 8005ba8:	6833      	ldreq	r3, [r6, #0]
 8005baa:	1aed      	subeq	r5, r5, r3
 8005bac:	68a3      	ldr	r3, [r4, #8]
 8005bae:	bf0c      	ite	eq
 8005bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bb4:	2500      	movne	r5, #0
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	bfc4      	itt	gt
 8005bba:	1a9b      	subgt	r3, r3, r2
 8005bbc:	18ed      	addgt	r5, r5, r3
 8005bbe:	2600      	movs	r6, #0
 8005bc0:	341a      	adds	r4, #26
 8005bc2:	42b5      	cmp	r5, r6
 8005bc4:	d11a      	bne.n	8005bfc <_printf_common+0xc8>
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	e008      	b.n	8005bdc <_printf_common+0xa8>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4652      	mov	r2, sl
 8005bce:	4649      	mov	r1, r9
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	47c0      	blx	r8
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d103      	bne.n	8005be0 <_printf_common+0xac>
 8005bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be0:	3501      	adds	r5, #1
 8005be2:	e7c6      	b.n	8005b72 <_printf_common+0x3e>
 8005be4:	18e1      	adds	r1, r4, r3
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	2030      	movs	r0, #48	; 0x30
 8005bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bee:	4422      	add	r2, r4
 8005bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	e7c7      	b.n	8005b8c <_printf_common+0x58>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	4622      	mov	r2, r4
 8005c00:	4649      	mov	r1, r9
 8005c02:	4638      	mov	r0, r7
 8005c04:	47c0      	blx	r8
 8005c06:	3001      	adds	r0, #1
 8005c08:	d0e6      	beq.n	8005bd8 <_printf_common+0xa4>
 8005c0a:	3601      	adds	r6, #1
 8005c0c:	e7d9      	b.n	8005bc2 <_printf_common+0x8e>
	...

08005c10 <_printf_i>:
 8005c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c14:	7e0f      	ldrb	r7, [r1, #24]
 8005c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c18:	2f78      	cmp	r7, #120	; 0x78
 8005c1a:	4691      	mov	r9, r2
 8005c1c:	4680      	mov	r8, r0
 8005c1e:	460c      	mov	r4, r1
 8005c20:	469a      	mov	sl, r3
 8005c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c26:	d807      	bhi.n	8005c38 <_printf_i+0x28>
 8005c28:	2f62      	cmp	r7, #98	; 0x62
 8005c2a:	d80a      	bhi.n	8005c42 <_printf_i+0x32>
 8005c2c:	2f00      	cmp	r7, #0
 8005c2e:	f000 80d4 	beq.w	8005dda <_printf_i+0x1ca>
 8005c32:	2f58      	cmp	r7, #88	; 0x58
 8005c34:	f000 80c0 	beq.w	8005db8 <_printf_i+0x1a8>
 8005c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c40:	e03a      	b.n	8005cb8 <_printf_i+0xa8>
 8005c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c46:	2b15      	cmp	r3, #21
 8005c48:	d8f6      	bhi.n	8005c38 <_printf_i+0x28>
 8005c4a:	a101      	add	r1, pc, #4	; (adr r1, 8005c50 <_printf_i+0x40>)
 8005c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c50:	08005ca9 	.word	0x08005ca9
 8005c54:	08005cbd 	.word	0x08005cbd
 8005c58:	08005c39 	.word	0x08005c39
 8005c5c:	08005c39 	.word	0x08005c39
 8005c60:	08005c39 	.word	0x08005c39
 8005c64:	08005c39 	.word	0x08005c39
 8005c68:	08005cbd 	.word	0x08005cbd
 8005c6c:	08005c39 	.word	0x08005c39
 8005c70:	08005c39 	.word	0x08005c39
 8005c74:	08005c39 	.word	0x08005c39
 8005c78:	08005c39 	.word	0x08005c39
 8005c7c:	08005dc1 	.word	0x08005dc1
 8005c80:	08005ce9 	.word	0x08005ce9
 8005c84:	08005d7b 	.word	0x08005d7b
 8005c88:	08005c39 	.word	0x08005c39
 8005c8c:	08005c39 	.word	0x08005c39
 8005c90:	08005de3 	.word	0x08005de3
 8005c94:	08005c39 	.word	0x08005c39
 8005c98:	08005ce9 	.word	0x08005ce9
 8005c9c:	08005c39 	.word	0x08005c39
 8005ca0:	08005c39 	.word	0x08005c39
 8005ca4:	08005d83 	.word	0x08005d83
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	1d1a      	adds	r2, r3, #4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	602a      	str	r2, [r5, #0]
 8005cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e09f      	b.n	8005dfc <_printf_i+0x1ec>
 8005cbc:	6820      	ldr	r0, [r4, #0]
 8005cbe:	682b      	ldr	r3, [r5, #0]
 8005cc0:	0607      	lsls	r7, r0, #24
 8005cc2:	f103 0104 	add.w	r1, r3, #4
 8005cc6:	6029      	str	r1, [r5, #0]
 8005cc8:	d501      	bpl.n	8005cce <_printf_i+0xbe>
 8005cca:	681e      	ldr	r6, [r3, #0]
 8005ccc:	e003      	b.n	8005cd6 <_printf_i+0xc6>
 8005cce:	0646      	lsls	r6, r0, #25
 8005cd0:	d5fb      	bpl.n	8005cca <_printf_i+0xba>
 8005cd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005cd6:	2e00      	cmp	r6, #0
 8005cd8:	da03      	bge.n	8005ce2 <_printf_i+0xd2>
 8005cda:	232d      	movs	r3, #45	; 0x2d
 8005cdc:	4276      	negs	r6, r6
 8005cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ce2:	485a      	ldr	r0, [pc, #360]	; (8005e4c <_printf_i+0x23c>)
 8005ce4:	230a      	movs	r3, #10
 8005ce6:	e012      	b.n	8005d0e <_printf_i+0xfe>
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	6820      	ldr	r0, [r4, #0]
 8005cec:	1d19      	adds	r1, r3, #4
 8005cee:	6029      	str	r1, [r5, #0]
 8005cf0:	0605      	lsls	r5, r0, #24
 8005cf2:	d501      	bpl.n	8005cf8 <_printf_i+0xe8>
 8005cf4:	681e      	ldr	r6, [r3, #0]
 8005cf6:	e002      	b.n	8005cfe <_printf_i+0xee>
 8005cf8:	0641      	lsls	r1, r0, #25
 8005cfa:	d5fb      	bpl.n	8005cf4 <_printf_i+0xe4>
 8005cfc:	881e      	ldrh	r6, [r3, #0]
 8005cfe:	4853      	ldr	r0, [pc, #332]	; (8005e4c <_printf_i+0x23c>)
 8005d00:	2f6f      	cmp	r7, #111	; 0x6f
 8005d02:	bf0c      	ite	eq
 8005d04:	2308      	moveq	r3, #8
 8005d06:	230a      	movne	r3, #10
 8005d08:	2100      	movs	r1, #0
 8005d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d0e:	6865      	ldr	r5, [r4, #4]
 8005d10:	60a5      	str	r5, [r4, #8]
 8005d12:	2d00      	cmp	r5, #0
 8005d14:	bfa2      	ittt	ge
 8005d16:	6821      	ldrge	r1, [r4, #0]
 8005d18:	f021 0104 	bicge.w	r1, r1, #4
 8005d1c:	6021      	strge	r1, [r4, #0]
 8005d1e:	b90e      	cbnz	r6, 8005d24 <_printf_i+0x114>
 8005d20:	2d00      	cmp	r5, #0
 8005d22:	d04b      	beq.n	8005dbc <_printf_i+0x1ac>
 8005d24:	4615      	mov	r5, r2
 8005d26:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d2a:	fb03 6711 	mls	r7, r3, r1, r6
 8005d2e:	5dc7      	ldrb	r7, [r0, r7]
 8005d30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d34:	4637      	mov	r7, r6
 8005d36:	42bb      	cmp	r3, r7
 8005d38:	460e      	mov	r6, r1
 8005d3a:	d9f4      	bls.n	8005d26 <_printf_i+0x116>
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d10b      	bne.n	8005d58 <_printf_i+0x148>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	07de      	lsls	r6, r3, #31
 8005d44:	d508      	bpl.n	8005d58 <_printf_i+0x148>
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	6861      	ldr	r1, [r4, #4]
 8005d4a:	4299      	cmp	r1, r3
 8005d4c:	bfde      	ittt	le
 8005d4e:	2330      	movle	r3, #48	; 0x30
 8005d50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d58:	1b52      	subs	r2, r2, r5
 8005d5a:	6122      	str	r2, [r4, #16]
 8005d5c:	f8cd a000 	str.w	sl, [sp]
 8005d60:	464b      	mov	r3, r9
 8005d62:	aa03      	add	r2, sp, #12
 8005d64:	4621      	mov	r1, r4
 8005d66:	4640      	mov	r0, r8
 8005d68:	f7ff fee4 	bl	8005b34 <_printf_common>
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d14a      	bne.n	8005e06 <_printf_i+0x1f6>
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	b004      	add	sp, #16
 8005d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	f043 0320 	orr.w	r3, r3, #32
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	4833      	ldr	r0, [pc, #204]	; (8005e50 <_printf_i+0x240>)
 8005d84:	2778      	movs	r7, #120	; 0x78
 8005d86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	6829      	ldr	r1, [r5, #0]
 8005d8e:	061f      	lsls	r7, r3, #24
 8005d90:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d94:	d402      	bmi.n	8005d9c <_printf_i+0x18c>
 8005d96:	065f      	lsls	r7, r3, #25
 8005d98:	bf48      	it	mi
 8005d9a:	b2b6      	uxthmi	r6, r6
 8005d9c:	07df      	lsls	r7, r3, #31
 8005d9e:	bf48      	it	mi
 8005da0:	f043 0320 	orrmi.w	r3, r3, #32
 8005da4:	6029      	str	r1, [r5, #0]
 8005da6:	bf48      	it	mi
 8005da8:	6023      	strmi	r3, [r4, #0]
 8005daa:	b91e      	cbnz	r6, 8005db4 <_printf_i+0x1a4>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	f023 0320 	bic.w	r3, r3, #32
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	2310      	movs	r3, #16
 8005db6:	e7a7      	b.n	8005d08 <_printf_i+0xf8>
 8005db8:	4824      	ldr	r0, [pc, #144]	; (8005e4c <_printf_i+0x23c>)
 8005dba:	e7e4      	b.n	8005d86 <_printf_i+0x176>
 8005dbc:	4615      	mov	r5, r2
 8005dbe:	e7bd      	b.n	8005d3c <_printf_i+0x12c>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	6826      	ldr	r6, [r4, #0]
 8005dc4:	6961      	ldr	r1, [r4, #20]
 8005dc6:	1d18      	adds	r0, r3, #4
 8005dc8:	6028      	str	r0, [r5, #0]
 8005dca:	0635      	lsls	r5, r6, #24
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	d501      	bpl.n	8005dd4 <_printf_i+0x1c4>
 8005dd0:	6019      	str	r1, [r3, #0]
 8005dd2:	e002      	b.n	8005dda <_printf_i+0x1ca>
 8005dd4:	0670      	lsls	r0, r6, #25
 8005dd6:	d5fb      	bpl.n	8005dd0 <_printf_i+0x1c0>
 8005dd8:	8019      	strh	r1, [r3, #0]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6123      	str	r3, [r4, #16]
 8005dde:	4615      	mov	r5, r2
 8005de0:	e7bc      	b.n	8005d5c <_printf_i+0x14c>
 8005de2:	682b      	ldr	r3, [r5, #0]
 8005de4:	1d1a      	adds	r2, r3, #4
 8005de6:	602a      	str	r2, [r5, #0]
 8005de8:	681d      	ldr	r5, [r3, #0]
 8005dea:	6862      	ldr	r2, [r4, #4]
 8005dec:	2100      	movs	r1, #0
 8005dee:	4628      	mov	r0, r5
 8005df0:	f7fa f9c6 	bl	8000180 <memchr>
 8005df4:	b108      	cbz	r0, 8005dfa <_printf_i+0x1ea>
 8005df6:	1b40      	subs	r0, r0, r5
 8005df8:	6060      	str	r0, [r4, #4]
 8005dfa:	6863      	ldr	r3, [r4, #4]
 8005dfc:	6123      	str	r3, [r4, #16]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e04:	e7aa      	b.n	8005d5c <_printf_i+0x14c>
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	462a      	mov	r2, r5
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	47d0      	blx	sl
 8005e10:	3001      	adds	r0, #1
 8005e12:	d0ad      	beq.n	8005d70 <_printf_i+0x160>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	079b      	lsls	r3, r3, #30
 8005e18:	d413      	bmi.n	8005e42 <_printf_i+0x232>
 8005e1a:	68e0      	ldr	r0, [r4, #12]
 8005e1c:	9b03      	ldr	r3, [sp, #12]
 8005e1e:	4298      	cmp	r0, r3
 8005e20:	bfb8      	it	lt
 8005e22:	4618      	movlt	r0, r3
 8005e24:	e7a6      	b.n	8005d74 <_printf_i+0x164>
 8005e26:	2301      	movs	r3, #1
 8005e28:	4632      	mov	r2, r6
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	47d0      	blx	sl
 8005e30:	3001      	adds	r0, #1
 8005e32:	d09d      	beq.n	8005d70 <_printf_i+0x160>
 8005e34:	3501      	adds	r5, #1
 8005e36:	68e3      	ldr	r3, [r4, #12]
 8005e38:	9903      	ldr	r1, [sp, #12]
 8005e3a:	1a5b      	subs	r3, r3, r1
 8005e3c:	42ab      	cmp	r3, r5
 8005e3e:	dcf2      	bgt.n	8005e26 <_printf_i+0x216>
 8005e40:	e7eb      	b.n	8005e1a <_printf_i+0x20a>
 8005e42:	2500      	movs	r5, #0
 8005e44:	f104 0619 	add.w	r6, r4, #25
 8005e48:	e7f5      	b.n	8005e36 <_printf_i+0x226>
 8005e4a:	bf00      	nop
 8005e4c:	080095d1 	.word	0x080095d1
 8005e50:	080095e2 	.word	0x080095e2

08005e54 <memmove>:
 8005e54:	4288      	cmp	r0, r1
 8005e56:	b510      	push	{r4, lr}
 8005e58:	eb01 0402 	add.w	r4, r1, r2
 8005e5c:	d902      	bls.n	8005e64 <memmove+0x10>
 8005e5e:	4284      	cmp	r4, r0
 8005e60:	4623      	mov	r3, r4
 8005e62:	d807      	bhi.n	8005e74 <memmove+0x20>
 8005e64:	1e43      	subs	r3, r0, #1
 8005e66:	42a1      	cmp	r1, r4
 8005e68:	d008      	beq.n	8005e7c <memmove+0x28>
 8005e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e72:	e7f8      	b.n	8005e66 <memmove+0x12>
 8005e74:	4402      	add	r2, r0
 8005e76:	4601      	mov	r1, r0
 8005e78:	428a      	cmp	r2, r1
 8005e7a:	d100      	bne.n	8005e7e <memmove+0x2a>
 8005e7c:	bd10      	pop	{r4, pc}
 8005e7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e86:	e7f7      	b.n	8005e78 <memmove+0x24>

08005e88 <_sbrk_r>:
 8005e88:	b538      	push	{r3, r4, r5, lr}
 8005e8a:	4d06      	ldr	r5, [pc, #24]	; (8005ea4 <_sbrk_r+0x1c>)
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	4604      	mov	r4, r0
 8005e90:	4608      	mov	r0, r1
 8005e92:	602b      	str	r3, [r5, #0]
 8005e94:	f7fb f9f6 	bl	8001284 <_sbrk>
 8005e98:	1c43      	adds	r3, r0, #1
 8005e9a:	d102      	bne.n	8005ea2 <_sbrk_r+0x1a>
 8005e9c:	682b      	ldr	r3, [r5, #0]
 8005e9e:	b103      	cbz	r3, 8005ea2 <_sbrk_r+0x1a>
 8005ea0:	6023      	str	r3, [r4, #0]
 8005ea2:	bd38      	pop	{r3, r4, r5, pc}
 8005ea4:	2000419c 	.word	0x2000419c

08005ea8 <_realloc_r>:
 8005ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eac:	4680      	mov	r8, r0
 8005eae:	4614      	mov	r4, r2
 8005eb0:	460e      	mov	r6, r1
 8005eb2:	b921      	cbnz	r1, 8005ebe <_realloc_r+0x16>
 8005eb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb8:	4611      	mov	r1, r2
 8005eba:	f7ff bc57 	b.w	800576c <_malloc_r>
 8005ebe:	b92a      	cbnz	r2, 8005ecc <_realloc_r+0x24>
 8005ec0:	f7ff fbe8 	bl	8005694 <_free_r>
 8005ec4:	4625      	mov	r5, r4
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ecc:	f000 f81b 	bl	8005f06 <_malloc_usable_size_r>
 8005ed0:	4284      	cmp	r4, r0
 8005ed2:	4607      	mov	r7, r0
 8005ed4:	d802      	bhi.n	8005edc <_realloc_r+0x34>
 8005ed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005eda:	d812      	bhi.n	8005f02 <_realloc_r+0x5a>
 8005edc:	4621      	mov	r1, r4
 8005ede:	4640      	mov	r0, r8
 8005ee0:	f7ff fc44 	bl	800576c <_malloc_r>
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d0ed      	beq.n	8005ec6 <_realloc_r+0x1e>
 8005eea:	42bc      	cmp	r4, r7
 8005eec:	4622      	mov	r2, r4
 8005eee:	4631      	mov	r1, r6
 8005ef0:	bf28      	it	cs
 8005ef2:	463a      	movcs	r2, r7
 8005ef4:	f7ff fbc0 	bl	8005678 <memcpy>
 8005ef8:	4631      	mov	r1, r6
 8005efa:	4640      	mov	r0, r8
 8005efc:	f7ff fbca 	bl	8005694 <_free_r>
 8005f00:	e7e1      	b.n	8005ec6 <_realloc_r+0x1e>
 8005f02:	4635      	mov	r5, r6
 8005f04:	e7df      	b.n	8005ec6 <_realloc_r+0x1e>

08005f06 <_malloc_usable_size_r>:
 8005f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f0a:	1f18      	subs	r0, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	bfbc      	itt	lt
 8005f10:	580b      	ldrlt	r3, [r1, r0]
 8005f12:	18c0      	addlt	r0, r0, r3
 8005f14:	4770      	bx	lr
	...

08005f18 <_init>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr

08005f24 <_fini>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr
