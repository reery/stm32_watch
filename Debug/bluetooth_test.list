
bluetooth_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036c4  08005b08  08005b08  00015b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080091cc  080091cc  000191cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080091d4  080091d4  000191d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080091d8  080091d8  000191d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000008  080091dc  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003fa4  200001e4  080093b8  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004188  080093b8  00024188  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018d91  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003320  00000000  00000000  00038fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000018c8  00000000  00000000  0003c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000012f4  00000000  00000000  0003dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00022efc  00000000  00000000  0003eec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017050  00000000  00000000  00061dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ddef7  00000000  00000000  00078e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006e14  00000000  00000000  00156d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  0015db1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	08005af0 	.word	0x08005af0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	08005af0 	.word	0x08005af0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800052c:	f023 0218 	bic.w	r2, r3, #24
 8000530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4313      	orrs	r3, r2
 8000538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4013      	ands	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056c:	68fb      	ldr	r3, [r7, #12]
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <HAL_LPTIM_AutoReloadMatchCallback>:

/* USER CODE BEGIN PV */
uint32_t uptime = 0;

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
	if (hlptim->Instance == LPTIM1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <HAL_LPTIM_AutoReloadMatchCallback+0x4c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d117      	bne.n	80005be <HAL_LPTIM_AutoReloadMatchCallback+0x42>
	{
	  // Code to execute when LPTIM1 counter reaches the autoreload value
		BLUE_LED_ON();
 800058e:	2201      	movs	r2, #1
 8000590:	2120      	movs	r1, #32
 8000592:	480e      	ldr	r0, [pc, #56]	; (80005cc <HAL_LPTIM_AutoReloadMatchCallback+0x50>)
 8000594:	f001 f9b8 	bl	8001908 <HAL_GPIO_WritePin>
		uptime++;
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <HAL_LPTIM_AutoReloadMatchCallback+0x54>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	4a0c      	ldr	r2, [pc, #48]	; (80005d0 <HAL_LPTIM_AutoReloadMatchCallback+0x54>)
 80005a0:	6013      	str	r3, [r2, #0]
		numToString(30, 140, uptime, "lu", 1);
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_LPTIM_AutoReloadMatchCallback+0x54>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	461a      	mov	r2, r3
 80005a8:	2301      	movs	r3, #1
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <HAL_LPTIM_AutoReloadMatchCallback+0x58>)
 80005ae:	218c      	movs	r1, #140	; 0x8c
 80005b0:	201e      	movs	r0, #30
 80005b2:	f000 fbd1 	bl	8000d58 <numToString>
		updateDisplay(140, 188);
 80005b6:	21bc      	movs	r1, #188	; 0xbc
 80005b8:	208c      	movs	r0, #140	; 0x8c
 80005ba:	f000 faad 	bl	8000b18 <updateDisplay>
	}
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40007c00 	.word	0x40007c00
 80005cc:	48000400 	.word	0x48000400
 80005d0:	2000060c 	.word	0x2000060c
 80005d4:	08005b08 	.word	0x08005b08

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b090      	sub	sp, #64	; 0x40
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fe69 	bl	80012b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f835 	bl	8000650 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005e6:	f000 f8ab 	bl	8000740 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f9bf 	bl	800096c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005ee:	f000 f947 	bl	8000880 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80005f2:	f000 f993 	bl	800091c <MX_USB_PCD_Init>
  MX_SPI1_Init();
 80005f6:	f000 f905 	bl	8000804 <MX_SPI1_Init>
  MX_LPTIM1_Init();
 80005fa:	f000 f8cb 	bl	8000794 <MX_LPTIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005fe:	f000 f8bc 	bl	800077a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  init_display();
 8000602:	f000 fa35 	bl	8000a70 <init_display>
  initDisplayBuffer();
 8000606:	f000 fbe3 	bl	8000dd0 <initDisplayBuffer>
  clearDisplay();
 800060a:	f000 fa13 	bl	8000a34 <clearDisplay>

  uint32_t startTime = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	63fb      	str	r3, [r7, #60]	; 0x3c
  const uint32_t lptimReset = 1024;
 8000612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  startTime = HAL_GetTick();
 8000618:	f000 feba 	bl	8001390 <HAL_GetTick>
 800061c:	63f8      	str	r0, [r7, #60]	; 0x3c
  char str[12];
  uint32_t startTime1 = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	637b      	str	r3, [r7, #52]	; 0x34
  char str1[12];
  char str2[12];
  int vcom_bit = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t counterValue = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
  int counter = 1024;
 800062a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GREEN_LED_ON();
 8000630:	2201      	movs	r2, #1
 8000632:	2101      	movs	r1, #1
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <main+0x74>)
 8000636:	f001 f967 	bl	8001908 <HAL_GPIO_WritePin>
	  BLUE_LED_OFF();
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	4803      	ldr	r0, [pc, #12]	; (800064c <main+0x74>)
 8000640:	f001 f962 	bl	8001908 <HAL_GPIO_WritePin>
	  //HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
	  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000644:	2001      	movs	r0, #1
 8000646:	f001 fe1b 	bl	8002280 <HAL_PWREx_EnterSTOP2Mode>
	  GREEN_LED_ON();
 800064a:	e7f1      	b.n	8000630 <main+0x58>
 800064c:	48000400 	.word	0x48000400

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b09a      	sub	sp, #104	; 0x68
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2248      	movs	r2, #72	; 0x48
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fdc2 	bl	80051e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
 8000672:	615a      	str	r2, [r3, #20]
 8000674:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000684:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	f023 0303 	bic.w	r3, r3, #3
 8000690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800069a:	f001 fdd3 	bl	8002244 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ff3c 	bl	800051c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <SystemClock_Config+0xec>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006ac:	4a23      	ldr	r2, [pc, #140]	; (800073c <SystemClock_Config+0xec>)
 80006ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <SystemClock_Config+0xec>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80006c0:	232f      	movs	r3, #47	; 0x2f
 80006c2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ca:	2301      	movs	r3, #1
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2340      	movs	r3, #64	; 0x40
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006dc:	2300      	movs	r3, #0
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e0:	2360      	movs	r3, #96	; 0x60
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006e4:	2305      	movs	r3, #5
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 f967 	bl	80029c4 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006fc:	f000 f994 	bl	8000a28 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000700:	236f      	movs	r3, #111	; 0x6f
 8000702:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000704:	2302      	movs	r3, #2
 8000706:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2101      	movs	r1, #1
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fcc3 	bl	80030ac <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800072c:	f000 f97c 	bl	8000a28 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000730:	f003 fa7e 	bl	8003c30 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000734:	bf00      	nop
 8000736:	3768      	adds	r7, #104	; 0x68
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	58000400 	.word	0x58000400

08000740 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2250      	movs	r2, #80	; 0x50
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f004 fd4b 	bl	80051e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000756:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800075c:	2300      	movs	r3, #0
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4618      	mov	r0, r3
 8000764:	f003 f8ee 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800076e:	f000 f95b 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	; 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
  /* LPTIM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	202f      	movs	r0, #47	; 0x2f
 8000784:	f000 ff1b 	bl	80015be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000788:	202f      	movs	r0, #47	; 0x2f
 800078a:	f000 ff32 	bl	80015f2 <HAL_NVIC_EnableIRQ>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_LPTIM1_Init+0x68>)
 800079a:	4a19      	ldr	r2, [pc, #100]	; (8000800 <MX_LPTIM1_Init+0x6c>)
 800079c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_LPTIM1_Init+0x68>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_LPTIM1_Init+0x68>)
 80007a6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80007aa:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_LPTIM1_Init+0x68>)
 80007ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b2:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_LPTIM1_Init+0x68>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_LPTIM1_Init+0x68>)
 80007bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_LPTIM1_Init+0x68>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_LPTIM1_Init+0x68>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_LPTIM1_Init+0x68>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80007d4:	4809      	ldr	r0, [pc, #36]	; (80007fc <MX_LPTIM1_Init+0x68>)
 80007d6:	f001 f927 	bl	8001a28 <HAL_LPTIM_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_LPTIM1_Init+0x50>
  {
    Error_Handler();
 80007e0:	f000 f922 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */
  //HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
  //HAL_LPTIM_IRQHandler(&hlptim1);
  if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK)
 80007e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_LPTIM1_Init+0x68>)
 80007ea:	f001 f9bf 	bl	8001b6c <HAL_LPTIM_Counter_Start_IT>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_LPTIM1_Init+0x64>
    {
        // Starting Error
        Error_Handler();
 80007f4:	f000 f918 	bl	8000a28 <Error_Handler>
    }
  /* USER CODE END LPTIM1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000200 	.word	0x20000200
 8000800:	40007c00 	.word	0x40007c00

08000804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_SPI1_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_SPI1_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_SPI1_Init+0x74>)
 8000810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_SPI1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_SPI1_Init+0x74>)
 800081e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000822:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_SPI1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_SPI1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_SPI1_Init+0x74>)
 8000832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000836:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_SPI1_Init+0x74>)
 800083a:	2210      	movs	r2, #16
 800083c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_SPI1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_SPI1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_SPI1_Init+0x74>)
 8000852:	2207      	movs	r2, #7
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_SPI1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_SPI1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_SPI1_Init+0x74>)
 8000864:	f003 fafb 	bl	8003e5e <HAL_SPI_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800086e:	f000 f8db 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000238 	.word	0x20000238
 800087c:	40013000 	.word	0x40013000

08000880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000884:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_USART1_UART_Init+0x94>)
 8000886:	4a24      	ldr	r2, [pc, #144]	; (8000918 <MX_USART1_UART_Init+0x98>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_USART1_UART_Init+0x94>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_USART1_UART_Init+0x94>)
 8000894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000898:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800089a:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_USART1_UART_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a6:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008a8:	220c      	movs	r2, #12
 80008aa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ca:	4812      	ldr	r0, [pc, #72]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008cc:	f003 fe64 	bl	8004598 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80008d6:	f000 f8a7 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008de:	f004 fb2b 	bl	8004f38 <HAL_UARTEx_SetTxFifoThreshold>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80008e8:	f000 f89e 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	4809      	ldr	r0, [pc, #36]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008f0:	f004 fb60 	bl	8004fb4 <HAL_UARTEx_SetRxFifoThreshold>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80008fa:	f000 f895 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_USART1_UART_Init+0x94>)
 8000900:	f004 fae1 	bl	8004ec6 <HAL_UARTEx_DisableFifoMode>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800090a:	f000 f88d 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000029c 	.word	0x2000029c
 8000918:	40013800 	.word	0x40013800

0800091c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_USB_PCD_Init+0x48>)
 8000922:	4a11      	ldr	r2, [pc, #68]	; (8000968 <MX_USB_PCD_Init+0x4c>)
 8000924:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USB_PCD_Init+0x48>)
 8000928:	2208      	movs	r2, #8
 800092a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <MX_USB_PCD_Init+0x48>)
 800092e:	2202      	movs	r2, #2
 8000930:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USB_PCD_Init+0x48>)
 8000934:	2202      	movs	r2, #2
 8000936:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_USB_PCD_Init+0x48>)
 800093a:	2200      	movs	r2, #0
 800093c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USB_PCD_Init+0x48>)
 8000940:	2200      	movs	r2, #0
 8000942:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_USB_PCD_Init+0x48>)
 8000946:	2200      	movs	r2, #0
 8000948:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USB_PCD_Init+0x48>)
 800094c:	2200      	movs	r2, #0
 800094e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_USB_PCD_Init+0x48>)
 8000952:	f001 fb7f 	bl	8002054 <HAL_PCD_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800095c:	f000 f864 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000330 	.word	0x20000330
 8000968:	40006800 	.word	0x40006800

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000980:	2004      	movs	r0, #4
 8000982:	f7ff fde1 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff fdde 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098c:	2002      	movs	r0, #2
 800098e:	f7ff fddb 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2008      	movs	r0, #8
 8000994:	f7ff fdd8 	bl	8000548 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f000 ffb1 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2123      	movs	r1, #35	; 0x23
 80009aa:	481c      	ldr	r0, [pc, #112]	; (8000a1c <MX_GPIO_Init+0xb0>)
 80009ac:	f000 ffac 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 80009b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4619      	mov	r1, r3
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f000 fe2d 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ce:	2310      	movs	r3, #16
 80009d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4810      	ldr	r0, [pc, #64]	; (8000a20 <MX_GPIO_Init+0xb4>)
 80009e0:	f000 fe22 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80009e4:	2323      	movs	r3, #35	; 0x23
 80009e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	4808      	ldr	r0, [pc, #32]	; (8000a1c <MX_GPIO_Init+0xb0>)
 80009fa:	f000 fe15 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80009fe:	2303      	movs	r3, #3
 8000a00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_GPIO_Init+0xb8>)
 8000a10:	f000 fe0a 	bl	8001628 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a14:	bf00      	nop
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	48000400 	.word	0x48000400
 8000a20:	48000800 	.word	0x48000800
 8000a24:	48000c00 	.word	0x48000c00

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <clearDisplay>:
//uint8_t frontBuffer[DISPLAY_HEIGHT][DISPLAY_WIDTH / 8];
uint8_t backBuffer[DISPLAY_HEIGHT][DISPLAY_WIDTH / 8] __attribute__((aligned(4)));
uint8_t (*currentBuffer)[DISPLAY_WIDTH / 8] = backBuffer;
uint8_t sendToDisplayBuffer[TOTAL_DATA_SIZE];

void clearDisplay(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	SCS_HIGH();
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f000 ff62 	bl	8001908 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &clear_command, 1, HAL_MAX_DELAY);
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4907      	ldr	r1, [pc, #28]	; (8000a68 <clearDisplay+0x34>)
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <clearDisplay+0x38>)
 8000a4e:	f003 faa9 	bl	8003fa4 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, &dummy_8bit, 1, HAL_MAX_DELAY);
	SCS_LOW();
 8000a52:	2200      	movs	r2, #0
 8000a54:	2110      	movs	r1, #16
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f000 ff55 	bl	8001908 <HAL_GPIO_WritePin>
	toggle_vcom();
 8000a5e:	f000 f82d 	bl	8000abc <toggle_vcom>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000180 	.word	0x20000180
 8000a6c:	20000238 	.word	0x20000238

08000a70 <init_display>:

void init_display(void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	// Step 1
	HAL_Delay(10);
 8000a74:	200a      	movs	r0, #10
 8000a76:	f000 fca3 	bl	80013c0 <HAL_Delay>
	DISP_LOW();
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f000 ff40 	bl	8001908 <HAL_GPIO_WritePin>
	SCS_LOW();
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f000 ff3a 	bl	8001908 <HAL_GPIO_WritePin>
	EXTCOMIN_LOW();
 8000a94:	2200      	movs	r2, #0
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f000 ff34 	bl	8001908 <HAL_GPIO_WritePin>
	// Step 2
	clearDisplay();
 8000aa0:	f7ff ffc8 	bl	8000a34 <clearDisplay>
	HAL_Delay(50);
 8000aa4:	2032      	movs	r0, #50	; 0x32
 8000aa6:	f000 fc8b 	bl	80013c0 <HAL_Delay>
	// Step 3
	DISP_HIGH();
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab4:	f000 ff28 	bl	8001908 <HAL_GPIO_WritePin>
	// Step 4
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <toggle_vcom>:

unsigned int toggle_vcom(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	SCS_HIGH();
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac8:	f000 ff1e 	bl	8001908 <HAL_GPIO_WritePin>
	vcom_bit ^= 0x40;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <toggle_vcom+0x50>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <toggle_vcom+0x50>)
 8000ad8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &vcom_bit, 1, HAL_MAX_DELAY);
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	2201      	movs	r2, #1
 8000ae0:	490a      	ldr	r1, [pc, #40]	; (8000b0c <toggle_vcom+0x50>)
 8000ae2:	480b      	ldr	r0, [pc, #44]	; (8000b10 <toggle_vcom+0x54>)
 8000ae4:	f003 fa5e 	bl	8003fa4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &dummy_8bit, 1, HAL_MAX_DELAY);
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aec:	2201      	movs	r2, #1
 8000aee:	4909      	ldr	r1, [pc, #36]	; (8000b14 <toggle_vcom+0x58>)
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <toggle_vcom+0x54>)
 8000af2:	f003 fa57 	bl	8003fa4 <HAL_SPI_Transmit>
	SCS_LOW();
 8000af6:	2200      	movs	r2, #0
 8000af8:	2110      	movs	r1, #16
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f000 ff03 	bl	8001908 <HAL_GPIO_WritePin>
	return vcom_bit;
 8000b02:	4b02      	ldr	r3, [pc, #8]	; (8000b0c <toggle_vcom+0x50>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000182 	.word	0x20000182
 8000b10:	20000238 	.word	0x20000238
 8000b14:	20000611 	.word	0x20000611

08000b18 <updateDisplay>:

	int vcom_bit = toggle_vcom();
	return vcom_bit;
}

unsigned int updateDisplay(uint8_t y_start, uint8_t y_end) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	460a      	mov	r2, r1
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	4613      	mov	r3, r2
 8000b26:	71bb      	strb	r3, [r7, #6]
	uint8_t* sendBufferPtr = sendToDisplayBuffer;
 8000b28:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <updateDisplay+0xe4>)
 8000b2a:	61fb      	str	r3, [r7, #28]
	*sendBufferPtr++ = write_mode;
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	61fa      	str	r2, [r7, #28]
 8000b32:	4a33      	ldr	r2, [pc, #204]	; (8000c00 <updateDisplay+0xe8>)
 8000b34:	7812      	ldrb	r2, [r2, #0]
 8000b36:	701a      	strb	r2, [r3, #0]

	for (uint8_t line = y_start; line <= y_end; line++) {
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	76fb      	strb	r3, [r7, #27]
 8000b3c:	e027      	b.n	8000b8e <updateDisplay+0x76>
	    // Send line address inverted
	    uint8_t line_address = (uint8_t)(__RBIT((uint8_t)(line)) >> 24);
 8000b3e:	7efb      	ldrb	r3, [r7, #27]
 8000b40:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	fa93 f3a3 	rbit	r3, r3
 8000b48:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	0e1b      	lsrs	r3, r3, #24
 8000b4e:	74fb      	strb	r3, [r7, #19]
	    *sendBufferPtr++ = line_address;
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	61fa      	str	r2, [r7, #28]
 8000b56:	7cfa      	ldrb	r2, [r7, #19]
 8000b58:	701a      	strb	r2, [r3, #0]

	    // Add pixel data from displayBuffer -> to improve this all the gfx code could modify only the bufferPtr/sendToDisplayBuffer
	    memcpy(sendBufferPtr, currentBuffer[line - 1], DISPLAY_WIDTH / 8);
 8000b5a:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <updateDisplay+0xec>)
 8000b5c:	6819      	ldr	r1, [r3, #0]
 8000b5e:	7efa      	ldrb	r2, [r7, #27]
 8000b60:	4613      	mov	r3, r2
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	1a9b      	subs	r3, r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	3b1e      	subs	r3, #30
 8000b6a:	440b      	add	r3, r1
 8000b6c:	221e      	movs	r2, #30
 8000b6e:	4619      	mov	r1, r3
 8000b70:	69f8      	ldr	r0, [r7, #28]
 8000b72:	f004 fb6d 	bl	8005250 <memcpy>
	    sendBufferPtr += DISPLAY_WIDTH / 8;
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	331e      	adds	r3, #30
 8000b7a:	61fb      	str	r3, [r7, #28]

	    // Send 8 dummy bits after each line's pixel data
	    *sendBufferPtr++ = dummy_8bit;
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	61fa      	str	r2, [r7, #28]
 8000b82:	4a21      	ldr	r2, [pc, #132]	; (8000c08 <updateDisplay+0xf0>)
 8000b84:	7812      	ldrb	r2, [r2, #0]
 8000b86:	701a      	strb	r2, [r3, #0]
	for (uint8_t line = y_start; line <= y_end; line++) {
 8000b88:	7efb      	ldrb	r3, [r7, #27]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	76fb      	strb	r3, [r7, #27]
 8000b8e:	7efa      	ldrb	r2, [r7, #27]
 8000b90:	79bb      	ldrb	r3, [r7, #6]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d9d3      	bls.n	8000b3e <updateDisplay+0x26>
	}
	*sendBufferPtr++ = dummy_16bit;
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	1c5a      	adds	r2, r3, #1
 8000b9a:	61fa      	str	r2, [r7, #28]
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <updateDisplay+0xf4>)
 8000b9e:	7812      	ldrb	r2, [r2, #0]
 8000ba0:	701a      	strb	r2, [r3, #0]

	RED_LED_ON();
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	481a      	ldr	r0, [pc, #104]	; (8000c10 <updateDisplay+0xf8>)
 8000ba8:	f000 feae 	bl	8001908 <HAL_GPIO_WritePin>
	SCS_HIGH();
 8000bac:	2201      	movs	r2, #1
 8000bae:	2110      	movs	r1, #16
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f000 fea8 	bl	8001908 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, sendToDisplayBuffer, TOTAL_DATA_SIZE, HAL_MAX_DELAY);
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	f641 6203 	movw	r2, #7683	; 0x1e03
 8000bc0:	490e      	ldr	r1, [pc, #56]	; (8000bfc <updateDisplay+0xe4>)
 8000bc2:	4814      	ldr	r0, [pc, #80]	; (8000c14 <updateDisplay+0xfc>)
 8000bc4:	f003 f9ee 	bl	8003fa4 <HAL_SPI_Transmit>
	SCS_LOW();
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2110      	movs	r1, #16
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd0:	f000 fe9a 	bl	8001908 <HAL_GPIO_WritePin>
	//updateBuffer();
	//currentBuffer = (currentBuffer == frontBuffer) ? backBuffer : frontBuffer;
	//initCurrentBuffer();
	resetCurrentBuffer(y_start, y_end);
 8000bd4:	79ba      	ldrb	r2, [r7, #6]
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f906 	bl	8000dec <resetCurrentBuffer>
	RED_LED_OFF();
 8000be0:	2200      	movs	r2, #0
 8000be2:	2102      	movs	r1, #2
 8000be4:	480a      	ldr	r0, [pc, #40]	; (8000c10 <updateDisplay+0xf8>)
 8000be6:	f000 fe8f 	bl	8001908 <HAL_GPIO_WritePin>

	int vcom_bit = toggle_vcom();
 8000bea:	f7ff ff67 	bl	8000abc <toggle_vcom>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	617b      	str	r3, [r7, #20]
	return vcom_bit;
 8000bf2:	697b      	ldr	r3, [r7, #20]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20002234 	.word	0x20002234
 8000c00:	20000181 	.word	0x20000181
 8000c04:	20000184 	.word	0x20000184
 8000c08:	20000611 	.word	0x20000611
 8000c0c:	20000610 	.word	0x20000610
 8000c10:	48000400 	.word	0x48000400
 8000c14:	20000238 	.word	0x20000238

08000c18 <setPixel_BB>:
		// Clear the bit to erase a pixel (assuming 1 is the color for erasing)
		currentBuffer[y][byteIndex] |= (1 << bitIndex);
	}
}

void setPixel_BB(int x, int y, bool color) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b08b      	sub	sp, #44	; 0x2c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	4613      	mov	r3, r2
 8000c24:	71fb      	strb	r3, [r7, #7]
	int byteIndex = x >> 3; // byteIndex = x / 8
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	10db      	asrs	r3, r3, #3
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
	int bitIndex = 7 - (x & 7); // bitIndex = 7 - (x % 8)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	623b      	str	r3, [r7, #32]

	// Calculate the byte offset within the buffer
	uint32_t byte_offset = (uint32_t)&currentBuffer[y][byteIndex] - SRAM_BASE;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <setPixel_BB+0x64>)
 8000c38:	6819      	ldr	r1, [r3, #0]
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	1a9b      	subs	r3, r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	18ca      	adds	r2, r1, r3
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	4413      	add	r3, r2
 8000c4a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000c4e:	61fb      	str	r3, [r7, #28]

	// Calculate the bit_word_offset and bit_band_alias_address
	uint32_t bit_word_offset = (byte_offset << 5) + (bitIndex << 2); // bit_word_offset = (byte_offset) * 32 + (bitIndex * 4)
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	015b      	lsls	r3, r3, #5
 8000c54:	6a3a      	ldr	r2, [r7, #32]
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
	uint32_t bit_band_alias_address = SRAM_BB_BASE + bit_word_offset;
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 8000c62:	617b      	str	r3, [r7, #20]

	// Use bit-banding to set or clear the bit
	*(volatile uint32_t *)bit_band_alias_address = (color ? 0 : 1);
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f083 0301 	eor.w	r3, r3, #1
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	601a      	str	r2, [r3, #0]
}
 8000c70:	bf00      	nop
 8000c72:	372c      	adds	r7, #44	; 0x2c
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	20000184 	.word	0x20000184

08000c80 <drawChar>:

void drawChar(int x, int y, char c, bool color) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b092      	sub	sp, #72	; 0x48
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	460b      	mov	r3, r1
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	4613      	mov	r3, r2
 8000c94:	71bb      	strb	r3, [r7, #6]
	// Get the index of the character in the font arrays
	int charIndex = c - 33; // Assuming '!' (char 33) is the first character in your font
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	3b21      	subs	r3, #33	; 0x21
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34

	// Get the character width and bitmap address
	int width = char_width[charIndex];
 8000c9c:	4a2c      	ldr	r2, [pc, #176]	; (8000d50 <drawChar+0xd0>)
 8000c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca0:	4413      	add	r3, r2
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
	const char* bitmap = char_addr[charIndex];
 8000ca6:	4a2b      	ldr	r2, [pc, #172]	; (8000d54 <drawChar+0xd4>)
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Iterate over each vertical slice (column) in the character's bitmap
	for (int col = 0; col < width; col++) {
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8000cb4:	e043      	b.n	8000d3e <drawChar+0xbe>
		int displayX = x + col;  // X position is based on the column (width)
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cba:	4413      	add	r3, r2
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
		int bitmapColOffset = col; // Pre-calculate column offset in the bitmap
 8000cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24

		int prevRowDivisionResult = -1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	643b      	str	r3, [r7, #64]	; 0x40
		int prevRowDivisionResultTimesWidth = -1;
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ccc:	63fb      	str	r3, [r7, #60]	; 0x3c

		// Iterate over each row in the character's bitmap
		for (int row = 0; row < 48; row++) { // Assuming 48 pixels in height
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cd2:	e02e      	b.n	8000d32 <drawChar+0xb2>
			int displayY = y + row;  // Y position is based on the row (height)
 8000cd4:	68ba      	ldr	r2, [r7, #8]
 8000cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cd8:	4413      	add	r3, r2
 8000cda:	623b      	str	r3, [r7, #32]

			// Optimize division and multiplication
			int rowDivisionResult = row >> 3;
 8000cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cde:	10db      	asrs	r3, r3, #3
 8000ce0:	61fb      	str	r3, [r7, #28]
			if (rowDivisionResult != prevRowDivisionResult) {
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d006      	beq.n	8000cf8 <drawChar+0x78>
				prevRowDivisionResult = rowDivisionResult;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	643b      	str	r3, [r7, #64]	; 0x40
				prevRowDivisionResultTimesWidth = rowDivisionResult * width;
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cf2:	fb02 f303 	mul.w	r3, r2, r3
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
			}

			// Calculate the position in the bitmap array and the bit index
			int bitmapIndex = bitmapColOffset + prevRowDivisionResultTimesWidth;
 8000cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cfc:	4413      	add	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
			int bitIndex = row & 7;  // Bit index within the byte, assuming LSB to MSB ordering
 8000d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	617b      	str	r3, [r7, #20]

			// Check if the pixel should be drawn (based on the bitmap data)
			if (bitmap[bitmapIndex] & (1 << bitIndex)) {
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	fa42 f303 	asr.w	r3, r2, r3
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d005      	beq.n	8000d2c <drawChar+0xac>
				setPixel_BB(displayX, displayY, color); // Draw the pixel
 8000d20:	79bb      	ldrb	r3, [r7, #6]
 8000d22:	461a      	mov	r2, r3
 8000d24:	6a39      	ldr	r1, [r7, #32]
 8000d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d28:	f7ff ff76 	bl	8000c18 <setPixel_BB>
		for (int row = 0; row < 48; row++) { // Assuming 48 pixels in height
 8000d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d2e:	3301      	adds	r3, #1
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d34:	2b2f      	cmp	r3, #47	; 0x2f
 8000d36:	ddcd      	ble.n	8000cd4 <drawChar+0x54>
	for (int col = 0; col < width; col++) {
 8000d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8000d3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d42:	429a      	cmp	r2, r3
 8000d44:	dbb7      	blt.n	8000cb6 <drawChar+0x36>
			}
		}
	}
}
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	3748      	adds	r7, #72	; 0x48
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	08009070 	.word	0x08009070
 8000d54:	20000008 	.word	0x20000008

08000d58 <numToString>:
        x += char_width[*str - 33] + 1; // Move x to the next character position
        str++; // Next character
    }
}

void numToString(int x, int y, int number, char *format, bool color) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	; 0x30
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	603b      	str	r3, [r7, #0]
	char str[16];
	char *string_pointer = str;
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	char finalFormat[8];
	snprintf(finalFormat, sizeof(finalFormat), "%%%s", format);
 8000d6c:	f107 0014 	add.w	r0, r7, #20
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <numToString+0x70>)
 8000d74:	2108      	movs	r1, #8
 8000d76:	f004 f9e3 	bl	8005140 <sniprintf>
	sprintf(str, finalFormat, number);
 8000d7a:	f107 0114 	add.w	r1, r7, #20
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f004 fa0f 	bl	80051a8 <siprintf>
	while (*string_pointer) {
 8000d8a:	e013      	b.n	8000db4 <numToString+0x5c>
        drawChar(x, y, *string_pointer, color);
 8000d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8e:	781a      	ldrb	r2, [r3, #0]
 8000d90:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f7ff ff72 	bl	8000c80 <drawChar>
        x += char_width[*string_pointer - 33] + 1; // Move x to the next character position
 8000d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	3b21      	subs	r3, #33	; 0x21
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <numToString+0x74>)
 8000da4:	5cd3      	ldrb	r3, [r2, r3]
 8000da6:	3301      	adds	r3, #1
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
        string_pointer++; // Next character
 8000dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db0:	3301      	adds	r3, #1
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (*string_pointer) {
 8000db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1e7      	bne.n	8000d8c <numToString+0x34>
    }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3730      	adds	r7, #48	; 0x30
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	08005b0c 	.word	0x08005b0c
 8000dcc:	08009070 	.word	0x08009070

08000dd0 <initDisplayBuffer>:
	    	currentBuffer[row][col] = ~currentBuffer[row][col];
	    }
	}
}

void initDisplayBuffer(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	//memset(frontBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
	memset(currentBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <initDisplayBuffer+0x18>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000ddc:	21ff      	movs	r1, #255	; 0xff
 8000dde:	4618      	mov	r0, r3
 8000de0:	f004 fa02 	bl	80051e8 <memset>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000184 	.word	0x20000184

08000dec <resetCurrentBuffer>:

void initCurrentBuffer(void) {
	memset(currentBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
}

void resetCurrentBuffer(uint8_t y_start, uint8_t y_end) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	460a      	mov	r2, r1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	71bb      	strb	r3, [r7, #6]
	for (int i = y_start; i <= y_end; i++) {
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e00f      	b.n	8000e22 <resetCurrentBuffer+0x36>
		memset(currentBuffer[i], 0xFF, sizeof(currentBuffer[i]));
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <resetCurrentBuffer+0x48>)
 8000e04:	6819      	ldr	r1, [r3, #0]
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	1a9b      	subs	r3, r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	440b      	add	r3, r1
 8000e12:	221e      	movs	r2, #30
 8000e14:	21ff      	movs	r1, #255	; 0xff
 8000e16:	4618      	mov	r0, r3
 8000e18:	f004 f9e6 	bl	80051e8 <memset>
	for (int i = y_start; i <= y_end; i++) {
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	79bb      	ldrb	r3, [r7, #6]
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	ddeb      	ble.n	8000e02 <resetCurrentBuffer+0x16>
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000184 	.word	0x20000184

08000e38 <LL_AHB2_GRP1_EnableClock>:
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b096      	sub	sp, #88	; 0x58
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	2250      	movs	r2, #80	; 0x50
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 f97b 	bl	80051e8 <memset>
  if(hlptim->Instance==LPTIM1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a0c      	ldr	r2, [pc, #48]	; (8000f28 <HAL_LPTIM_MspInit+0x4c>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d111      	bne.n	8000f20 <HAL_LPTIM_MspInit+0x44>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000efc:	2310      	movs	r3, #16
 8000efe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_LPTIM_MspInit+0x50>)
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fd1b 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_LPTIM_MspInit+0x3c>
    {
      Error_Handler();
 8000f14:	f7ff fd88 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000f18:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000f1c:	f7ff ffa5 	bl	8000e6a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	3758      	adds	r7, #88	; 0x58
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40007c00 	.word	0x40007c00
 8000f2c:	000c0004 	.word	0x000c0004

08000f30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <HAL_SPI_MspInit+0x5c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d117      	bne.n	8000f82 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f52:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f56:	f7ff ffa1 	bl	8000e9c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f7ff ff6c 	bl	8000e38 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f60:	23a0      	movs	r3, #160	; 0xa0
 8000f62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f70:	2305      	movs	r3, #5
 8000f72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f000 fb53 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3720      	adds	r7, #32
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40013000 	.word	0x40013000

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09c      	sub	sp, #112	; 0x70
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2250      	movs	r2, #80	; 0x50
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f004 f919 	bl	80051e8 <memset>
  if(huart->Instance==USART1)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a16      	ldr	r2, [pc, #88]	; (8001014 <HAL_UART_MspInit+0x84>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d124      	bne.n	800100a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 fcb9 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fd8:	f7ff fd26 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fdc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000fe0:	f7ff ff5c 	bl	8000e9c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f7ff ff27 	bl	8000e38 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fea:	23c0      	movs	r3, #192	; 0xc0
 8000fec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001002:	4619      	mov	r1, r3
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <HAL_UART_MspInit+0x88>)
 8001006:	f000 fb0f 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3770      	adds	r7, #112	; 0x70
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40013800 	.word	0x40013800
 8001018:	48000400 	.word	0x48000400

0800101c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b09c      	sub	sp, #112	; 0x70
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2250      	movs	r2, #80	; 0x50
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f004 f8d3 	bl	80051e8 <memset>
  if(hpcd->Instance==USB)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <HAL_PCD_MspInit+0xa8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d136      	bne.n	80010ba <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800104c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001050:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001052:	2318      	movs	r3, #24
 8001054:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001056:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800105a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800105c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001060:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001062:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001066:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800106c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800106e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001072:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4618      	mov	r0, r3
 800107a:	f002 fc63 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001084:	f7ff fcd0 	bl	8000a28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff fed5 	bl	8000e38 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800108e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001092:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80010a0:	230a      	movs	r3, #10
 80010a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010a8:	4619      	mov	r1, r3
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ae:	f000 fabb 	bl	8001628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010b2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80010b6:	f7ff fed8 	bl	8000e6a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	3770      	adds	r7, #112	; 0x70
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40006800 	.word	0x40006800

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001114:	f000 f928 	bl	8001368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <LPTIM1_IRQHandler+0x10>)
 8001122:	f000 fda5 	bl	8001c70 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000200 	.word	0x20000200

08001130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <_sbrk+0x5c>)
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <_sbrk+0x60>)
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <_sbrk+0x64>)
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <_sbrk+0x68>)
 8001150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	429a      	cmp	r2, r3
 800115e:	d207      	bcs.n	8001170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001160:	f004 f84a 	bl	80051f8 <__errno>
 8001164:	4603      	mov	r3, r0
 8001166:	220c      	movs	r2, #12
 8001168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	e009      	b.n	8001184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <_sbrk+0x64>)
 8001180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001182:	68fb      	ldr	r3, [r7, #12]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20030000 	.word	0x20030000
 8001190:	00000400 	.word	0x00000400
 8001194:	20004038 	.word	0x20004038
 8001198:	20004188 	.word	0x20004188

0800119c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <SystemInit+0x98>)
 80011a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a6:	4a23      	ldr	r2, [pc, #140]	; (8001234 <SystemInit+0x98>)
 80011a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80011c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80011c8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80011ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <SystemInit+0x9c>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011e6:	f023 0305 	bic.w	r3, r3, #5
 80011ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80011ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011fa:	f023 0301 	bic.w	r3, r3, #1
 80011fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001206:	4a0d      	ldr	r2, [pc, #52]	; (800123c <SystemInit+0xa0>)
 8001208:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800120a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <SystemInit+0xa0>)
 8001210:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800121c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001220:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	faf6fefb 	.word	0xfaf6fefb
 800123c:	22041000 	.word	0x22041000

08001240 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001240:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001242:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001244:	3304      	adds	r3, #4

08001246 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001246:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001248:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800124a:	d3f9      	bcc.n	8001240 <CopyDataInit>
  bx lr
 800124c:	4770      	bx	lr

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800124e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001250:	3004      	adds	r0, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001252:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>
  bx lr
 8001256:	4770      	bx	lr

08001258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800125a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800125c:	f7ff ff9e 	bl	800119c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001260:	480b      	ldr	r0, [pc, #44]	; (8001290 <LoopForever+0x6>)
 8001262:	490c      	ldr	r1, [pc, #48]	; (8001294 <LoopForever+0xa>)
 8001264:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <LoopForever+0xe>)
 8001266:	2300      	movs	r3, #0
 8001268:	f7ff ffed 	bl	8001246 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <LoopForever+0x12>)
 800126e:	490c      	ldr	r1, [pc, #48]	; (80012a0 <LoopForever+0x16>)
 8001270:	4a0c      	ldr	r2, [pc, #48]	; (80012a4 <LoopForever+0x1a>)
 8001272:	2300      	movs	r3, #0
 8001274:	f7ff ffe7 	bl	8001246 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <LoopForever+0x1e>)
 800127a:	490c      	ldr	r1, [pc, #48]	; (80012ac <LoopForever+0x22>)
 800127c:	2300      	movs	r3, #0
 800127e:	f7ff ffe8 	bl	8001252 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001282:	f003 ffbf 	bl	8005204 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001286:	f7ff f9a7 	bl	80005d8 <main>

0800128a <LoopForever>:

LoopForever:
  b LoopForever
 800128a:	e7fe      	b.n	800128a <LoopForever>
  ldr   r0, =_estack
 800128c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001290:	20000008 	.word	0x20000008
 8001294:	200001e4 	.word	0x200001e4
 8001298:	080091dc 	.word	0x080091dc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800129c:	20030000 	.word	0x20030000
 80012a0:	20030000 	.word	0x20030000
 80012a4:	080093b8 	.word	0x080093b8
  INIT_BSS _sbss, _ebss
 80012a8:	200001e4 	.word	0x200001e4
 80012ac:	20004188 	.word	0x20004188

080012b0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC1_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_Init+0x3c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_Init+0x3c>)
 80012c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ca:	2003      	movs	r0, #3
 80012cc:	f000 f96c 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012d0:	2000      	movs	r0, #0
 80012d2:	f000 f80f 	bl	80012f4 <HAL_InitTick>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	e001      	b.n	80012e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012e2:	f7ff fdf4 	bl	8000ece <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012e6:	79fb      	ldrb	r3, [r7, #7]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	58004000 	.word	0x58004000

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_InitTick+0x6c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d024      	beq.n	8001352 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001308:	f002 f87c 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 800130c:	4602      	mov	r2, r0
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_InitTick+0x6c>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4619      	mov	r1, r3
 8001314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001318:	fbb3 f3f1 	udiv	r3, r3, r1
 800131c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f974 	bl	800160e <HAL_SYSTICK_Config>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10f      	bne.n	800134c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b0f      	cmp	r3, #15
 8001330:	d809      	bhi.n	8001346 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001332:	2200      	movs	r2, #0
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	f04f 30ff 	mov.w	r0, #4294967295
 800133a:	f000 f940 	bl	80015be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800133e:	4a09      	ldr	r2, [pc, #36]	; (8001364 <HAL_InitTick+0x70>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e007      	b.n	8001356 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	73fb      	strb	r3, [r7, #15]
 800134a:	e004      	b.n	8001356 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e001      	b.n	8001356 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000190 	.word	0x20000190
 8001364:	2000018c 	.word	0x2000018c

08001368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x20>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x24>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_IncTick+0x24>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000190 	.word	0x20000190
 800138c:	2000403c 	.word	0x2000403c

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <HAL_GetTick+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	2000403c 	.word	0x2000403c

080013a8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_GetTickPrio+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	2000018c 	.word	0x2000018c

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff ffe2 	bl	8001390 <HAL_GetTick>
 80013cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d005      	beq.n	80013e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_Delay+0x44>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013e6:	bf00      	nop
 80013e8:	f7ff ffd2 	bl	8001390 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d8f7      	bhi.n	80013e8 <HAL_Delay+0x28>
  {
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000190 	.word	0x20000190

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db0b      	blt.n	8001496 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	4907      	ldr	r1, [pc, #28]	; (80014a4 <__NVIC_EnableIRQ+0x38>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2001      	movs	r0, #1
 800148e:	fa00 f202 	lsl.w	r2, r0, r2
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff29 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff40 	bl	8001450 <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff90 	bl	80014fc <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5f 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff33 	bl	800146c <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffa4 	bl	8001564 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001636:	e14c      	b.n	80018d2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 813e 	beq.w	80018cc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b01      	cmp	r3, #1
 800165a:	d005      	beq.n	8001668 <HAL_GPIO_Init+0x40>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d130      	bne.n	80016ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800169e:	2201      	movs	r2, #1
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	f003 0201 	and.w	r2, r3, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d017      	beq.n	8001706 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d123      	bne.n	800175a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	08da      	lsrs	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3208      	adds	r2, #8
 800171a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	08da      	lsrs	r2, r3, #3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3208      	adds	r2, #8
 8001754:	6939      	ldr	r1, [r7, #16]
 8001756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0203 	and.w	r2, r3, #3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8098 	beq.w	80018cc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800179c:	4a54      	ldr	r2, [pc, #336]	; (80018f0 <HAL_GPIO_Init+0x2c8>)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	3302      	adds	r3, #2
 80017a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	220f      	movs	r2, #15
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017c6:	d019      	beq.n	80017fc <HAL_GPIO_Init+0x1d4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a4a      	ldr	r2, [pc, #296]	; (80018f4 <HAL_GPIO_Init+0x2cc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d013      	beq.n	80017f8 <HAL_GPIO_Init+0x1d0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a49      	ldr	r2, [pc, #292]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d00d      	beq.n	80017f4 <HAL_GPIO_Init+0x1cc>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a48      	ldr	r2, [pc, #288]	; (80018fc <HAL_GPIO_Init+0x2d4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d007      	beq.n	80017f0 <HAL_GPIO_Init+0x1c8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a47      	ldr	r2, [pc, #284]	; (8001900 <HAL_GPIO_Init+0x2d8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d101      	bne.n	80017ec <HAL_GPIO_Init+0x1c4>
 80017e8:	2304      	movs	r3, #4
 80017ea:	e008      	b.n	80017fe <HAL_GPIO_Init+0x1d6>
 80017ec:	2307      	movs	r3, #7
 80017ee:	e006      	b.n	80017fe <HAL_GPIO_Init+0x1d6>
 80017f0:	2303      	movs	r3, #3
 80017f2:	e004      	b.n	80017fe <HAL_GPIO_Init+0x1d6>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e002      	b.n	80017fe <HAL_GPIO_Init+0x1d6>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <HAL_GPIO_Init+0x1d6>
 80017fc:	2300      	movs	r3, #0
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	f002 0203 	and.w	r2, r2, #3
 8001804:	0092      	lsls	r2, r2, #2
 8001806:	4093      	lsls	r3, r2
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800180e:	4938      	ldr	r1, [pc, #224]	; (80018f0 <HAL_GPIO_Init+0x2c8>)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	3302      	adds	r3, #2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800181c:	4b39      	ldr	r3, [pc, #228]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001840:	4a30      	ldr	r2, [pc, #192]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001846:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800186a:	4a26      	ldr	r2, [pc, #152]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001870:	4b24      	ldr	r3, [pc, #144]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 8001872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001896:	4a1b      	ldr	r2, [pc, #108]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 80018a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018c4:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f47f aeab 	bne.w	8001638 <HAL_GPIO_Init+0x10>
  }
}
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40010000 	.word	0x40010000
 80018f4:	48000400 	.word	0x48000400
 80018f8:	48000800 	.word	0x48000800
 80018fc:	48000c00 	.word	0x48000c00
 8001900:	48001000 	.word	0x48001000
 8001904:	58000800 	.word	0x58000800

08001908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001924:	e002      	b.n	800192c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001944:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	0c1b      	lsrs	r3, r3, #16
 800194c:	041b      	lsls	r3, r3, #16
 800194e:	43db      	mvns	r3, r3
 8001950:	401a      	ands	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800195a:	4313      	orrs	r3, r2
 800195c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_RCC_GetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPTIMClockSource(uint32_t LPTIMx)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4013      	ands	r3, r2
 8001980:	0c1a      	lsrs	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4313      	orrs	r3, r2
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_APB1_GRP1_ForceReset>:
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800199a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	638b      	str	r3, [r1, #56]	; 0x38
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LL_APB1_GRP2_ForceReset>:
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 80019be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_APB1_GRP1_ReleaseReset>:
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80019e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019f0:	4013      	ands	r3, r2
 80019f2:	638b      	str	r3, [r1, #56]	; 0x38
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_APB1_GRP2_ReleaseReset>:
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a16:	4013      	ands	r3, r2
 8001a18:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e08f      	b.n	8001b5a <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d106      	bne.n	8001a5a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff fa41 	bl	8000edc <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d004      	beq.n	8001a7c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a7a:	d103      	bne.n	8001a84 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f023 031e 	bic.w	r3, r3, #30
 8001a82:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d005      	beq.n	8001a9c <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_LPTIM_Init+0x13c>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001aac:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001ab2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001ab8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001abe:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d004      	beq.n	8001af0 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001aee:	d107      	bne.n	8001b00 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001af8:	4313      	orrs	r3, r2
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00a      	beq.n	8001b22 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001b14:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001b1a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_LPTIM_Init+0x140>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d108      	bne.n	8001b46 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	621a      	str	r2, [r3, #32]
 8001b44:	e004      	b.n	8001b50 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b4e:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	ff19f1fe 	.word	0xff19f1fe
 8001b68:	40007c00 	.word	0x40007c00

08001b6c <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a39      	ldr	r2, [pc, #228]	; (8001c68 <HAL_LPTIM_Counter_Start_IT+0xfc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d108      	bne.n	8001b9a <HAL_LPTIM_Counter_Start_IT+0x2e>
 8001b88:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <HAL_LPTIM_Counter_Start_IT+0x100>)
 8001b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b8e:	4a37      	ldr	r2, [pc, #220]	; (8001c6c <HAL_LPTIM_Counter_Start_IT+0x100>)
 8001b90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b98:	e007      	b.n	8001baa <HAL_LPTIM_Counter_Start_IT+0x3e>
 8001b9a:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <HAL_LPTIM_Counter_Start_IT+0x100>)
 8001b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ba0:	4a32      	ldr	r2, [pc, #200]	; (8001c6c <HAL_LPTIM_Counter_Start_IT+0x100>)
 8001ba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ba6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d00c      	beq.n	8001bcc <HAL_LPTIM_Counter_Start_IT+0x60>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bba:	d107      	bne.n	8001bcc <HAL_LPTIM_Counter_Start_IT+0x60>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8001bca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2210      	movs	r2, #16
 8001be2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001bec:	2110      	movs	r1, #16
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f924 	bl	8001e3c <LPTIM_WaitForFlag>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d101      	bne.n	8001bfe <HAL_LPTIM_Counter_Start_IT+0x92>
  {
    return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e02f      	b.n	8001c5e <HAL_LPTIM_Counter_Start_IT+0xf2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f94c 	bl	8001e9c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f90a 	bl	8001e1e <HAL_LPTIM_GetState>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d101      	bne.n	8001c14 <HAL_LPTIM_Counter_Start_IT+0xa8>
  {
    return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e024      	b.n	8001c5e <HAL_LPTIM_Counter_Start_IT+0xf2>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0210 	orr.w	r2, r2, #16
 8001c22:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0202 	orr.w	r2, r2, #2
 8001c32:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691a      	ldr	r2, [r3, #16]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0204 	orr.w	r2, r2, #4
 8001c52:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40007c00 	.word	0x40007c00
 8001c6c:	58000800 	.word	0x58000800

08001c70 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d10d      	bne.n	8001ca2 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d106      	bne.n	8001ca2 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f882 	bl	8001da6 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d10d      	bne.n	8001ccc <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d106      	bne.n	8001ccc <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7fe fc58 	bl	800057c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d10d      	bne.n	8001cf6 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d106      	bne.n	8001cf6 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2204      	movs	r2, #4
 8001cee:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f862 	bl	8001dba <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d10d      	bne.n	8001d20 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d106      	bne.n	8001d20 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2208      	movs	r2, #8
 8001d18:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f857 	bl	8001dce <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d10d      	bne.n	8001d4a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	2b10      	cmp	r3, #16
 8001d3a:	d106      	bne.n	8001d4a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2210      	movs	r2, #16
 8001d42:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f84c 	bl	8001de2 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b20      	cmp	r3, #32
 8001d56:	d10d      	bne.n	8001d74 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 0320 	and.w	r3, r3, #32
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d106      	bne.n	8001d74 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f841 	bl	8001df6 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7e:	2b40      	cmp	r3, #64	; 0x40
 8001d80:	d10d      	bne.n	8001d9e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8c:	2b40      	cmp	r3, #64	; 0x40
 8001d8e:	d106      	bne.n	8001d9e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f836 	bl	8001e0a <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001e2c:	b2db      	uxtb	r3, r3
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <LPTIM_WaitForFlag+0x58>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <LPTIM_WaitForFlag+0x5c>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	0b9b      	lsrs	r3, r3, #14
 8001e56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d002      	beq.n	8001e86 <LPTIM_WaitForFlag+0x4a>
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1ec      	bne.n	8001e60 <LPTIM_WaitForFlag+0x24>

  return result;
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	20000188 	.word	0x20000188
 8001e98:	d1b71759 	.word	0xd1b71759

08001e9c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08c      	sub	sp, #48	; 0x30
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8001eac:	60fb      	str	r3, [r7, #12]
  return(result);
 8001eae:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_OR_OR)
  uint32_t tmpOR;
#endif /* LPTIM_OR_OR */

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	f383 8810 	msr	PRIMASK, r3
}
 8001ebc:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a62      	ldr	r2, [pc, #392]	; (800204c <LPTIM_Disable+0x1b0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d003      	beq.n	8001ed0 <LPTIM_Disable+0x34>
 8001ec8:	4a61      	ldr	r2, [pc, #388]	; (8002050 <LPTIM_Disable+0x1b4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d006      	beq.n	8001edc <LPTIM_Disable+0x40>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8001ece:	e00b      	b.n	8001ee8 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8001ed0:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8001ed4:	f7ff fd4a 	bl	800196c <LL_RCC_GetLPTIMClockSource>
 8001ed8:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 8001eda:	e005      	b.n	8001ee8 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8001edc:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8001ee0:	f7ff fd44 	bl	800196c <LL_RCC_GetLPTIMClockSource>
 8001ee4:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 8001ee6:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	61bb      	str	r3, [r7, #24]
#if defined(LPTIM_OR_OR)
  tmpOR = hlptim->Instance->OR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	617b      	str	r3, [r7, #20]
#endif /* LPTIM_OR_OR */

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a4d      	ldr	r2, [pc, #308]	; (800204c <LPTIM_Disable+0x1b0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d003      	beq.n	8001f22 <LPTIM_Disable+0x86>
 8001f1a:	4a4d      	ldr	r2, [pc, #308]	; (8002050 <LPTIM_Disable+0x1b4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d009      	beq.n	8001f34 <LPTIM_Disable+0x98>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8001f20:	e00f      	b.n	8001f42 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8001f22:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001f26:	f7ff fd34 	bl	8001992 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8001f2a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001f2e:	f7ff fd54 	bl	80019da <LL_APB1_GRP1_ReleaseReset>
      break;
 8001f32:	e006      	b.n	8001f42 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8001f34:	2020      	movs	r0, #32
 8001f36:	f7ff fd3e 	bl	80019b6 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8001f3a:	2020      	movs	r0, #32
 8001f3c:	f7ff fd60 	bl	8001a00 <LL_APB1_GRP2_ReleaseReset>
      break;
 8001f40:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <LPTIM_Disable+0xb2>
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d05f      	beq.n	800200e <LPTIM_Disable+0x172>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a3e      	ldr	r2, [pc, #248]	; (800204c <LPTIM_Disable+0x1b0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d003      	beq.n	8001f60 <LPTIM_Disable+0xc4>
 8001f58:	4a3d      	ldr	r2, [pc, #244]	; (8002050 <LPTIM_Disable+0x1b4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d005      	beq.n	8001f6a <LPTIM_Disable+0xce>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8001f5e:	e009      	b.n	8001f74 <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8001f60:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8001f64:	f7ff fce8 	bl	8001938 <LL_RCC_SetLPTIMClockSource>
        break;
 8001f68:	e004      	b.n	8001f74 <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8001f6a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8001f6e:	f7ff fce3 	bl	8001938 <LL_RCC_SetLPTIMClockSource>
        break;
 8001f72:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01a      	beq.n	8001fb0 <LPTIM_Disable+0x114>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0201 	orr.w	r2, r2, #1
 8001f88:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001f92:	2108      	movs	r1, #8
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff51 	bl	8001e3c <LPTIM_WaitForFlag>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d103      	bne.n	8001fa8 <LPTIM_Disable+0x10c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2208      	movs	r2, #8
 8001fae:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01a      	beq.n	8001fec <LPTIM_Disable+0x150>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0201 	orr.w	r2, r2, #1
 8001fc4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001fce:	2110      	movs	r1, #16
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff33 	bl	8001e3c <LPTIM_WaitForFlag>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d103      	bne.n	8001fe4 <LPTIM_Disable+0x148>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2203      	movs	r2, #3
 8001fe0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2210      	movs	r2, #16
 8001fea:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a16      	ldr	r2, [pc, #88]	; (800204c <LPTIM_Disable+0x1b0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d003      	beq.n	8001ffe <LPTIM_Disable+0x162>
 8001ff6:	4a16      	ldr	r2, [pc, #88]	; (8002050 <LPTIM_Disable+0x1b4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d004      	beq.n	8002006 <LPTIM_Disable+0x16a>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8001ffc:	e007      	b.n	800200e <LPTIM_Disable+0x172>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8001ffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002000:	f7ff fc9a 	bl	8001938 <LL_RCC_SetLPTIMClockSource>
        break;
 8002004:	e003      	b.n	800200e <LPTIM_Disable+0x172>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8002006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002008:	f7ff fc96 	bl	8001938 <LL_RCC_SetLPTIMClockSource>
        break;
 800200c:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0201 	bic.w	r2, r2, #1
 800201c:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002024:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6a3a      	ldr	r2, [r7, #32]
 800202c:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)
  hlptim->Instance->OR = tmpOR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	621a      	str	r2, [r3, #32]
 8002036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002038:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f383 8810 	msr	PRIMASK, r3
}
 8002040:	bf00      	nop
#endif /* LPTIM_OR_OR */

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002042:	bf00      	nop
 8002044:	3730      	adds	r7, #48	; 0x30
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40007c00 	.word	0x40007c00
 8002050:	40009400 	.word	0x40009400

08002054 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0c0      	b.n	80021e8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d106      	bne.n	8002080 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe ffce 	bl	800101c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2203      	movs	r2, #3
 8002084:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f003 f81d 	bl	80050cc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]
 8002096:	e03e      	b.n	8002116 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	440b      	add	r3, r1
 80020a6:	3311      	adds	r3, #17
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	3310      	adds	r3, #16
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	3313      	adds	r3, #19
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	3320      	adds	r3, #32
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	3324      	adds	r3, #36	; 0x24
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	3301      	adds	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	791b      	ldrb	r3, [r3, #4]
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	429a      	cmp	r2, r3
 800211e:	d3bb      	bcc.n	8002098 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	e044      	b.n	80021b0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	f203 1351 	addw	r3, r3, #337	; 0x151
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	f203 1353 	addw	r3, r3, #339	; 0x153
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	440b      	add	r3, r1
 800218c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	440b      	add	r3, r1
 80021a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	3301      	adds	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	791b      	ldrb	r3, [r3, #4]
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d3b5      	bcc.n	8002126 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3304      	adds	r3, #4
 80021c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80021c6:	f002 ff9c 	bl	8005102 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7a9b      	ldrb	r3, [r3, #10]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d102      	bne.n	80021e6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f805 	bl	80021f0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002214:	b29b      	uxth	r3, r3
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002228:	b29b      	uxth	r3, r3
 800222a:	f043 0302 	orr.w	r3, r3, #2
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800224e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	58000400 	.word	0x58000400

08002264 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <HAL_PWREx_GetVoltageRange+0x18>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	58000400 	.word	0x58000400

08002280 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 0307 	bic.w	r3, r3, #7
 8002292:	4a0f      	ldr	r2, [pc, #60]	; (80022d0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80022a0:	f043 0304 	orr.w	r3, r3, #4
 80022a4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80022ac:	bf30      	wfi
 80022ae:	e002      	b.n	80022b6 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80022b0:	bf40      	sev
    __WFE();
 80022b2:	bf20      	wfe
    __WFE();
 80022b4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	4a06      	ldr	r2, [pc, #24]	; (80022d4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	6113      	str	r3, [r2, #16]
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	58000400 	.word	0x58000400
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80022dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022ea:	d101      	bne.n	80022f0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_RCC_HSE_Enable>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800230a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_RCC_HSE_Disable>:
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800231e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_RCC_HSE_IsReady>:
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800233c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800234a:	d101      	bne.n	8002350 <LL_RCC_HSE_IsReady+0x18>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <LL_RCC_HSE_IsReady+0x1a>
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_RCC_HSI_Enable>:
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800236a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236e:	6013      	str	r3, [r2, #0]
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <LL_RCC_HSI_Disable>:
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800237e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_RCC_HSI_IsReady>:
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023aa:	d101      	bne.n	80023b0 <LL_RCC_HSI_IsReady+0x18>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <LL_RCC_HSI_IsReady+0x1a>
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_RCC_HSI_SetCalibTrimming>:
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80023c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	061b      	lsls	r3, r3, #24
 80023d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_RCC_HSI48_Enable>:
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_RCC_HSI48_Disable>:
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800240c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002410:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002414:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <LL_RCC_HSI48_IsReady>:
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800242e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002432:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b02      	cmp	r3, #2
 800243c:	d101      	bne.n	8002442 <LL_RCC_HSI48_IsReady+0x18>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <LL_RCC_HSI48_IsReady+0x1a>
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <LL_RCC_LSE_Enable>:
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_RCC_LSE_Disable>:
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <LL_RCC_LSE_EnableBypass>:
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_RCC_LSE_DisableBypass>:
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c4:	f023 0304 	bic.w	r3, r3, #4
 80024c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <LL_RCC_LSE_IsReady>:
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d101      	bne.n	80024ee <LL_RCC_LSE_IsReady+0x18>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <LL_RCC_LSE_IsReady+0x1a>
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <LL_RCC_LSI1_Enable>:
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80024fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002506:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_RCC_LSI1_Disable>:
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002528:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <LL_RCC_LSI1_IsReady>:
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d101      	bne.n	8002556 <LL_RCC_LSI1_IsReady+0x18>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <LL_RCC_LSI1_IsReady+0x1a>
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <LL_RCC_LSI2_Enable>:
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800256e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002572:	f043 0304 	orr.w	r3, r3, #4
 8002576:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_RCC_LSI2_Disable>:
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002594:	f023 0304 	bic.w	r3, r3, #4
 8002598:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <LL_RCC_LSI2_IsReady>:
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80025aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d101      	bne.n	80025be <LL_RCC_LSI2_IsReady+0x18>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <LL_RCC_LSI2_IsReady+0x1a>
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <LL_RCC_LSI2_SetTrimming>:
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80025d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_RCC_MSI_Enable>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80025fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <LL_RCC_MSI_Disable>:
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6013      	str	r3, [r2, #0]
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <LL_RCC_MSI_IsReady>:
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d101      	bne.n	800264a <LL_RCC_MSI_IsReady+0x16>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <LL_RCC_MSI_IsReady+0x18>
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_RCC_MSI_SetRange>:
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800265e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <LL_RCC_MSI_GetRange>:
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2bb0      	cmp	r3, #176	; 0xb0
 8002694:	d901      	bls.n	800269a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002696:	23b0      	movs	r3, #176	; 0xb0
 8002698:	607b      	str	r3, [r7, #4]
  return msiRange;
 800269a:	687b      	ldr	r3, [r7, #4]
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <LL_RCC_SetSysClkSource>:
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f023 0203 	bic.w	r2, r3, #3
 80026e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_RCC_GetSysClkSource>:
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 030c 	and.w	r3, r3, #12
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <LL_RCC_SetAHBPrescaler>:
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800271a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <LL_C2_RCC_SetAHBPrescaler>:
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002746:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800274a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <LL_RCC_SetAHB4Prescaler>:
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800276e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002772:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002776:	f023 020f 	bic.w	r2, r3, #15
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_RCC_SetAPB1Prescaler>:
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800279c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_RCC_SetAPB2Prescaler>:
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80027c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	608b      	str	r3, [r1, #8]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_RCC_GetAHBPrescaler>:
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80027e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_RCC_GetAHB4Prescaler>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002804:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_RCC_GetAPB1Prescaler>:
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800281c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_RCC_GetAPB2Prescaler>:
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800283e:	4618      	mov	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800284c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285a:	6013      	str	r3, [r2, #0]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002874:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002878:	6013      	str	r3, [r2, #0]
}
 800287a:	bf00      	nop
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002896:	d101      	bne.n	800289c <LL_RCC_PLL_IsReady+0x18>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <LL_RCC_PLL_IsReady+0x1a>
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80028de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80028f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0303 	and.w	r3, r3, #3
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d101      	bne.n	8002922 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002936:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002942:	d101      	bne.n	8002948 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002968:	d101      	bne.n	800296e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800298c:	d101      	bne.n	8002992 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029b0:	d101      	bne.n	80029b6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b08d      	sub	sp, #52	; 0x34
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e363      	b.n	800309e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 808d 	beq.w	8002afe <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e4:	f7ff fe89 	bl	80026fa <LL_RCC_GetSysClkSource>
 80029e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ea:	f7ff ff82 	bl	80028f2 <LL_RCC_PLL_GetMainSource>
 80029ee:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_RCC_OscConfig+0x3e>
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	2b0c      	cmp	r3, #12
 80029fa:	d147      	bne.n	8002a8c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d144      	bne.n	8002a8c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e347      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002a12:	f7ff fe34 	bl	800267e <LL_RCC_MSI_GetRange>
 8002a16:	4603      	mov	r3, r0
 8002a18:	429c      	cmp	r4, r3
 8002a1a:	d914      	bls.n	8002a46 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fd2f 	bl	8003484 <RCC_SetFlashLatencyFromMSIRange>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e336      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fe0e 	bl	8002656 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fe32 	bl	80026a8 <LL_RCC_MSI_SetCalibTrimming>
 8002a44:	e013      	b.n	8002a6e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fe03 	bl	8002656 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fe27 	bl	80026a8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fd10 	bl	8003484 <RCC_SetFlashLatencyFromMSIRange>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e317      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a6e:	f000 fcc9 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4aa4      	ldr	r2, [pc, #656]	; (8002d08 <HAL_RCC_OscConfig+0x344>)
 8002a76:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a78:	4ba4      	ldr	r3, [pc, #656]	; (8002d0c <HAL_RCC_OscConfig+0x348>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe fc39 	bl	80012f4 <HAL_InitTick>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d039      	beq.n	8002afc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e308      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01e      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a94:	f7ff fdb0 	bl	80025f8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a98:	f7fe fc7a 	bl	8001390 <HAL_GetTick>
 8002a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fc76 	bl	8001390 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e2f5      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002ab2:	f7ff fdbf 	bl	8002634 <LL_RCC_MSI_IsReady>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f1      	beq.n	8002aa0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fdc8 	bl	8002656 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fdec 	bl	80026a8 <LL_RCC_MSI_SetCalibTrimming>
 8002ad0:	e015      	b.n	8002afe <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ad2:	f7ff fda0 	bl	8002616 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fc5b 	bl	8001390 <HAL_GetTick>
 8002ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ade:	f7fe fc57 	bl	8001390 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e2d6      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002af0:	f7ff fda0 	bl	8002634 <LL_RCC_MSI_IsReady>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f1      	bne.n	8002ade <HAL_RCC_OscConfig+0x11a>
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002afc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d047      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b0a:	f7ff fdf6 	bl	80026fa <LL_RCC_GetSysClkSource>
 8002b0e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b10:	f7ff feef 	bl	80028f2 <LL_RCC_PLL_GetMainSource>
 8002b14:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_OscConfig+0x164>
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d108      	bne.n	8002b34 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d105      	bne.n	8002b34 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d134      	bne.n	8002b9a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e2b4      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d102      	bne.n	8002b44 <HAL_RCC_OscConfig+0x180>
 8002b3e:	f7ff fbdd 	bl	80022fc <LL_RCC_HSE_Enable>
 8002b42:	e001      	b.n	8002b48 <HAL_RCC_OscConfig+0x184>
 8002b44:	f7ff fbe9 	bl	800231a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d012      	beq.n	8002b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fc1e 	bl	8001390 <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fe fc1a 	bl	8001390 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e299      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b6a:	f7ff fbe5 	bl	8002338 <LL_RCC_HSE_IsReady>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f1      	beq.n	8002b58 <HAL_RCC_OscConfig+0x194>
 8002b74:	e011      	b.n	8002b9a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fe fc0b 	bl	8001390 <HAL_GetTick>
 8002b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b7e:	f7fe fc07 	bl	8001390 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b64      	cmp	r3, #100	; 0x64
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e286      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b90:	f7ff fbd2 	bl	8002338 <LL_RCC_HSE_IsReady>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f1      	bne.n	8002b7e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d04c      	beq.n	8002c40 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba6:	f7ff fda8 	bl	80026fa <LL_RCC_GetSysClkSource>
 8002baa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bac:	f7ff fea1 	bl	80028f2 <LL_RCC_PLL_GetMainSource>
 8002bb0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x200>
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	2b0c      	cmp	r3, #12
 8002bbc:	d10e      	bne.n	8002bdc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d10b      	bne.n	8002bdc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e266      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fbf1 	bl	80023bc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002bda:	e031      	b.n	8002c40 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d019      	beq.n	8002c18 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be4:	f7ff fbba 	bl	800235c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe fbd2 	bl	8001390 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf0:	f7fe fbce 	bl	8001390 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e24d      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c02:	f7ff fbc9 	bl	8002398 <LL_RCC_HSI_IsReady>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f1      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fbd3 	bl	80023bc <LL_RCC_HSI_SetCalibTrimming>
 8002c16:	e013      	b.n	8002c40 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c18:	f7ff fbaf 	bl	800237a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fbb8 	bl	8001390 <HAL_GetTick>
 8002c20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c24:	f7fe fbb4 	bl	8001390 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e233      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c36:	f7ff fbaf 	bl	8002398 <LL_RCC_HSI_IsReady>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f1      	bne.n	8002c24 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80a3 	beq.w	8002da0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d076      	beq.n	8002d50 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d046      	beq.n	8002cfc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002c6e:	f7ff fc66 	bl	800253e <LL_RCC_LSI1_IsReady>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d113      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002c78:	f7ff fc3f 	bl	80024fa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c7c:	f7fe fb88 	bl	8001390 <HAL_GetTick>
 8002c80:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c84:	f7fe fb84 	bl	8001390 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e203      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002c96:	f7ff fc52 	bl	800253e <LL_RCC_LSI1_IsReady>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f1      	beq.n	8002c84 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002ca0:	f7ff fc5f 	bl	8002562 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fb74 	bl	8001390 <HAL_GetTick>
 8002ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002cac:	f7fe fb70 	bl	8001390 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e1ef      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002cbe:	f7ff fc72 	bl	80025a6 <LL_RCC_LSI2_IsReady>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f1      	beq.n	8002cac <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fc7c 	bl	80025ca <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002cd2:	f7ff fc23 	bl	800251c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fb5b 	bl	8001390 <HAL_GetTick>
 8002cda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002cde:	f7fe fb57 	bl	8001390 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e1d6      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002cf0:	f7ff fc25 	bl	800253e <LL_RCC_LSI1_IsReady>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f1      	bne.n	8002cde <HAL_RCC_OscConfig+0x31a>
 8002cfa:	e051      	b.n	8002da0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002cfc:	f7ff fbfd 	bl	80024fa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fb46 	bl	8001390 <HAL_GetTick>
 8002d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002d06:	e00c      	b.n	8002d22 <HAL_RCC_OscConfig+0x35e>
 8002d08:	20000188 	.word	0x20000188
 8002d0c:	2000018c 	.word	0x2000018c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d10:	f7fe fb3e 	bl	8001390 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e1bd      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002d22:	f7ff fc0c 	bl	800253e <LL_RCC_LSI1_IsReady>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f1      	beq.n	8002d10 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002d2c:	f7ff fc2a 	bl	8002584 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d32:	f7fe fb2d 	bl	8001390 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e1ac      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002d44:	f7ff fc2f 	bl	80025a6 <LL_RCC_LSI2_IsReady>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f1      	bne.n	8002d32 <HAL_RCC_OscConfig+0x36e>
 8002d4e:	e027      	b.n	8002da0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002d50:	f7ff fc18 	bl	8002584 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe fb1c 	bl	8001390 <HAL_GetTick>
 8002d58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d5c:	f7fe fb18 	bl	8001390 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e197      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002d6e:	f7ff fc1a 	bl	80025a6 <LL_RCC_LSI2_IsReady>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f1      	bne.n	8002d5c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002d78:	f7ff fbd0 	bl	800251c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fb08 	bl	8001390 <HAL_GetTick>
 8002d80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d84:	f7fe fb04 	bl	8001390 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e183      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002d96:	f7ff fbd2 	bl	800253e <LL_RCC_LSI1_IsReady>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f1      	bne.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d05b      	beq.n	8002e64 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dac:	4ba7      	ldr	r3, [pc, #668]	; (800304c <HAL_RCC_OscConfig+0x688>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d114      	bne.n	8002de2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002db8:	f7ff fa44 	bl	8002244 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dbc:	f7fe fae8 	bl	8001390 <HAL_GetTick>
 8002dc0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc4:	f7fe fae4 	bl	8001390 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e163      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd6:	4b9d      	ldr	r3, [pc, #628]	; (800304c <HAL_RCC_OscConfig+0x688>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d102      	bne.n	8002df0 <HAL_RCC_OscConfig+0x42c>
 8002dea:	f7ff fb30 	bl	800244e <LL_RCC_LSE_Enable>
 8002dee:	e00c      	b.n	8002e0a <HAL_RCC_OscConfig+0x446>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b05      	cmp	r3, #5
 8002df6:	d104      	bne.n	8002e02 <HAL_RCC_OscConfig+0x43e>
 8002df8:	f7ff fb4b 	bl	8002492 <LL_RCC_LSE_EnableBypass>
 8002dfc:	f7ff fb27 	bl	800244e <LL_RCC_LSE_Enable>
 8002e00:	e003      	b.n	8002e0a <HAL_RCC_OscConfig+0x446>
 8002e02:	f7ff fb35 	bl	8002470 <LL_RCC_LSE_Disable>
 8002e06:	f7ff fb55 	bl	80024b4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d014      	beq.n	8002e3c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e12:	f7fe fabd 	bl	8001390 <HAL_GetTick>
 8002e16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7fe fab9 	bl	8001390 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e136      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e30:	f7ff fb51 	bl	80024d6 <LL_RCC_LSE_IsReady>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0ef      	beq.n	8002e1a <HAL_RCC_OscConfig+0x456>
 8002e3a:	e013      	b.n	8002e64 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe faa8 	bl	8001390 <HAL_GetTick>
 8002e40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f7fe faa4 	bl	8001390 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e121      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002e5a:	f7ff fb3c 	bl	80024d6 <LL_RCC_LSE_IsReady>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1ef      	bne.n	8002e44 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d02c      	beq.n	8002eca <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d014      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e78:	f7ff fab5 	bl	80023e6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7c:	f7fe fa88 	bl	8001390 <HAL_GetTick>
 8002e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e84:	f7fe fa84 	bl	8001390 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e103      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002e96:	f7ff fac8 	bl	800242a <LL_RCC_HSI48_IsReady>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f1      	beq.n	8002e84 <HAL_RCC_OscConfig+0x4c0>
 8002ea0:	e013      	b.n	8002eca <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ea2:	f7ff fab1 	bl	8002408 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7fe fa73 	bl	8001390 <HAL_GetTick>
 8002eaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eae:	f7fe fa6f 	bl	8001390 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e0ee      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002ec0:	f7ff fab3 	bl	800242a <LL_RCC_HSI48_IsReady>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f1      	bne.n	8002eae <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 80e4 	beq.w	800309c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed4:	f7ff fc11 	bl	80026fa <LL_RCC_GetSysClkSource>
 8002ed8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	f040 80b4 	bne.w	8003054 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 0203 	and.w	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d123      	bne.n	8002f42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d11c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d114      	bne.n	8002f42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d10d      	bne.n	8002f42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d05d      	beq.n	8002ffe <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b0c      	cmp	r3, #12
 8002f46:	d058      	beq.n	8002ffa <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e0a1      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f5a:	f7ff fc84 	bl	8002866 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f5e:	f7fe fa17 	bl	8001390 <HAL_GetTick>
 8002f62:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f66:	f7fe fa13 	bl	8001390 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e092      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ef      	bne.n	8002f66 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	4b30      	ldr	r3, [pc, #192]	; (8003050 <HAL_RCC_OscConfig+0x68c>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f98:	4311      	orrs	r1, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f9e:	0212      	lsls	r2, r2, #8
 8002fa0:	4311      	orrs	r1, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fa6:	4311      	orrs	r1, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fac:	4311      	orrs	r1, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fbc:	f7ff fc44 	bl	8002848 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fd0:	f7fe f9de 	bl	8001390 <HAL_GetTick>
 8002fd4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe f9da 	bl	8001390 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e059      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ef      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff8:	e050      	b.n	800309c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e04f      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d147      	bne.n	800309c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800300c:	f7ff fc1c 	bl	8002848 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800301a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003020:	f7fe f9b6 	bl	8001390 <HAL_GetTick>
 8003024:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003028:	f7fe f9b2 	bl	8001390 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e031      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0ef      	beq.n	8003028 <HAL_RCC_OscConfig+0x664>
 8003048:	e028      	b.n	800309c <HAL_RCC_OscConfig+0x6d8>
 800304a:	bf00      	nop
 800304c:	58000400 	.word	0x58000400
 8003050:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d01e      	beq.n	8003098 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	f7ff fc04 	bl	8002866 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fe f997 	bl	8001390 <HAL_GetTick>
 8003062:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003066:	f7fe f993 	bl	8001390 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e012      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1ef      	bne.n	8003066 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCC_OscConfig+0x6e4>)
 8003092:	4013      	ands	r3, r2
 8003094:	60cb      	str	r3, [r1, #12]
 8003096:	e001      	b.n	800309c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3734      	adds	r7, #52	; 0x34
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd90      	pop	{r4, r7, pc}
 80030a6:	bf00      	nop
 80030a8:	eefefffc 	.word	0xeefefffc

080030ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e12d      	b.n	800331c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b98      	ldr	r3, [pc, #608]	; (8003324 <HAL_RCC_ClockConfig+0x278>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d91b      	bls.n	8003106 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b95      	ldr	r3, [pc, #596]	; (8003324 <HAL_RCC_ClockConfig+0x278>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	4993      	ldr	r1, [pc, #588]	; (8003324 <HAL_RCC_ClockConfig+0x278>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030de:	f7fe f957 	bl	8001390 <HAL_GetTick>
 80030e2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030e6:	f7fe f953 	bl	8001390 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e111      	b.n	800331c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f8:	4b8a      	ldr	r3, [pc, #552]	; (8003324 <HAL_RCC_ClockConfig+0x278>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d1ef      	bne.n	80030e6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d016      	beq.n	8003140 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fafb 	bl	8002712 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800311c:	f7fe f938 	bl	8001390 <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003124:	f7fe f934 	bl	8001390 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e0f2      	b.n	800331c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003136:	f7ff fbe8 	bl	800290a <LL_RCC_IsActiveFlag_HPRE>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f1      	beq.n	8003124 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d016      	beq.n	800317a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff faf2 	bl	800273a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003156:	f7fe f91b 	bl	8001390 <HAL_GetTick>
 800315a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800315e:	f7fe f917 	bl	8001390 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e0d5      	b.n	800331c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003170:	f7ff fbdd 	bl	800292e <LL_RCC_IsActiveFlag_C2HPRE>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f1      	beq.n	800315e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d016      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff faeb 	bl	8002766 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003190:	f7fe f8fe 	bl	8001390 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003198:	f7fe f8fa 	bl	8001390 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0b8      	b.n	800331c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80031aa:	f7ff fbd3 	bl	8002954 <LL_RCC_IsActiveFlag_SHDHPRE>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f1      	beq.n	8003198 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d016      	beq.n	80031ee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fae5 	bl	8002794 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031ca:	f7fe f8e1 	bl	8001390 <HAL_GetTick>
 80031ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031d2:	f7fe f8dd 	bl	8001390 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e09b      	b.n	800331c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80031e4:	f7ff fbc9 	bl	800297a <LL_RCC_IsActiveFlag_PPRE1>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f1      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d017      	beq.n	800322a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fadb 	bl	80027bc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003206:	f7fe f8c3 	bl	8001390 <HAL_GetTick>
 800320a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800320c:	e008      	b.n	8003220 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800320e:	f7fe f8bf 	bl	8001390 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e07d      	b.n	800331c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003220:	f7ff fbbd 	bl	800299e <LL_RCC_IsActiveFlag_PPRE2>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f1      	beq.n	800320e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d043      	beq.n	80032be <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d106      	bne.n	800324c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800323e:	f7ff f87b 	bl	8002338 <LL_RCC_HSE_IsReady>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d11e      	bne.n	8003286 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e067      	b.n	800331c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d106      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003254:	f7ff fb16 	bl	8002884 <LL_RCC_PLL_IsReady>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d113      	bne.n	8003286 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e05c      	b.n	800331c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800326a:	f7ff f9e3 	bl	8002634 <LL_RCC_MSI_IsReady>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d108      	bne.n	8003286 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e051      	b.n	800331c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003278:	f7ff f88e 	bl	8002398 <LL_RCC_HSI_IsReady>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e04a      	b.n	800331c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fa21 	bl	80026d2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003290:	f7fe f87e 	bl	8001390 <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	e00a      	b.n	80032ae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003298:	f7fe f87a 	bl	8001390 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e036      	b.n	800331c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	f7ff fa24 	bl	80026fa <LL_RCC_GetSysClkSource>
 80032b2:	4602      	mov	r2, r0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d1ec      	bne.n	8003298 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032be:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_RCC_ClockConfig+0x278>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d21b      	bcs.n	8003304 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032cc:	4b15      	ldr	r3, [pc, #84]	; (8003324 <HAL_RCC_ClockConfig+0x278>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 0207 	bic.w	r2, r3, #7
 80032d4:	4913      	ldr	r1, [pc, #76]	; (8003324 <HAL_RCC_ClockConfig+0x278>)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032dc:	f7fe f858 	bl	8001390 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032e4:	f7fe f854 	bl	8001390 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e012      	b.n	800331c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_ClockConfig+0x278>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d1ef      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003304:	f000 f87e 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003308:	4603      	mov	r3, r0
 800330a:	4a07      	ldr	r2, [pc, #28]	; (8003328 <HAL_RCC_ClockConfig+0x27c>)
 800330c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800330e:	f7fe f84b 	bl	80013a8 <HAL_GetTickPrio>
 8003312:	4603      	mov	r3, r0
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd ffed 	bl	80012f4 <HAL_InitTick>
 800331a:	4603      	mov	r3, r0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	58004000 	.word	0x58004000
 8003328:	20000188 	.word	0x20000188

0800332c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003332:	f7ff f9e2 	bl	80026fa <LL_RCC_GetSysClkSource>
 8003336:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10a      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800333e:	f7ff f99e 	bl	800267e <LL_RCC_MSI_GetRange>
 8003342:	4603      	mov	r3, r0
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	4a2b      	ldr	r2, [pc, #172]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800334c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e04b      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b04      	cmp	r3, #4
 8003358:	d102      	bne.n	8003360 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800335a:	4b28      	ldr	r3, [pc, #160]	; (80033fc <HAL_RCC_GetSysClockFreq+0xd0>)
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e045      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b08      	cmp	r3, #8
 8003364:	d10a      	bne.n	800337c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003366:	f7fe ffb7 	bl	80022d8 <LL_RCC_HSE_IsEnabledDiv2>
 800336a:	4603      	mov	r3, r0
 800336c:	2b01      	cmp	r3, #1
 800336e:	d102      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003370:	4b22      	ldr	r3, [pc, #136]	; (80033fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	e03a      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003376:	4b22      	ldr	r3, [pc, #136]	; (8003400 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	e037      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800337c:	f7ff fab9 	bl	80028f2 <LL_RCC_PLL_GetMainSource>
 8003380:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d003      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x64>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b03      	cmp	r3, #3
 800338c:	d003      	beq.n	8003396 <HAL_RCC_GetSysClockFreq+0x6a>
 800338e:	e00d      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003390:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003392:	60bb      	str	r3, [r7, #8]
        break;
 8003394:	e015      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003396:	f7fe ff9f 	bl	80022d8 <LL_RCC_HSE_IsEnabledDiv2>
 800339a:	4603      	mov	r3, r0
 800339c:	2b01      	cmp	r3, #1
 800339e:	d102      	bne.n	80033a6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80033a0:	4b16      	ldr	r3, [pc, #88]	; (80033fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80033a2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80033a4:	e00d      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80033a6:	4b16      	ldr	r3, [pc, #88]	; (8003400 <HAL_RCC_GetSysClockFreq+0xd4>)
 80033a8:	60bb      	str	r3, [r7, #8]
        break;
 80033aa:	e00a      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80033ac:	f7ff f967 	bl	800267e <LL_RCC_MSI_GetRange>
 80033b0:	4603      	mov	r3, r0
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033be:	60bb      	str	r3, [r7, #8]
        break;
 80033c0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80033c2:	f7ff fa71 	bl	80028a8 <LL_RCC_PLL_GetN>
 80033c6:	4602      	mov	r2, r0
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	fb03 f402 	mul.w	r4, r3, r2
 80033ce:	f7ff fa84 	bl	80028da <LL_RCC_PLL_GetDivider>
 80033d2:	4603      	mov	r3, r0
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	3301      	adds	r3, #1
 80033d8:	fbb4 f4f3 	udiv	r4, r4, r3
 80033dc:	f7ff fa71 	bl	80028c2 <LL_RCC_PLL_GetR>
 80033e0:	4603      	mov	r3, r0
 80033e2:	0f5b      	lsrs	r3, r3, #29
 80033e4:	3301      	adds	r3, #1
 80033e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80033ea:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80033ec:	68fb      	ldr	r3, [r7, #12]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}
 80033f6:	bf00      	nop
 80033f8:	08009130 	.word	0x08009130
 80033fc:	00f42400 	.word	0x00f42400
 8003400:	01e84800 	.word	0x01e84800

08003404 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003404:	b598      	push	{r3, r4, r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003408:	f7ff ff90 	bl	800332c <HAL_RCC_GetSysClockFreq>
 800340c:	4604      	mov	r4, r0
 800340e:	f7ff f9e9 	bl	80027e4 <LL_RCC_GetAHBPrescaler>
 8003412:	4603      	mov	r3, r0
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	4a03      	ldr	r2, [pc, #12]	; (8003428 <HAL_RCC_GetHCLKFreq+0x24>)
 800341c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003420:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd98      	pop	{r3, r4, r7, pc}
 8003428:	080090d0 	.word	0x080090d0

0800342c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800342c:	b598      	push	{r3, r4, r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003430:	f7ff ffe8 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003434:	4604      	mov	r4, r0
 8003436:	f7ff f9ef 	bl	8002818 <LL_RCC_GetAPB1Prescaler>
 800343a:	4603      	mov	r3, r0
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	4a04      	ldr	r2, [pc, #16]	; (8003454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd98      	pop	{r3, r4, r7, pc}
 8003454:	08009110 	.word	0x08009110

08003458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003458:	b598      	push	{r3, r4, r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800345c:	f7ff ffd2 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003460:	4604      	mov	r4, r0
 8003462:	f7ff f9e5 	bl	8002830 <LL_RCC_GetAPB2Prescaler>
 8003466:	4603      	mov	r3, r0
 8003468:	0adb      	lsrs	r3, r3, #11
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	4a04      	ldr	r2, [pc, #16]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	fa24 f303 	lsr.w	r3, r4, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd98      	pop	{r3, r4, r7, pc}
 8003480:	08009110 	.word	0x08009110

08003484 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2bb0      	cmp	r3, #176	; 0xb0
 8003490:	d903      	bls.n	800349a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e007      	b.n	80034aa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	4a11      	ldr	r2, [pc, #68]	; (80034e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80034a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80034aa:	f7ff f9a7 	bl	80027fc <LL_RCC_GetAHB4Prescaler>
 80034ae:	4603      	mov	r3, r0
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80034b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	0c9c      	lsrs	r4, r3, #18
 80034ce:	f7fe fec9 	bl	8002264 <HAL_PWREx_GetVoltageRange>
 80034d2:	4603      	mov	r3, r0
 80034d4:	4619      	mov	r1, r3
 80034d6:	4620      	mov	r0, r4
 80034d8:	f000 f80c 	bl	80034f4 <RCC_SetFlashLatency>
 80034dc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd90      	pop	{r4, r7, pc}
 80034e6:	bf00      	nop
 80034e8:	08009130 	.word	0x08009130
 80034ec:	080090d0 	.word	0x080090d0
 80034f0:	431bde83 	.word	0x431bde83

080034f4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b093      	sub	sp, #76	; 0x4c
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80034fe:	4b37      	ldr	r3, [pc, #220]	; (80035dc <RCC_SetFlashLatency+0xe8>)
 8003500:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003504:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003506:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800350a:	4a35      	ldr	r2, [pc, #212]	; (80035e0 <RCC_SetFlashLatency+0xec>)
 800350c:	f107 031c 	add.w	r3, r7, #28
 8003510:	ca07      	ldmia	r2, {r0, r1, r2}
 8003512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003516:	4b33      	ldr	r3, [pc, #204]	; (80035e4 <RCC_SetFlashLatency+0xf0>)
 8003518:	f107 040c 	add.w	r4, r7, #12
 800351c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800351e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003522:	2300      	movs	r3, #0
 8003524:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800352c:	d11a      	bne.n	8003564 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800352e:	2300      	movs	r3, #0
 8003530:	643b      	str	r3, [r7, #64]	; 0x40
 8003532:	e013      	b.n	800355c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	3348      	adds	r3, #72	; 0x48
 800353a:	443b      	add	r3, r7
 800353c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	429a      	cmp	r2, r3
 8003544:	d807      	bhi.n	8003556 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	3348      	adds	r3, #72	; 0x48
 800354c:	443b      	add	r3, r7
 800354e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003552:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003554:	e020      	b.n	8003598 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003558:	3301      	adds	r3, #1
 800355a:	643b      	str	r3, [r7, #64]	; 0x40
 800355c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355e:	2b03      	cmp	r3, #3
 8003560:	d9e8      	bls.n	8003534 <RCC_SetFlashLatency+0x40>
 8003562:	e019      	b.n	8003598 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003564:	2300      	movs	r3, #0
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003568:	e013      	b.n	8003592 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800356a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	3348      	adds	r3, #72	; 0x48
 8003570:	443b      	add	r3, r7
 8003572:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	d807      	bhi.n	800358c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	3348      	adds	r3, #72	; 0x48
 8003582:	443b      	add	r3, r7
 8003584:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003588:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800358a:	e005      	b.n	8003598 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800358c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358e:	3301      	adds	r3, #1
 8003590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003594:	2b02      	cmp	r3, #2
 8003596:	d9e8      	bls.n	800356a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003598:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <RCC_SetFlashLatency+0xf4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 0207 	bic.w	r2, r3, #7
 80035a0:	4911      	ldr	r1, [pc, #68]	; (80035e8 <RCC_SetFlashLatency+0xf4>)
 80035a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035a8:	f7fd fef2 	bl	8001390 <HAL_GetTick>
 80035ac:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80035ae:	e008      	b.n	80035c2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80035b0:	f7fd feee 	bl	8001390 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e007      	b.n	80035d2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <RCC_SetFlashLatency+0xf4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1ef      	bne.n	80035b0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	374c      	adds	r7, #76	; 0x4c
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd90      	pop	{r4, r7, pc}
 80035da:	bf00      	nop
 80035dc:	08005b14 	.word	0x08005b14
 80035e0:	08005b24 	.word	0x08005b24
 80035e4:	08005b30 	.word	0x08005b30
 80035e8:	58004000 	.word	0x58004000

080035ec <LL_RCC_LSE_IsEnabled>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80035f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <LL_RCC_LSE_IsEnabled+0x18>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <LL_RCC_LSE_IsEnabled+0x1a>
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_RCC_LSE_IsReady>:
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b02      	cmp	r3, #2
 8003622:	d101      	bne.n	8003628 <LL_RCC_LSE_IsReady+0x18>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <LL_RCC_LSE_IsReady+0x1a>
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_RCC_MSI_EnablePLLMode>:
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003642:	f043 0304 	orr.w	r3, r3, #4
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <LL_RCC_SetRFWKPClockSource>:
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800365a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003662:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003666:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <LL_RCC_SetSMPSClockSource>:
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	f023 0203 	bic.w	r2, r3, #3
 8003690:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4313      	orrs	r3, r2
 8003698:	624b      	str	r3, [r1, #36]	; 0x24
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <LL_RCC_SetSMPSPrescaler>:
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80036ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4313      	orrs	r3, r2
 80036c0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <LL_RCC_SetUSARTClockSource>:
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80036d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	f023 0203 	bic.w	r2, r3, #3
 80036e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <LL_RCC_SetLPUARTClockSource>:
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800370e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <LL_RCC_SetI2CClockSource>:
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800372e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003732:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800373e:	43db      	mvns	r3, r3
 8003740:	401a      	ands	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800374a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <LL_RCC_SetLPTIMClockSource>:
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	0c1b      	lsrs	r3, r3, #16
 8003774:	041b      	lsls	r3, r3, #16
 8003776:	43db      	mvns	r3, r3
 8003778:	401a      	ands	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_RCC_SetSAIClockSource>:
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800379c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <LL_RCC_SetRNGClockSource>:
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80037c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80037d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_RCC_SetCLK48ClockSource>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80037f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003800:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <LL_RCC_SetUSBClockSource>:
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ffe3 	bl	80037ec <LL_RCC_SetCLK48ClockSource>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <LL_RCC_SetADCClockSource>:
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <LL_RCC_SetRTCClockSource>:
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800386e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <LL_RCC_GetRTCClockSource>:
{
 8003886:	b480      	push	{r7}
 8003888:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800388a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003896:	4618      	mov	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_RCC_ForceBackupDomainReset>:
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <LL_RCC_PLLSAI1_Enable>:
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80038e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038f6:	6013      	str	r3, [r2, #0]
}
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <LL_RCC_PLLSAI1_Disable>:
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003910:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003914:	6013      	str	r3, [r2, #0]
}
 8003916:	bf00      	nop
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <LL_RCC_PLLSAI1_IsReady>:
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800392e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003932:	d101      	bne.n	8003938 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800394c:	2300      	movs	r3, #0
 800394e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003950:	2300      	movs	r3, #0
 8003952:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d034      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003968:	d021      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800396a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800396e:	d81b      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003970:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003974:	d01d      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003976:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800397a:	d815      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00b      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003984:	d110      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003996:	e00d      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	4618      	mov	r0, r3
 800399e:	f000 f94d 	bl	8003c3c <RCCEx_PLLSAI1_ConfigNP>
 80039a2:	4603      	mov	r3, r0
 80039a4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039a6:	e005      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	77fb      	strb	r3, [r7, #31]
        break;
 80039ac:	e002      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80039b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b4:	7ffb      	ldrb	r3, [r7, #31]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d105      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fee8 	bl	8003794 <LL_RCC_SetSAIClockSource>
 80039c4:	e001      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c6:	7ffb      	ldrb	r3, [r7, #31]
 80039c8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d046      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80039d6:	f7ff ff56 	bl	8003886 <LL_RCC_GetRTCClockSource>
 80039da:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d03c      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80039e6:	f7fe fc2d 	bl	8002244 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d105      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff30 	bl	800385a <LL_RCC_SetRTCClockSource>
 80039fa:	e02e      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80039fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a04:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003a06:	f7ff ff4b 	bl	80038a0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003a0a:	f7ff ff5a 	bl	80038c2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003a26:	f7ff fde1 	bl	80035ec <LL_RCC_LSE_IsEnabled>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d114      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a30:	f7fd fcae 	bl	8001390 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003a36:	e00b      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a38:	f7fd fcaa 	bl	8001390 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d902      	bls.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	77fb      	strb	r3, [r7, #31]
              break;
 8003a4e:	e004      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003a50:	f7ff fdde 	bl	8003610 <LL_RCC_LSE_IsReady>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d1ee      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003a5a:	7ffb      	ldrb	r3, [r7, #31]
 8003a5c:	77bb      	strb	r3, [r7, #30]
 8003a5e:	e001      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a60:	7ffb      	ldrb	r3, [r7, #31]
 8003a62:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d004      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fe2a 	bl	80036ce <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d004      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fe35 	bl	80036fa <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d004      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fe5d 	bl	8003760 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d004      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fe52 	bl	8003760 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d004      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff fe2a 	bl	8003726 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fe1f 	bl	8003726 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d022      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fe8d 	bl	8003818 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b06:	d107      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b16:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b20:	d10b      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3304      	adds	r3, #4
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f8e3 	bl	8003cf2 <RCCEx_PLLSAI1_ConfigNQ>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003b30:	7ffb      	ldrb	r3, [r7, #31]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003b36:	7ffb      	ldrb	r3, [r7, #31]
 8003b38:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d02b      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b58:	d003      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d105      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fe2a 	bl	80037c0 <LL_RCC_SetRNGClockSource>
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f7ff fe21 	bl	80037c0 <LL_RCC_SetRNGClockSource>
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f7ff fe34 	bl	80037ec <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003b8c:	d107      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d022      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fe3d 	bl	800382e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bbc:	d107      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bcc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 f8e3 	bl	8003da8 <RCCEx_PLLSAI1_ConfigNR>
 8003be2:	4603      	mov	r3, r0
 8003be4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003be6:	7ffb      	ldrb	r3, [r7, #31]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003bec:	7ffb      	ldrb	r3, [r7, #31]
 8003bee:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d004      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff fd26 	bl	8003652 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d009      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fd45 	bl	80036a6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fd2c 	bl	800367e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003c26:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3720      	adds	r7, #32
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003c34:	f7ff fcfe 	bl	8003634 <LL_RCC_MSI_EnablePLLMode>
}
 8003c38:	bf00      	nop
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003c48:	f7ff fe5b 	bl	8003902 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c4c:	f7fd fba0 	bl	8001390 <HAL_GetTick>
 8003c50:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c52:	e009      	b.n	8003c68 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c54:	f7fd fb9c 	bl	8001390 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d902      	bls.n	8003c68 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	73fb      	strb	r3, [r7, #15]
      break;
 8003c66:	e004      	b.n	8003c72 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c68:	f7ff fe5a 	bl	8003920 <LL_RCC_PLLSAI1_IsReady>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d137      	bne.n	8003ce8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003ca6:	f7ff fe1d 	bl	80038e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003caa:	f7fd fb71 	bl	8001390 <HAL_GetTick>
 8003cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003cb0:	e009      	b.n	8003cc6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cb2:	f7fd fb6d 	bl	8001390 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d902      	bls.n	8003cc6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	73fb      	strb	r3, [r7, #15]
        break;
 8003cc4:	e004      	b.n	8003cd0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003cc6:	f7ff fe2b 	bl	8003920 <LL_RCC_PLLSAI1_IsReady>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d1f0      	bne.n	8003cb2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d108      	bne.n	8003ce8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003cfe:	f7ff fe00 	bl	8003902 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d02:	f7fd fb45 	bl	8001390 <HAL_GetTick>
 8003d06:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d08:	e009      	b.n	8003d1e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d0a:	f7fd fb41 	bl	8001390 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d902      	bls.n	8003d1e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d1c:	e004      	b.n	8003d28 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d1e:	f7ff fdff 	bl	8003920 <LL_RCC_PLLSAI1_IsReady>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d137      	bne.n	8003d9e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d42:	4313      	orrs	r3, r2
 8003d44:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003d5c:	f7ff fdc2 	bl	80038e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d60:	f7fd fb16 	bl	8001390 <HAL_GetTick>
 8003d64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d66:	e009      	b.n	8003d7c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d68:	f7fd fb12 	bl	8001390 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d902      	bls.n	8003d7c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	73fb      	strb	r3, [r7, #15]
        break;
 8003d7a:	e004      	b.n	8003d86 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d7c:	f7ff fdd0 	bl	8003920 <LL_RCC_PLLSAI1_IsReady>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d1f0      	bne.n	8003d68 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d108      	bne.n	8003d9e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003db4:	f7ff fda5 	bl	8003902 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003db8:	f7fd faea 	bl	8001390 <HAL_GetTick>
 8003dbc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003dbe:	e009      	b.n	8003dd4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dc0:	f7fd fae6 	bl	8001390 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d902      	bls.n	8003dd4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd2:	e004      	b.n	8003dde <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003dd4:	f7ff fda4 	bl	8003920 <LL_RCC_PLLSAI1_IsReady>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d137      	bne.n	8003e54 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003e12:	f7ff fd67 	bl	80038e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e16:	f7fd fabb 	bl	8001390 <HAL_GetTick>
 8003e1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e1c:	e009      	b.n	8003e32 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e1e:	f7fd fab7 	bl	8001390 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d902      	bls.n	8003e32 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	73fb      	strb	r3, [r7, #15]
        break;
 8003e30:	e004      	b.n	8003e3c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e32:	f7ff fd75 	bl	8003920 <LL_RCC_PLLSAI1_IsReady>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d1f0      	bne.n	8003e1e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d108      	bne.n	8003e54 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e50:	4313      	orrs	r3, r2
 8003e52:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e095      	b.n	8003f9c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d108      	bne.n	8003e8a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e80:	d009      	beq.n	8003e96 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	61da      	str	r2, [r3, #28]
 8003e88:	e005      	b.n	8003e96 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7fd f83d 	bl	8000f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ecc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ed6:	d902      	bls.n	8003ede <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e002      	b.n	8003ee4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ee2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003eec:	d007      	beq.n	8003efe <HAL_SPI_Init+0xa0>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ef6:	d002      	beq.n	8003efe <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f40:	ea42 0103 	orr.w	r1, r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	f003 0204 	and.w	r2, r3, #4
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f7a:	ea42 0103 	orr.w	r1, r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_SPI_Transmit+0x22>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e15f      	b.n	8004286 <HAL_SPI_Transmit+0x2e2>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fce:	f7fd f9df 	bl	8001390 <HAL_GetTick>
 8003fd2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d002      	beq.n	8003fea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fe8:	e148      	b.n	800427c <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <HAL_SPI_Transmit+0x52>
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ffa:	e13f      	b.n	800427c <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2203      	movs	r2, #3
 8004000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	88fa      	ldrh	r2, [r7, #6]
 8004014:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	88fa      	ldrh	r2, [r7, #6]
 800401a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004046:	d10f      	bne.n	8004068 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004056:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004066:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004072:	2b40      	cmp	r3, #64	; 0x40
 8004074:	d007      	beq.n	8004086 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004084:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800408e:	d94f      	bls.n	8004130 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_SPI_Transmit+0xfa>
 8004098:	8afb      	ldrh	r3, [r7, #22]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d142      	bne.n	8004124 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	881a      	ldrh	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	1c9a      	adds	r2, r3, #2
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040c2:	e02f      	b.n	8004124 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d112      	bne.n	80040f8 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	881a      	ldrh	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	1c9a      	adds	r2, r3, #2
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040f6:	e015      	b.n	8004124 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040f8:	f7fd f94a 	bl	8001390 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d803      	bhi.n	8004110 <HAL_SPI_Transmit+0x16c>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d102      	bne.n	8004116 <HAL_SPI_Transmit+0x172>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004122:	e0ab      	b.n	800427c <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1ca      	bne.n	80040c4 <HAL_SPI_Transmit+0x120>
 800412e:	e080      	b.n	8004232 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_SPI_Transmit+0x19a>
 8004138:	8afb      	ldrh	r3, [r7, #22]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d174      	bne.n	8004228 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d912      	bls.n	800416e <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	881a      	ldrh	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	1c9a      	adds	r2, r3, #2
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b02      	subs	r3, #2
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800416c:	e05c      	b.n	8004228 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	330c      	adds	r3, #12
 8004178:	7812      	ldrb	r2, [r2, #0]
 800417a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004194:	e048      	b.n	8004228 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d12b      	bne.n	80041fc <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d912      	bls.n	80041d4 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	881a      	ldrh	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	1c9a      	adds	r2, r3, #2
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b02      	subs	r3, #2
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041d2:	e029      	b.n	8004228 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	7812      	ldrb	r2, [r2, #0]
 80041e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041fa:	e015      	b.n	8004228 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041fc:	f7fd f8c8 	bl	8001390 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d803      	bhi.n	8004214 <HAL_SPI_Transmit+0x270>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d102      	bne.n	800421a <HAL_SPI_Transmit+0x276>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004226:	e029      	b.n	800427c <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1b1      	bne.n	8004196 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	6839      	ldr	r1, [r7, #0]
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f948 	bl	80044cc <SPI_EndRxTxTransaction>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004250:	2300      	movs	r3, #0
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e003      	b.n	800427c <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004284:	7ffb      	ldrb	r3, [r7, #31]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042a0:	f7fd f876 	bl	8001390 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	4413      	add	r3, r2
 80042ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042b0:	f7fd f86e 	bl	8001390 <HAL_GetTick>
 80042b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042b6:	4b39      	ldr	r3, [pc, #228]	; (800439c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	015b      	lsls	r3, r3, #5
 80042bc:	0d1b      	lsrs	r3, r3, #20
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	fb02 f303 	mul.w	r3, r2, r3
 80042c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042c6:	e054      	b.n	8004372 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d050      	beq.n	8004372 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042d0:	f7fd f85e 	bl	8001390 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d902      	bls.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d13d      	bne.n	8004362 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042fe:	d111      	bne.n	8004324 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004308:	d004      	beq.n	8004314 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004312:	d107      	bne.n	8004324 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004322:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432c:	d10f      	bne.n	800434e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800434c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e017      	b.n	8004392 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	3b01      	subs	r3, #1
 8004370:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4013      	ands	r3, r2
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	bf0c      	ite	eq
 8004382:	2301      	moveq	r3, #1
 8004384:	2300      	movne	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	429a      	cmp	r2, r3
 800438e:	d19b      	bne.n	80042c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000188 	.word	0x20000188

080043a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	; 0x28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043b2:	f7fc ffed 	bl	8001390 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	4413      	add	r3, r2
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80043c2:	f7fc ffe5 	bl	8001390 <HAL_GetTick>
 80043c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043d0:	4b3d      	ldr	r3, [pc, #244]	; (80044c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	00da      	lsls	r2, r3, #3
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	0d1b      	lsrs	r3, r3, #20
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043e8:	e060      	b.n	80044ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043f0:	d107      	bne.n	8004402 <SPI_WaitFifoStateUntilTimeout+0x62>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d104      	bne.n	8004402 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004400:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d050      	beq.n	80044ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800440a:	f7fc ffc1 	bl	8001390 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004416:	429a      	cmp	r2, r3
 8004418:	d902      	bls.n	8004420 <SPI_WaitFifoStateUntilTimeout+0x80>
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	2b00      	cmp	r3, #0
 800441e:	d13d      	bne.n	800449c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800442e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004438:	d111      	bne.n	800445e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004442:	d004      	beq.n	800444e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444c:	d107      	bne.n	800445e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800445c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004466:	d10f      	bne.n	8004488 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004486:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e010      	b.n	80044be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d196      	bne.n	80043ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3728      	adds	r7, #40	; 0x28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000188 	.word	0x20000188

080044cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2200      	movs	r2, #0
 80044e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff ff5b 	bl	80043a0 <SPI_WaitFifoStateUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f4:	f043 0220 	orr.w	r2, r3, #32
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e027      	b.n	8004550 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2200      	movs	r2, #0
 8004508:	2180      	movs	r1, #128	; 0x80
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff fec0 	bl	8004290 <SPI_WaitFlagStateUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451a:	f043 0220 	orr.w	r2, r3, #32
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e014      	b.n	8004550 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2200      	movs	r2, #0
 800452e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f7ff ff34 	bl	80043a0 <SPI_WaitFifoStateUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004542:	f043 0220 	orr.w	r2, r3, #32
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e000      	b.n	8004550 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <LL_RCC_GetUSARTClockSource>:
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004564:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4013      	ands	r3, r2
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <LL_RCC_GetLPUARTClockSource>:
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004584:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4013      	ands	r3, r2
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e042      	b.n	8004630 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fc fce7 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2224      	movs	r2, #36	; 0x24
 80045c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fa50 	bl	8004a88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f825 	bl	8004638 <UART_SetConfig>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e01b      	b.n	8004630 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004616:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 facf 	bl	8004bcc <UART_CheckIdleState>
 800462e:	4603      	mov	r3, r0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800463c:	b08c      	sub	sp, #48	; 0x30
 800463e:	af00      	add	r7, sp, #0
 8004640:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	431a      	orrs	r2, r3
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	431a      	orrs	r2, r3
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	4313      	orrs	r3, r2
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4baf      	ldr	r3, [pc, #700]	; (8004924 <UART_SetConfig+0x2ec>)
 8004668:	4013      	ands	r3, r2
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004670:	430b      	orrs	r3, r1
 8004672:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4aa4      	ldr	r2, [pc, #656]	; (8004928 <UART_SetConfig+0x2f0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d004      	beq.n	80046a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a0:	4313      	orrs	r3, r2
 80046a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80046ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046b8:	430b      	orrs	r3, r1
 80046ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	f023 010f 	bic.w	r1, r3, #15
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a95      	ldr	r2, [pc, #596]	; (800492c <UART_SetConfig+0x2f4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d125      	bne.n	8004728 <UART_SetConfig+0xf0>
 80046dc:	2003      	movs	r0, #3
 80046de:	f7ff ff3b 	bl	8004558 <LL_RCC_GetUSARTClockSource>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d81b      	bhi.n	8004720 <UART_SetConfig+0xe8>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <UART_SetConfig+0xb8>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004701 	.word	0x08004701
 80046f4:	08004711 	.word	0x08004711
 80046f8:	08004709 	.word	0x08004709
 80046fc:	08004719 	.word	0x08004719
 8004700:	2301      	movs	r3, #1
 8004702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004706:	e042      	b.n	800478e <UART_SetConfig+0x156>
 8004708:	2302      	movs	r3, #2
 800470a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800470e:	e03e      	b.n	800478e <UART_SetConfig+0x156>
 8004710:	2304      	movs	r3, #4
 8004712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004716:	e03a      	b.n	800478e <UART_SetConfig+0x156>
 8004718:	2308      	movs	r3, #8
 800471a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800471e:	e036      	b.n	800478e <UART_SetConfig+0x156>
 8004720:	2310      	movs	r3, #16
 8004722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004726:	e032      	b.n	800478e <UART_SetConfig+0x156>
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a7e      	ldr	r2, [pc, #504]	; (8004928 <UART_SetConfig+0x2f0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d12a      	bne.n	8004788 <UART_SetConfig+0x150>
 8004732:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004736:	f7ff ff1f 	bl	8004578 <LL_RCC_GetLPUARTClockSource>
 800473a:	4603      	mov	r3, r0
 800473c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004740:	d01a      	beq.n	8004778 <UART_SetConfig+0x140>
 8004742:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004746:	d81b      	bhi.n	8004780 <UART_SetConfig+0x148>
 8004748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800474c:	d00c      	beq.n	8004768 <UART_SetConfig+0x130>
 800474e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004752:	d815      	bhi.n	8004780 <UART_SetConfig+0x148>
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <UART_SetConfig+0x128>
 8004758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475c:	d008      	beq.n	8004770 <UART_SetConfig+0x138>
 800475e:	e00f      	b.n	8004780 <UART_SetConfig+0x148>
 8004760:	2300      	movs	r3, #0
 8004762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004766:	e012      	b.n	800478e <UART_SetConfig+0x156>
 8004768:	2302      	movs	r3, #2
 800476a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800476e:	e00e      	b.n	800478e <UART_SetConfig+0x156>
 8004770:	2304      	movs	r3, #4
 8004772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004776:	e00a      	b.n	800478e <UART_SetConfig+0x156>
 8004778:	2308      	movs	r3, #8
 800477a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800477e:	e006      	b.n	800478e <UART_SetConfig+0x156>
 8004780:	2310      	movs	r3, #16
 8004782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004786:	e002      	b.n	800478e <UART_SetConfig+0x156>
 8004788:	2310      	movs	r3, #16
 800478a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a65      	ldr	r2, [pc, #404]	; (8004928 <UART_SetConfig+0x2f0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	f040 8097 	bne.w	80048c8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800479a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d823      	bhi.n	80047ea <UART_SetConfig+0x1b2>
 80047a2:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0x170>)
 80047a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047eb 	.word	0x080047eb
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047eb 	.word	0x080047eb
 80047b8:	080047db 	.word	0x080047db
 80047bc:	080047eb 	.word	0x080047eb
 80047c0:	080047eb 	.word	0x080047eb
 80047c4:	080047eb 	.word	0x080047eb
 80047c8:	080047e3 	.word	0x080047e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047cc:	f7fe fe2e 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 80047d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047d2:	e010      	b.n	80047f6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d4:	4b56      	ldr	r3, [pc, #344]	; (8004930 <UART_SetConfig+0x2f8>)
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047d8:	e00d      	b.n	80047f6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047da:	f7fe fda7 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80047de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047e0:	e009      	b.n	80047f6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047e8:	e005      	b.n	80047f6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80047f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 812b 	beq.w	8004a54 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	4a4c      	ldr	r2, [pc, #304]	; (8004934 <UART_SetConfig+0x2fc>)
 8004804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004808:	461a      	mov	r2, r3
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004810:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	4413      	add	r3, r2
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	429a      	cmp	r2, r3
 8004820:	d305      	bcc.n	800482e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	429a      	cmp	r2, r3
 800482c:	d903      	bls.n	8004836 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004834:	e10e      	b.n	8004a54 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	2200      	movs	r2, #0
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	60fa      	str	r2, [r7, #12]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	4a3c      	ldr	r2, [pc, #240]	; (8004934 <UART_SetConfig+0x2fc>)
 8004844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004848:	b29b      	uxth	r3, r3
 800484a:	2200      	movs	r2, #0
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004854:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004858:	f7fb fce2 	bl	8000220 <__aeabi_uldivmod>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4610      	mov	r0, r2
 8004862:	4619      	mov	r1, r3
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	020b      	lsls	r3, r1, #8
 800486e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004872:	0202      	lsls	r2, r0, #8
 8004874:	6979      	ldr	r1, [r7, #20]
 8004876:	6849      	ldr	r1, [r1, #4]
 8004878:	0849      	lsrs	r1, r1, #1
 800487a:	2000      	movs	r0, #0
 800487c:	460c      	mov	r4, r1
 800487e:	4605      	mov	r5, r0
 8004880:	eb12 0804 	adds.w	r8, r2, r4
 8004884:	eb43 0905 	adc.w	r9, r3, r5
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	469a      	mov	sl, r3
 8004890:	4693      	mov	fp, r2
 8004892:	4652      	mov	r2, sl
 8004894:	465b      	mov	r3, fp
 8004896:	4640      	mov	r0, r8
 8004898:	4649      	mov	r1, r9
 800489a:	f7fb fcc1 	bl	8000220 <__aeabi_uldivmod>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4613      	mov	r3, r2
 80048a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ac:	d308      	bcc.n	80048c0 <UART_SetConfig+0x288>
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b4:	d204      	bcs.n	80048c0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6a3a      	ldr	r2, [r7, #32]
 80048bc:	60da      	str	r2, [r3, #12]
 80048be:	e0c9      	b.n	8004a54 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048c6:	e0c5      	b.n	8004a54 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d0:	d16d      	bne.n	80049ae <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80048d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048d6:	3b01      	subs	r3, #1
 80048d8:	2b07      	cmp	r3, #7
 80048da:	d82d      	bhi.n	8004938 <UART_SetConfig+0x300>
 80048dc:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <UART_SetConfig+0x2ac>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	08004905 	.word	0x08004905
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	08004939 	.word	0x08004939
 80048f0:	08004913 	.word	0x08004913
 80048f4:	08004939 	.word	0x08004939
 80048f8:	08004939 	.word	0x08004939
 80048fc:	08004939 	.word	0x08004939
 8004900:	0800491b 	.word	0x0800491b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004904:	f7fe fda8 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 8004908:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800490a:	e01b      	b.n	8004944 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800490c:	4b08      	ldr	r3, [pc, #32]	; (8004930 <UART_SetConfig+0x2f8>)
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004910:	e018      	b.n	8004944 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004912:	f7fe fd0b 	bl	800332c <HAL_RCC_GetSysClockFreq>
 8004916:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004918:	e014      	b.n	8004944 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004920:	e010      	b.n	8004944 <UART_SetConfig+0x30c>
 8004922:	bf00      	nop
 8004924:	cfff69f3 	.word	0xcfff69f3
 8004928:	40008000 	.word	0x40008000
 800492c:	40013800 	.word	0x40013800
 8004930:	00f42400 	.word	0x00f42400
 8004934:	08009170 	.word	0x08009170
      default:
        pclk = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004942:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8084 	beq.w	8004a54 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	4a4b      	ldr	r2, [pc, #300]	; (8004a80 <UART_SetConfig+0x448>)
 8004952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004956:	461a      	mov	r2, r3
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	fbb3 f3f2 	udiv	r3, r3, r2
 800495e:	005a      	lsls	r2, r3, #1
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	441a      	add	r2, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	2b0f      	cmp	r3, #15
 8004976:	d916      	bls.n	80049a6 <UART_SetConfig+0x36e>
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497e:	d212      	bcs.n	80049a6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f023 030f 	bic.w	r3, r3, #15
 8004988:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	b29b      	uxth	r3, r3
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	b29a      	uxth	r2, r3
 8004996:	8bfb      	ldrh	r3, [r7, #30]
 8004998:	4313      	orrs	r3, r2
 800499a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	8bfa      	ldrh	r2, [r7, #30]
 80049a2:	60da      	str	r2, [r3, #12]
 80049a4:	e056      	b.n	8004a54 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80049ac:	e052      	b.n	8004a54 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049b2:	3b01      	subs	r3, #1
 80049b4:	2b07      	cmp	r3, #7
 80049b6:	d822      	bhi.n	80049fe <UART_SetConfig+0x3c6>
 80049b8:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <UART_SetConfig+0x388>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049e1 	.word	0x080049e1
 80049c4:	080049e9 	.word	0x080049e9
 80049c8:	080049ff 	.word	0x080049ff
 80049cc:	080049ef 	.word	0x080049ef
 80049d0:	080049ff 	.word	0x080049ff
 80049d4:	080049ff 	.word	0x080049ff
 80049d8:	080049ff 	.word	0x080049ff
 80049dc:	080049f7 	.word	0x080049f7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e0:	f7fe fd3a 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 80049e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049e6:	e010      	b.n	8004a0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e8:	4b26      	ldr	r3, [pc, #152]	; (8004a84 <UART_SetConfig+0x44c>)
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049ec:	e00d      	b.n	8004a0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ee:	f7fe fc9d 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80049f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049f4:	e009      	b.n	8004a0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049fc:	e005      	b.n	8004a0a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a08:	bf00      	nop
    }

    if (pclk != 0U)
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d021      	beq.n	8004a54 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	4a1a      	ldr	r2, [pc, #104]	; (8004a80 <UART_SetConfig+0x448>)
 8004a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	441a      	add	r2, r3
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	2b0f      	cmp	r3, #15
 8004a38:	d909      	bls.n	8004a4e <UART_SetConfig+0x416>
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a40:	d205      	bcs.n	8004a4e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60da      	str	r2, [r3, #12]
 8004a4c:	e002      	b.n	8004a54 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2200      	movs	r2, #0
 8004a68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004a70:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3730      	adds	r7, #48	; 0x30
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7e:	bf00      	nop
 8004a80:	08009170 	.word	0x08009170
 8004a84:	00f42400 	.word	0x00f42400

08004a88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01a      	beq.n	8004b9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b86:	d10a      	bne.n	8004b9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b098      	sub	sp, #96	; 0x60
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bdc:	f7fc fbd8 	bl	8001390 <HAL_GetTick>
 8004be0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d12f      	bne.n	8004c50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f88e 	bl	8004d20 <UART_WaitOnFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d022      	beq.n	8004c50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c28:	647b      	str	r3, [r7, #68]	; 0x44
 8004c2a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e6      	bne.n	8004c0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e063      	b.n	8004d18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d149      	bne.n	8004cf2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c66:	2200      	movs	r2, #0
 8004c68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f857 	bl	8004d20 <UART_WaitOnFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d03c      	beq.n	8004cf2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	623b      	str	r3, [r7, #32]
   return(result);
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c96:	633b      	str	r3, [r7, #48]	; 0x30
 8004c98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9e:	e841 2300 	strex	r3, r2, [r1]
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e6      	bne.n	8004c78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	e853 3f00 	ldrex	r3, [r3]
 8004cb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f023 0301 	bic.w	r3, r3, #1
 8004cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cca:	61fa      	str	r2, [r7, #28]
 8004ccc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	69b9      	ldr	r1, [r7, #24]
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e5      	bne.n	8004caa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e012      	b.n	8004d18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3758      	adds	r7, #88	; 0x58
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d30:	e04f      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d04b      	beq.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3a:	f7fc fb29 	bl	8001390 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d302      	bcc.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e04e      	b.n	8004df2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d037      	beq.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b80      	cmp	r3, #128	; 0x80
 8004d66:	d034      	beq.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d031      	beq.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d110      	bne.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2208      	movs	r2, #8
 8004d82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f838 	bl	8004dfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e029      	b.n	8004df2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dac:	d111      	bne.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004db6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f81e 	bl	8004dfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e00f      	b.n	8004df2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	bf0c      	ite	eq
 8004de2:	2301      	moveq	r3, #1
 8004de4:	2300      	movne	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d0a0      	beq.n	8004d32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b095      	sub	sp, #84	; 0x54
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e20:	643b      	str	r3, [r7, #64]	; 0x40
 8004e22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e6      	bne.n	8004e02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3308      	adds	r3, #8
 8004e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	f023 0301 	bic.w	r3, r3, #1
 8004e4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3308      	adds	r3, #8
 8004e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e3      	bne.n	8004e34 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d118      	bne.n	8004ea6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f023 0310 	bic.w	r3, r3, #16
 8004e88:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e92:	61bb      	str	r3, [r7, #24]
 8004e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6979      	ldr	r1, [r7, #20]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e6      	bne.n	8004e74 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004eba:	bf00      	nop
 8004ebc:	3754      	adds	r7, #84	; 0x54
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_UARTEx_DisableFifoMode+0x16>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e027      	b.n	8004f2c <HAL_UARTEx_DisableFifoMode+0x66>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2224      	movs	r2, #36	; 0x24
 8004ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0201 	bic.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e02d      	b.n	8004fac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2224      	movs	r2, #36	; 0x24
 8004f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0201 	bic.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f84f 	bl	8005030 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e02d      	b.n	8005028 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2224      	movs	r2, #36	; 0x24
 8004fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0201 	bic.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f811 	bl	8005030 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800503c:	2b00      	cmp	r3, #0
 800503e:	d108      	bne.n	8005052 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005050:	e031      	b.n	80050b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005052:	2308      	movs	r3, #8
 8005054:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005056:	2308      	movs	r3, #8
 8005058:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	0e5b      	lsrs	r3, r3, #25
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	0f5b      	lsrs	r3, r3, #29
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800507a:	7bbb      	ldrb	r3, [r7, #14]
 800507c:	7b3a      	ldrb	r2, [r7, #12]
 800507e:	4911      	ldr	r1, [pc, #68]	; (80050c4 <UARTEx_SetNbDataToProcess+0x94>)
 8005080:	5c8a      	ldrb	r2, [r1, r2]
 8005082:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005086:	7b3a      	ldrb	r2, [r7, #12]
 8005088:	490f      	ldr	r1, [pc, #60]	; (80050c8 <UARTEx_SetNbDataToProcess+0x98>)
 800508a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800508c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	7b7a      	ldrb	r2, [r7, #13]
 800509c:	4909      	ldr	r1, [pc, #36]	; (80050c4 <UARTEx_SetNbDataToProcess+0x94>)
 800509e:	5c8a      	ldrb	r2, [r1, r2]
 80050a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050a4:	7b7a      	ldrb	r2, [r7, #13]
 80050a6:	4908      	ldr	r1, [pc, #32]	; (80050c8 <UARTEx_SetNbDataToProcess+0x98>)
 80050a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80050b6:	bf00      	nop
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	08009188 	.word	0x08009188
 80050c8:	08009190 	.word	0x08009190

080050cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050d4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80050d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	43db      	mvns	r3, r3
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	4013      	ands	r3, r2
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	1d3b      	adds	r3, r7, #4
 800510c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2201      	movs	r2, #1
 8005114:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <sniprintf>:
 8005140:	b40c      	push	{r2, r3}
 8005142:	b530      	push	{r4, r5, lr}
 8005144:	4b17      	ldr	r3, [pc, #92]	; (80051a4 <sniprintf+0x64>)
 8005146:	1e0c      	subs	r4, r1, #0
 8005148:	681d      	ldr	r5, [r3, #0]
 800514a:	b09d      	sub	sp, #116	; 0x74
 800514c:	da08      	bge.n	8005160 <sniprintf+0x20>
 800514e:	238b      	movs	r3, #139	; 0x8b
 8005150:	602b      	str	r3, [r5, #0]
 8005152:	f04f 30ff 	mov.w	r0, #4294967295
 8005156:	b01d      	add	sp, #116	; 0x74
 8005158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800515c:	b002      	add	sp, #8
 800515e:	4770      	bx	lr
 8005160:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005164:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005168:	bf14      	ite	ne
 800516a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800516e:	4623      	moveq	r3, r4
 8005170:	9304      	str	r3, [sp, #16]
 8005172:	9307      	str	r3, [sp, #28]
 8005174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005178:	9002      	str	r0, [sp, #8]
 800517a:	9006      	str	r0, [sp, #24]
 800517c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005180:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005182:	ab21      	add	r3, sp, #132	; 0x84
 8005184:	a902      	add	r1, sp, #8
 8005186:	4628      	mov	r0, r5
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	f000 f9c1 	bl	8005510 <_svfiprintf_r>
 800518e:	1c43      	adds	r3, r0, #1
 8005190:	bfbc      	itt	lt
 8005192:	238b      	movlt	r3, #139	; 0x8b
 8005194:	602b      	strlt	r3, [r5, #0]
 8005196:	2c00      	cmp	r4, #0
 8005198:	d0dd      	beq.n	8005156 <sniprintf+0x16>
 800519a:	9b02      	ldr	r3, [sp, #8]
 800519c:	2200      	movs	r2, #0
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	e7d9      	b.n	8005156 <sniprintf+0x16>
 80051a2:	bf00      	nop
 80051a4:	200001e0 	.word	0x200001e0

080051a8 <siprintf>:
 80051a8:	b40e      	push	{r1, r2, r3}
 80051aa:	b500      	push	{lr}
 80051ac:	b09c      	sub	sp, #112	; 0x70
 80051ae:	ab1d      	add	r3, sp, #116	; 0x74
 80051b0:	9002      	str	r0, [sp, #8]
 80051b2:	9006      	str	r0, [sp, #24]
 80051b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051b8:	4809      	ldr	r0, [pc, #36]	; (80051e0 <siprintf+0x38>)
 80051ba:	9107      	str	r1, [sp, #28]
 80051bc:	9104      	str	r1, [sp, #16]
 80051be:	4909      	ldr	r1, [pc, #36]	; (80051e4 <siprintf+0x3c>)
 80051c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051c4:	9105      	str	r1, [sp, #20]
 80051c6:	6800      	ldr	r0, [r0, #0]
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	a902      	add	r1, sp, #8
 80051cc:	f000 f9a0 	bl	8005510 <_svfiprintf_r>
 80051d0:	9b02      	ldr	r3, [sp, #8]
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	b01c      	add	sp, #112	; 0x70
 80051d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051dc:	b003      	add	sp, #12
 80051de:	4770      	bx	lr
 80051e0:	200001e0 	.word	0x200001e0
 80051e4:	ffff0208 	.word	0xffff0208

080051e8 <memset>:
 80051e8:	4402      	add	r2, r0
 80051ea:	4603      	mov	r3, r0
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d100      	bne.n	80051f2 <memset+0xa>
 80051f0:	4770      	bx	lr
 80051f2:	f803 1b01 	strb.w	r1, [r3], #1
 80051f6:	e7f9      	b.n	80051ec <memset+0x4>

080051f8 <__errno>:
 80051f8:	4b01      	ldr	r3, [pc, #4]	; (8005200 <__errno+0x8>)
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	200001e0 	.word	0x200001e0

08005204 <__libc_init_array>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	4d0d      	ldr	r5, [pc, #52]	; (800523c <__libc_init_array+0x38>)
 8005208:	4c0d      	ldr	r4, [pc, #52]	; (8005240 <__libc_init_array+0x3c>)
 800520a:	1b64      	subs	r4, r4, r5
 800520c:	10a4      	asrs	r4, r4, #2
 800520e:	2600      	movs	r6, #0
 8005210:	42a6      	cmp	r6, r4
 8005212:	d109      	bne.n	8005228 <__libc_init_array+0x24>
 8005214:	4d0b      	ldr	r5, [pc, #44]	; (8005244 <__libc_init_array+0x40>)
 8005216:	4c0c      	ldr	r4, [pc, #48]	; (8005248 <__libc_init_array+0x44>)
 8005218:	f000 fc6a 	bl	8005af0 <_init>
 800521c:	1b64      	subs	r4, r4, r5
 800521e:	10a4      	asrs	r4, r4, #2
 8005220:	2600      	movs	r6, #0
 8005222:	42a6      	cmp	r6, r4
 8005224:	d105      	bne.n	8005232 <__libc_init_array+0x2e>
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	f855 3b04 	ldr.w	r3, [r5], #4
 800522c:	4798      	blx	r3
 800522e:	3601      	adds	r6, #1
 8005230:	e7ee      	b.n	8005210 <__libc_init_array+0xc>
 8005232:	f855 3b04 	ldr.w	r3, [r5], #4
 8005236:	4798      	blx	r3
 8005238:	3601      	adds	r6, #1
 800523a:	e7f2      	b.n	8005222 <__libc_init_array+0x1e>
 800523c:	080091d4 	.word	0x080091d4
 8005240:	080091d4 	.word	0x080091d4
 8005244:	080091d4 	.word	0x080091d4
 8005248:	080091d8 	.word	0x080091d8

0800524c <__retarget_lock_acquire_recursive>:
 800524c:	4770      	bx	lr

0800524e <__retarget_lock_release_recursive>:
 800524e:	4770      	bx	lr

08005250 <memcpy>:
 8005250:	440a      	add	r2, r1
 8005252:	4291      	cmp	r1, r2
 8005254:	f100 33ff 	add.w	r3, r0, #4294967295
 8005258:	d100      	bne.n	800525c <memcpy+0xc>
 800525a:	4770      	bx	lr
 800525c:	b510      	push	{r4, lr}
 800525e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005266:	4291      	cmp	r1, r2
 8005268:	d1f9      	bne.n	800525e <memcpy+0xe>
 800526a:	bd10      	pop	{r4, pc}

0800526c <_free_r>:
 800526c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800526e:	2900      	cmp	r1, #0
 8005270:	d044      	beq.n	80052fc <_free_r+0x90>
 8005272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005276:	9001      	str	r0, [sp, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f1a1 0404 	sub.w	r4, r1, #4
 800527e:	bfb8      	it	lt
 8005280:	18e4      	addlt	r4, r4, r3
 8005282:	f000 f8df 	bl	8005444 <__malloc_lock>
 8005286:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <_free_r+0x94>)
 8005288:	9801      	ldr	r0, [sp, #4]
 800528a:	6813      	ldr	r3, [r2, #0]
 800528c:	b933      	cbnz	r3, 800529c <_free_r+0x30>
 800528e:	6063      	str	r3, [r4, #4]
 8005290:	6014      	str	r4, [r2, #0]
 8005292:	b003      	add	sp, #12
 8005294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005298:	f000 b8da 	b.w	8005450 <__malloc_unlock>
 800529c:	42a3      	cmp	r3, r4
 800529e:	d908      	bls.n	80052b2 <_free_r+0x46>
 80052a0:	6825      	ldr	r5, [r4, #0]
 80052a2:	1961      	adds	r1, r4, r5
 80052a4:	428b      	cmp	r3, r1
 80052a6:	bf01      	itttt	eq
 80052a8:	6819      	ldreq	r1, [r3, #0]
 80052aa:	685b      	ldreq	r3, [r3, #4]
 80052ac:	1949      	addeq	r1, r1, r5
 80052ae:	6021      	streq	r1, [r4, #0]
 80052b0:	e7ed      	b.n	800528e <_free_r+0x22>
 80052b2:	461a      	mov	r2, r3
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	b10b      	cbz	r3, 80052bc <_free_r+0x50>
 80052b8:	42a3      	cmp	r3, r4
 80052ba:	d9fa      	bls.n	80052b2 <_free_r+0x46>
 80052bc:	6811      	ldr	r1, [r2, #0]
 80052be:	1855      	adds	r5, r2, r1
 80052c0:	42a5      	cmp	r5, r4
 80052c2:	d10b      	bne.n	80052dc <_free_r+0x70>
 80052c4:	6824      	ldr	r4, [r4, #0]
 80052c6:	4421      	add	r1, r4
 80052c8:	1854      	adds	r4, r2, r1
 80052ca:	42a3      	cmp	r3, r4
 80052cc:	6011      	str	r1, [r2, #0]
 80052ce:	d1e0      	bne.n	8005292 <_free_r+0x26>
 80052d0:	681c      	ldr	r4, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	6053      	str	r3, [r2, #4]
 80052d6:	440c      	add	r4, r1
 80052d8:	6014      	str	r4, [r2, #0]
 80052da:	e7da      	b.n	8005292 <_free_r+0x26>
 80052dc:	d902      	bls.n	80052e4 <_free_r+0x78>
 80052de:	230c      	movs	r3, #12
 80052e0:	6003      	str	r3, [r0, #0]
 80052e2:	e7d6      	b.n	8005292 <_free_r+0x26>
 80052e4:	6825      	ldr	r5, [r4, #0]
 80052e6:	1961      	adds	r1, r4, r5
 80052e8:	428b      	cmp	r3, r1
 80052ea:	bf04      	itt	eq
 80052ec:	6819      	ldreq	r1, [r3, #0]
 80052ee:	685b      	ldreq	r3, [r3, #4]
 80052f0:	6063      	str	r3, [r4, #4]
 80052f2:	bf04      	itt	eq
 80052f4:	1949      	addeq	r1, r1, r5
 80052f6:	6021      	streq	r1, [r4, #0]
 80052f8:	6054      	str	r4, [r2, #4]
 80052fa:	e7ca      	b.n	8005292 <_free_r+0x26>
 80052fc:	b003      	add	sp, #12
 80052fe:	bd30      	pop	{r4, r5, pc}
 8005300:	20004180 	.word	0x20004180

08005304 <sbrk_aligned>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	4e0e      	ldr	r6, [pc, #56]	; (8005340 <sbrk_aligned+0x3c>)
 8005308:	460c      	mov	r4, r1
 800530a:	6831      	ldr	r1, [r6, #0]
 800530c:	4605      	mov	r5, r0
 800530e:	b911      	cbnz	r1, 8005316 <sbrk_aligned+0x12>
 8005310:	f000 fba6 	bl	8005a60 <_sbrk_r>
 8005314:	6030      	str	r0, [r6, #0]
 8005316:	4621      	mov	r1, r4
 8005318:	4628      	mov	r0, r5
 800531a:	f000 fba1 	bl	8005a60 <_sbrk_r>
 800531e:	1c43      	adds	r3, r0, #1
 8005320:	d00a      	beq.n	8005338 <sbrk_aligned+0x34>
 8005322:	1cc4      	adds	r4, r0, #3
 8005324:	f024 0403 	bic.w	r4, r4, #3
 8005328:	42a0      	cmp	r0, r4
 800532a:	d007      	beq.n	800533c <sbrk_aligned+0x38>
 800532c:	1a21      	subs	r1, r4, r0
 800532e:	4628      	mov	r0, r5
 8005330:	f000 fb96 	bl	8005a60 <_sbrk_r>
 8005334:	3001      	adds	r0, #1
 8005336:	d101      	bne.n	800533c <sbrk_aligned+0x38>
 8005338:	f04f 34ff 	mov.w	r4, #4294967295
 800533c:	4620      	mov	r0, r4
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	20004184 	.word	0x20004184

08005344 <_malloc_r>:
 8005344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005348:	1ccd      	adds	r5, r1, #3
 800534a:	f025 0503 	bic.w	r5, r5, #3
 800534e:	3508      	adds	r5, #8
 8005350:	2d0c      	cmp	r5, #12
 8005352:	bf38      	it	cc
 8005354:	250c      	movcc	r5, #12
 8005356:	2d00      	cmp	r5, #0
 8005358:	4607      	mov	r7, r0
 800535a:	db01      	blt.n	8005360 <_malloc_r+0x1c>
 800535c:	42a9      	cmp	r1, r5
 800535e:	d905      	bls.n	800536c <_malloc_r+0x28>
 8005360:	230c      	movs	r3, #12
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	2600      	movs	r6, #0
 8005366:	4630      	mov	r0, r6
 8005368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800536c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005440 <_malloc_r+0xfc>
 8005370:	f000 f868 	bl	8005444 <__malloc_lock>
 8005374:	f8d8 3000 	ldr.w	r3, [r8]
 8005378:	461c      	mov	r4, r3
 800537a:	bb5c      	cbnz	r4, 80053d4 <_malloc_r+0x90>
 800537c:	4629      	mov	r1, r5
 800537e:	4638      	mov	r0, r7
 8005380:	f7ff ffc0 	bl	8005304 <sbrk_aligned>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	4604      	mov	r4, r0
 8005388:	d155      	bne.n	8005436 <_malloc_r+0xf2>
 800538a:	f8d8 4000 	ldr.w	r4, [r8]
 800538e:	4626      	mov	r6, r4
 8005390:	2e00      	cmp	r6, #0
 8005392:	d145      	bne.n	8005420 <_malloc_r+0xdc>
 8005394:	2c00      	cmp	r4, #0
 8005396:	d048      	beq.n	800542a <_malloc_r+0xe6>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	4631      	mov	r1, r6
 800539c:	4638      	mov	r0, r7
 800539e:	eb04 0903 	add.w	r9, r4, r3
 80053a2:	f000 fb5d 	bl	8005a60 <_sbrk_r>
 80053a6:	4581      	cmp	r9, r0
 80053a8:	d13f      	bne.n	800542a <_malloc_r+0xe6>
 80053aa:	6821      	ldr	r1, [r4, #0]
 80053ac:	1a6d      	subs	r5, r5, r1
 80053ae:	4629      	mov	r1, r5
 80053b0:	4638      	mov	r0, r7
 80053b2:	f7ff ffa7 	bl	8005304 <sbrk_aligned>
 80053b6:	3001      	adds	r0, #1
 80053b8:	d037      	beq.n	800542a <_malloc_r+0xe6>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	442b      	add	r3, r5
 80053be:	6023      	str	r3, [r4, #0]
 80053c0:	f8d8 3000 	ldr.w	r3, [r8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d038      	beq.n	800543a <_malloc_r+0xf6>
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	42a2      	cmp	r2, r4
 80053cc:	d12b      	bne.n	8005426 <_malloc_r+0xe2>
 80053ce:	2200      	movs	r2, #0
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	e00f      	b.n	80053f4 <_malloc_r+0xb0>
 80053d4:	6822      	ldr	r2, [r4, #0]
 80053d6:	1b52      	subs	r2, r2, r5
 80053d8:	d41f      	bmi.n	800541a <_malloc_r+0xd6>
 80053da:	2a0b      	cmp	r2, #11
 80053dc:	d917      	bls.n	800540e <_malloc_r+0xca>
 80053de:	1961      	adds	r1, r4, r5
 80053e0:	42a3      	cmp	r3, r4
 80053e2:	6025      	str	r5, [r4, #0]
 80053e4:	bf18      	it	ne
 80053e6:	6059      	strne	r1, [r3, #4]
 80053e8:	6863      	ldr	r3, [r4, #4]
 80053ea:	bf08      	it	eq
 80053ec:	f8c8 1000 	streq.w	r1, [r8]
 80053f0:	5162      	str	r2, [r4, r5]
 80053f2:	604b      	str	r3, [r1, #4]
 80053f4:	4638      	mov	r0, r7
 80053f6:	f104 060b 	add.w	r6, r4, #11
 80053fa:	f000 f829 	bl	8005450 <__malloc_unlock>
 80053fe:	f026 0607 	bic.w	r6, r6, #7
 8005402:	1d23      	adds	r3, r4, #4
 8005404:	1af2      	subs	r2, r6, r3
 8005406:	d0ae      	beq.n	8005366 <_malloc_r+0x22>
 8005408:	1b9b      	subs	r3, r3, r6
 800540a:	50a3      	str	r3, [r4, r2]
 800540c:	e7ab      	b.n	8005366 <_malloc_r+0x22>
 800540e:	42a3      	cmp	r3, r4
 8005410:	6862      	ldr	r2, [r4, #4]
 8005412:	d1dd      	bne.n	80053d0 <_malloc_r+0x8c>
 8005414:	f8c8 2000 	str.w	r2, [r8]
 8005418:	e7ec      	b.n	80053f4 <_malloc_r+0xb0>
 800541a:	4623      	mov	r3, r4
 800541c:	6864      	ldr	r4, [r4, #4]
 800541e:	e7ac      	b.n	800537a <_malloc_r+0x36>
 8005420:	4634      	mov	r4, r6
 8005422:	6876      	ldr	r6, [r6, #4]
 8005424:	e7b4      	b.n	8005390 <_malloc_r+0x4c>
 8005426:	4613      	mov	r3, r2
 8005428:	e7cc      	b.n	80053c4 <_malloc_r+0x80>
 800542a:	230c      	movs	r3, #12
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	4638      	mov	r0, r7
 8005430:	f000 f80e 	bl	8005450 <__malloc_unlock>
 8005434:	e797      	b.n	8005366 <_malloc_r+0x22>
 8005436:	6025      	str	r5, [r4, #0]
 8005438:	e7dc      	b.n	80053f4 <_malloc_r+0xb0>
 800543a:	605b      	str	r3, [r3, #4]
 800543c:	deff      	udf	#255	; 0xff
 800543e:	bf00      	nop
 8005440:	20004180 	.word	0x20004180

08005444 <__malloc_lock>:
 8005444:	4801      	ldr	r0, [pc, #4]	; (800544c <__malloc_lock+0x8>)
 8005446:	f7ff bf01 	b.w	800524c <__retarget_lock_acquire_recursive>
 800544a:	bf00      	nop
 800544c:	2000417c 	.word	0x2000417c

08005450 <__malloc_unlock>:
 8005450:	4801      	ldr	r0, [pc, #4]	; (8005458 <__malloc_unlock+0x8>)
 8005452:	f7ff befc 	b.w	800524e <__retarget_lock_release_recursive>
 8005456:	bf00      	nop
 8005458:	2000417c 	.word	0x2000417c

0800545c <__ssputs_r>:
 800545c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005460:	688e      	ldr	r6, [r1, #8]
 8005462:	461f      	mov	r7, r3
 8005464:	42be      	cmp	r6, r7
 8005466:	680b      	ldr	r3, [r1, #0]
 8005468:	4682      	mov	sl, r0
 800546a:	460c      	mov	r4, r1
 800546c:	4690      	mov	r8, r2
 800546e:	d82c      	bhi.n	80054ca <__ssputs_r+0x6e>
 8005470:	898a      	ldrh	r2, [r1, #12]
 8005472:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005476:	d026      	beq.n	80054c6 <__ssputs_r+0x6a>
 8005478:	6965      	ldr	r5, [r4, #20]
 800547a:	6909      	ldr	r1, [r1, #16]
 800547c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005480:	eba3 0901 	sub.w	r9, r3, r1
 8005484:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005488:	1c7b      	adds	r3, r7, #1
 800548a:	444b      	add	r3, r9
 800548c:	106d      	asrs	r5, r5, #1
 800548e:	429d      	cmp	r5, r3
 8005490:	bf38      	it	cc
 8005492:	461d      	movcc	r5, r3
 8005494:	0553      	lsls	r3, r2, #21
 8005496:	d527      	bpl.n	80054e8 <__ssputs_r+0x8c>
 8005498:	4629      	mov	r1, r5
 800549a:	f7ff ff53 	bl	8005344 <_malloc_r>
 800549e:	4606      	mov	r6, r0
 80054a0:	b360      	cbz	r0, 80054fc <__ssputs_r+0xa0>
 80054a2:	6921      	ldr	r1, [r4, #16]
 80054a4:	464a      	mov	r2, r9
 80054a6:	f7ff fed3 	bl	8005250 <memcpy>
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	6126      	str	r6, [r4, #16]
 80054b8:	6165      	str	r5, [r4, #20]
 80054ba:	444e      	add	r6, r9
 80054bc:	eba5 0509 	sub.w	r5, r5, r9
 80054c0:	6026      	str	r6, [r4, #0]
 80054c2:	60a5      	str	r5, [r4, #8]
 80054c4:	463e      	mov	r6, r7
 80054c6:	42be      	cmp	r6, r7
 80054c8:	d900      	bls.n	80054cc <__ssputs_r+0x70>
 80054ca:	463e      	mov	r6, r7
 80054cc:	6820      	ldr	r0, [r4, #0]
 80054ce:	4632      	mov	r2, r6
 80054d0:	4641      	mov	r1, r8
 80054d2:	f000 faab 	bl	8005a2c <memmove>
 80054d6:	68a3      	ldr	r3, [r4, #8]
 80054d8:	1b9b      	subs	r3, r3, r6
 80054da:	60a3      	str	r3, [r4, #8]
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	4433      	add	r3, r6
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	2000      	movs	r0, #0
 80054e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e8:	462a      	mov	r2, r5
 80054ea:	f000 fac9 	bl	8005a80 <_realloc_r>
 80054ee:	4606      	mov	r6, r0
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d1e0      	bne.n	80054b6 <__ssputs_r+0x5a>
 80054f4:	6921      	ldr	r1, [r4, #16]
 80054f6:	4650      	mov	r0, sl
 80054f8:	f7ff feb8 	bl	800526c <_free_r>
 80054fc:	230c      	movs	r3, #12
 80054fe:	f8ca 3000 	str.w	r3, [sl]
 8005502:	89a3      	ldrh	r3, [r4, #12]
 8005504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005508:	81a3      	strh	r3, [r4, #12]
 800550a:	f04f 30ff 	mov.w	r0, #4294967295
 800550e:	e7e9      	b.n	80054e4 <__ssputs_r+0x88>

08005510 <_svfiprintf_r>:
 8005510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005514:	4698      	mov	r8, r3
 8005516:	898b      	ldrh	r3, [r1, #12]
 8005518:	061b      	lsls	r3, r3, #24
 800551a:	b09d      	sub	sp, #116	; 0x74
 800551c:	4607      	mov	r7, r0
 800551e:	460d      	mov	r5, r1
 8005520:	4614      	mov	r4, r2
 8005522:	d50e      	bpl.n	8005542 <_svfiprintf_r+0x32>
 8005524:	690b      	ldr	r3, [r1, #16]
 8005526:	b963      	cbnz	r3, 8005542 <_svfiprintf_r+0x32>
 8005528:	2140      	movs	r1, #64	; 0x40
 800552a:	f7ff ff0b 	bl	8005344 <_malloc_r>
 800552e:	6028      	str	r0, [r5, #0]
 8005530:	6128      	str	r0, [r5, #16]
 8005532:	b920      	cbnz	r0, 800553e <_svfiprintf_r+0x2e>
 8005534:	230c      	movs	r3, #12
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	f04f 30ff 	mov.w	r0, #4294967295
 800553c:	e0d0      	b.n	80056e0 <_svfiprintf_r+0x1d0>
 800553e:	2340      	movs	r3, #64	; 0x40
 8005540:	616b      	str	r3, [r5, #20]
 8005542:	2300      	movs	r3, #0
 8005544:	9309      	str	r3, [sp, #36]	; 0x24
 8005546:	2320      	movs	r3, #32
 8005548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800554c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005550:	2330      	movs	r3, #48	; 0x30
 8005552:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80056f8 <_svfiprintf_r+0x1e8>
 8005556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800555a:	f04f 0901 	mov.w	r9, #1
 800555e:	4623      	mov	r3, r4
 8005560:	469a      	mov	sl, r3
 8005562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005566:	b10a      	cbz	r2, 800556c <_svfiprintf_r+0x5c>
 8005568:	2a25      	cmp	r2, #37	; 0x25
 800556a:	d1f9      	bne.n	8005560 <_svfiprintf_r+0x50>
 800556c:	ebba 0b04 	subs.w	fp, sl, r4
 8005570:	d00b      	beq.n	800558a <_svfiprintf_r+0x7a>
 8005572:	465b      	mov	r3, fp
 8005574:	4622      	mov	r2, r4
 8005576:	4629      	mov	r1, r5
 8005578:	4638      	mov	r0, r7
 800557a:	f7ff ff6f 	bl	800545c <__ssputs_r>
 800557e:	3001      	adds	r0, #1
 8005580:	f000 80a9 	beq.w	80056d6 <_svfiprintf_r+0x1c6>
 8005584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005586:	445a      	add	r2, fp
 8005588:	9209      	str	r2, [sp, #36]	; 0x24
 800558a:	f89a 3000 	ldrb.w	r3, [sl]
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 80a1 	beq.w	80056d6 <_svfiprintf_r+0x1c6>
 8005594:	2300      	movs	r3, #0
 8005596:	f04f 32ff 	mov.w	r2, #4294967295
 800559a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800559e:	f10a 0a01 	add.w	sl, sl, #1
 80055a2:	9304      	str	r3, [sp, #16]
 80055a4:	9307      	str	r3, [sp, #28]
 80055a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055aa:	931a      	str	r3, [sp, #104]	; 0x68
 80055ac:	4654      	mov	r4, sl
 80055ae:	2205      	movs	r2, #5
 80055b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b4:	4850      	ldr	r0, [pc, #320]	; (80056f8 <_svfiprintf_r+0x1e8>)
 80055b6:	f7fa fde3 	bl	8000180 <memchr>
 80055ba:	9a04      	ldr	r2, [sp, #16]
 80055bc:	b9d8      	cbnz	r0, 80055f6 <_svfiprintf_r+0xe6>
 80055be:	06d0      	lsls	r0, r2, #27
 80055c0:	bf44      	itt	mi
 80055c2:	2320      	movmi	r3, #32
 80055c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055c8:	0711      	lsls	r1, r2, #28
 80055ca:	bf44      	itt	mi
 80055cc:	232b      	movmi	r3, #43	; 0x2b
 80055ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055d2:	f89a 3000 	ldrb.w	r3, [sl]
 80055d6:	2b2a      	cmp	r3, #42	; 0x2a
 80055d8:	d015      	beq.n	8005606 <_svfiprintf_r+0xf6>
 80055da:	9a07      	ldr	r2, [sp, #28]
 80055dc:	4654      	mov	r4, sl
 80055de:	2000      	movs	r0, #0
 80055e0:	f04f 0c0a 	mov.w	ip, #10
 80055e4:	4621      	mov	r1, r4
 80055e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055ea:	3b30      	subs	r3, #48	; 0x30
 80055ec:	2b09      	cmp	r3, #9
 80055ee:	d94d      	bls.n	800568c <_svfiprintf_r+0x17c>
 80055f0:	b1b0      	cbz	r0, 8005620 <_svfiprintf_r+0x110>
 80055f2:	9207      	str	r2, [sp, #28]
 80055f4:	e014      	b.n	8005620 <_svfiprintf_r+0x110>
 80055f6:	eba0 0308 	sub.w	r3, r0, r8
 80055fa:	fa09 f303 	lsl.w	r3, r9, r3
 80055fe:	4313      	orrs	r3, r2
 8005600:	9304      	str	r3, [sp, #16]
 8005602:	46a2      	mov	sl, r4
 8005604:	e7d2      	b.n	80055ac <_svfiprintf_r+0x9c>
 8005606:	9b03      	ldr	r3, [sp, #12]
 8005608:	1d19      	adds	r1, r3, #4
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	9103      	str	r1, [sp, #12]
 800560e:	2b00      	cmp	r3, #0
 8005610:	bfbb      	ittet	lt
 8005612:	425b      	neglt	r3, r3
 8005614:	f042 0202 	orrlt.w	r2, r2, #2
 8005618:	9307      	strge	r3, [sp, #28]
 800561a:	9307      	strlt	r3, [sp, #28]
 800561c:	bfb8      	it	lt
 800561e:	9204      	strlt	r2, [sp, #16]
 8005620:	7823      	ldrb	r3, [r4, #0]
 8005622:	2b2e      	cmp	r3, #46	; 0x2e
 8005624:	d10c      	bne.n	8005640 <_svfiprintf_r+0x130>
 8005626:	7863      	ldrb	r3, [r4, #1]
 8005628:	2b2a      	cmp	r3, #42	; 0x2a
 800562a:	d134      	bne.n	8005696 <_svfiprintf_r+0x186>
 800562c:	9b03      	ldr	r3, [sp, #12]
 800562e:	1d1a      	adds	r2, r3, #4
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	9203      	str	r2, [sp, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	bfb8      	it	lt
 8005638:	f04f 33ff 	movlt.w	r3, #4294967295
 800563c:	3402      	adds	r4, #2
 800563e:	9305      	str	r3, [sp, #20]
 8005640:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005708 <_svfiprintf_r+0x1f8>
 8005644:	7821      	ldrb	r1, [r4, #0]
 8005646:	2203      	movs	r2, #3
 8005648:	4650      	mov	r0, sl
 800564a:	f7fa fd99 	bl	8000180 <memchr>
 800564e:	b138      	cbz	r0, 8005660 <_svfiprintf_r+0x150>
 8005650:	9b04      	ldr	r3, [sp, #16]
 8005652:	eba0 000a 	sub.w	r0, r0, sl
 8005656:	2240      	movs	r2, #64	; 0x40
 8005658:	4082      	lsls	r2, r0
 800565a:	4313      	orrs	r3, r2
 800565c:	3401      	adds	r4, #1
 800565e:	9304      	str	r3, [sp, #16]
 8005660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005664:	4825      	ldr	r0, [pc, #148]	; (80056fc <_svfiprintf_r+0x1ec>)
 8005666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800566a:	2206      	movs	r2, #6
 800566c:	f7fa fd88 	bl	8000180 <memchr>
 8005670:	2800      	cmp	r0, #0
 8005672:	d038      	beq.n	80056e6 <_svfiprintf_r+0x1d6>
 8005674:	4b22      	ldr	r3, [pc, #136]	; (8005700 <_svfiprintf_r+0x1f0>)
 8005676:	bb1b      	cbnz	r3, 80056c0 <_svfiprintf_r+0x1b0>
 8005678:	9b03      	ldr	r3, [sp, #12]
 800567a:	3307      	adds	r3, #7
 800567c:	f023 0307 	bic.w	r3, r3, #7
 8005680:	3308      	adds	r3, #8
 8005682:	9303      	str	r3, [sp, #12]
 8005684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005686:	4433      	add	r3, r6
 8005688:	9309      	str	r3, [sp, #36]	; 0x24
 800568a:	e768      	b.n	800555e <_svfiprintf_r+0x4e>
 800568c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005690:	460c      	mov	r4, r1
 8005692:	2001      	movs	r0, #1
 8005694:	e7a6      	b.n	80055e4 <_svfiprintf_r+0xd4>
 8005696:	2300      	movs	r3, #0
 8005698:	3401      	adds	r4, #1
 800569a:	9305      	str	r3, [sp, #20]
 800569c:	4619      	mov	r1, r3
 800569e:	f04f 0c0a 	mov.w	ip, #10
 80056a2:	4620      	mov	r0, r4
 80056a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056a8:	3a30      	subs	r2, #48	; 0x30
 80056aa:	2a09      	cmp	r2, #9
 80056ac:	d903      	bls.n	80056b6 <_svfiprintf_r+0x1a6>
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0c6      	beq.n	8005640 <_svfiprintf_r+0x130>
 80056b2:	9105      	str	r1, [sp, #20]
 80056b4:	e7c4      	b.n	8005640 <_svfiprintf_r+0x130>
 80056b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80056ba:	4604      	mov	r4, r0
 80056bc:	2301      	movs	r3, #1
 80056be:	e7f0      	b.n	80056a2 <_svfiprintf_r+0x192>
 80056c0:	ab03      	add	r3, sp, #12
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	462a      	mov	r2, r5
 80056c6:	4b0f      	ldr	r3, [pc, #60]	; (8005704 <_svfiprintf_r+0x1f4>)
 80056c8:	a904      	add	r1, sp, #16
 80056ca:	4638      	mov	r0, r7
 80056cc:	f3af 8000 	nop.w
 80056d0:	1c42      	adds	r2, r0, #1
 80056d2:	4606      	mov	r6, r0
 80056d4:	d1d6      	bne.n	8005684 <_svfiprintf_r+0x174>
 80056d6:	89ab      	ldrh	r3, [r5, #12]
 80056d8:	065b      	lsls	r3, r3, #25
 80056da:	f53f af2d 	bmi.w	8005538 <_svfiprintf_r+0x28>
 80056de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056e0:	b01d      	add	sp, #116	; 0x74
 80056e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e6:	ab03      	add	r3, sp, #12
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	462a      	mov	r2, r5
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <_svfiprintf_r+0x1f4>)
 80056ee:	a904      	add	r1, sp, #16
 80056f0:	4638      	mov	r0, r7
 80056f2:	f000 f879 	bl	80057e8 <_printf_i>
 80056f6:	e7eb      	b.n	80056d0 <_svfiprintf_r+0x1c0>
 80056f8:	08009198 	.word	0x08009198
 80056fc:	080091a2 	.word	0x080091a2
 8005700:	00000000 	.word	0x00000000
 8005704:	0800545d 	.word	0x0800545d
 8005708:	0800919e 	.word	0x0800919e

0800570c <_printf_common>:
 800570c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	4616      	mov	r6, r2
 8005712:	4699      	mov	r9, r3
 8005714:	688a      	ldr	r2, [r1, #8]
 8005716:	690b      	ldr	r3, [r1, #16]
 8005718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800571c:	4293      	cmp	r3, r2
 800571e:	bfb8      	it	lt
 8005720:	4613      	movlt	r3, r2
 8005722:	6033      	str	r3, [r6, #0]
 8005724:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005728:	4607      	mov	r7, r0
 800572a:	460c      	mov	r4, r1
 800572c:	b10a      	cbz	r2, 8005732 <_printf_common+0x26>
 800572e:	3301      	adds	r3, #1
 8005730:	6033      	str	r3, [r6, #0]
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	0699      	lsls	r1, r3, #26
 8005736:	bf42      	ittt	mi
 8005738:	6833      	ldrmi	r3, [r6, #0]
 800573a:	3302      	addmi	r3, #2
 800573c:	6033      	strmi	r3, [r6, #0]
 800573e:	6825      	ldr	r5, [r4, #0]
 8005740:	f015 0506 	ands.w	r5, r5, #6
 8005744:	d106      	bne.n	8005754 <_printf_common+0x48>
 8005746:	f104 0a19 	add.w	sl, r4, #25
 800574a:	68e3      	ldr	r3, [r4, #12]
 800574c:	6832      	ldr	r2, [r6, #0]
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	42ab      	cmp	r3, r5
 8005752:	dc26      	bgt.n	80057a2 <_printf_common+0x96>
 8005754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005758:	1e13      	subs	r3, r2, #0
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	bf18      	it	ne
 800575e:	2301      	movne	r3, #1
 8005760:	0692      	lsls	r2, r2, #26
 8005762:	d42b      	bmi.n	80057bc <_printf_common+0xb0>
 8005764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005768:	4649      	mov	r1, r9
 800576a:	4638      	mov	r0, r7
 800576c:	47c0      	blx	r8
 800576e:	3001      	adds	r0, #1
 8005770:	d01e      	beq.n	80057b0 <_printf_common+0xa4>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	6922      	ldr	r2, [r4, #16]
 8005776:	f003 0306 	and.w	r3, r3, #6
 800577a:	2b04      	cmp	r3, #4
 800577c:	bf02      	ittt	eq
 800577e:	68e5      	ldreq	r5, [r4, #12]
 8005780:	6833      	ldreq	r3, [r6, #0]
 8005782:	1aed      	subeq	r5, r5, r3
 8005784:	68a3      	ldr	r3, [r4, #8]
 8005786:	bf0c      	ite	eq
 8005788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800578c:	2500      	movne	r5, #0
 800578e:	4293      	cmp	r3, r2
 8005790:	bfc4      	itt	gt
 8005792:	1a9b      	subgt	r3, r3, r2
 8005794:	18ed      	addgt	r5, r5, r3
 8005796:	2600      	movs	r6, #0
 8005798:	341a      	adds	r4, #26
 800579a:	42b5      	cmp	r5, r6
 800579c:	d11a      	bne.n	80057d4 <_printf_common+0xc8>
 800579e:	2000      	movs	r0, #0
 80057a0:	e008      	b.n	80057b4 <_printf_common+0xa8>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4652      	mov	r2, sl
 80057a6:	4649      	mov	r1, r9
 80057a8:	4638      	mov	r0, r7
 80057aa:	47c0      	blx	r8
 80057ac:	3001      	adds	r0, #1
 80057ae:	d103      	bne.n	80057b8 <_printf_common+0xac>
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295
 80057b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b8:	3501      	adds	r5, #1
 80057ba:	e7c6      	b.n	800574a <_printf_common+0x3e>
 80057bc:	18e1      	adds	r1, r4, r3
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	2030      	movs	r0, #48	; 0x30
 80057c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057c6:	4422      	add	r2, r4
 80057c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057d0:	3302      	adds	r3, #2
 80057d2:	e7c7      	b.n	8005764 <_printf_common+0x58>
 80057d4:	2301      	movs	r3, #1
 80057d6:	4622      	mov	r2, r4
 80057d8:	4649      	mov	r1, r9
 80057da:	4638      	mov	r0, r7
 80057dc:	47c0      	blx	r8
 80057de:	3001      	adds	r0, #1
 80057e0:	d0e6      	beq.n	80057b0 <_printf_common+0xa4>
 80057e2:	3601      	adds	r6, #1
 80057e4:	e7d9      	b.n	800579a <_printf_common+0x8e>
	...

080057e8 <_printf_i>:
 80057e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057ec:	7e0f      	ldrb	r7, [r1, #24]
 80057ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057f0:	2f78      	cmp	r7, #120	; 0x78
 80057f2:	4691      	mov	r9, r2
 80057f4:	4680      	mov	r8, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	469a      	mov	sl, r3
 80057fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057fe:	d807      	bhi.n	8005810 <_printf_i+0x28>
 8005800:	2f62      	cmp	r7, #98	; 0x62
 8005802:	d80a      	bhi.n	800581a <_printf_i+0x32>
 8005804:	2f00      	cmp	r7, #0
 8005806:	f000 80d4 	beq.w	80059b2 <_printf_i+0x1ca>
 800580a:	2f58      	cmp	r7, #88	; 0x58
 800580c:	f000 80c0 	beq.w	8005990 <_printf_i+0x1a8>
 8005810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005818:	e03a      	b.n	8005890 <_printf_i+0xa8>
 800581a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800581e:	2b15      	cmp	r3, #21
 8005820:	d8f6      	bhi.n	8005810 <_printf_i+0x28>
 8005822:	a101      	add	r1, pc, #4	; (adr r1, 8005828 <_printf_i+0x40>)
 8005824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005828:	08005881 	.word	0x08005881
 800582c:	08005895 	.word	0x08005895
 8005830:	08005811 	.word	0x08005811
 8005834:	08005811 	.word	0x08005811
 8005838:	08005811 	.word	0x08005811
 800583c:	08005811 	.word	0x08005811
 8005840:	08005895 	.word	0x08005895
 8005844:	08005811 	.word	0x08005811
 8005848:	08005811 	.word	0x08005811
 800584c:	08005811 	.word	0x08005811
 8005850:	08005811 	.word	0x08005811
 8005854:	08005999 	.word	0x08005999
 8005858:	080058c1 	.word	0x080058c1
 800585c:	08005953 	.word	0x08005953
 8005860:	08005811 	.word	0x08005811
 8005864:	08005811 	.word	0x08005811
 8005868:	080059bb 	.word	0x080059bb
 800586c:	08005811 	.word	0x08005811
 8005870:	080058c1 	.word	0x080058c1
 8005874:	08005811 	.word	0x08005811
 8005878:	08005811 	.word	0x08005811
 800587c:	0800595b 	.word	0x0800595b
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	1d1a      	adds	r2, r3, #4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	602a      	str	r2, [r5, #0]
 8005888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800588c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005890:	2301      	movs	r3, #1
 8005892:	e09f      	b.n	80059d4 <_printf_i+0x1ec>
 8005894:	6820      	ldr	r0, [r4, #0]
 8005896:	682b      	ldr	r3, [r5, #0]
 8005898:	0607      	lsls	r7, r0, #24
 800589a:	f103 0104 	add.w	r1, r3, #4
 800589e:	6029      	str	r1, [r5, #0]
 80058a0:	d501      	bpl.n	80058a6 <_printf_i+0xbe>
 80058a2:	681e      	ldr	r6, [r3, #0]
 80058a4:	e003      	b.n	80058ae <_printf_i+0xc6>
 80058a6:	0646      	lsls	r6, r0, #25
 80058a8:	d5fb      	bpl.n	80058a2 <_printf_i+0xba>
 80058aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058ae:	2e00      	cmp	r6, #0
 80058b0:	da03      	bge.n	80058ba <_printf_i+0xd2>
 80058b2:	232d      	movs	r3, #45	; 0x2d
 80058b4:	4276      	negs	r6, r6
 80058b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058ba:	485a      	ldr	r0, [pc, #360]	; (8005a24 <_printf_i+0x23c>)
 80058bc:	230a      	movs	r3, #10
 80058be:	e012      	b.n	80058e6 <_printf_i+0xfe>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	6820      	ldr	r0, [r4, #0]
 80058c4:	1d19      	adds	r1, r3, #4
 80058c6:	6029      	str	r1, [r5, #0]
 80058c8:	0605      	lsls	r5, r0, #24
 80058ca:	d501      	bpl.n	80058d0 <_printf_i+0xe8>
 80058cc:	681e      	ldr	r6, [r3, #0]
 80058ce:	e002      	b.n	80058d6 <_printf_i+0xee>
 80058d0:	0641      	lsls	r1, r0, #25
 80058d2:	d5fb      	bpl.n	80058cc <_printf_i+0xe4>
 80058d4:	881e      	ldrh	r6, [r3, #0]
 80058d6:	4853      	ldr	r0, [pc, #332]	; (8005a24 <_printf_i+0x23c>)
 80058d8:	2f6f      	cmp	r7, #111	; 0x6f
 80058da:	bf0c      	ite	eq
 80058dc:	2308      	moveq	r3, #8
 80058de:	230a      	movne	r3, #10
 80058e0:	2100      	movs	r1, #0
 80058e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058e6:	6865      	ldr	r5, [r4, #4]
 80058e8:	60a5      	str	r5, [r4, #8]
 80058ea:	2d00      	cmp	r5, #0
 80058ec:	bfa2      	ittt	ge
 80058ee:	6821      	ldrge	r1, [r4, #0]
 80058f0:	f021 0104 	bicge.w	r1, r1, #4
 80058f4:	6021      	strge	r1, [r4, #0]
 80058f6:	b90e      	cbnz	r6, 80058fc <_printf_i+0x114>
 80058f8:	2d00      	cmp	r5, #0
 80058fa:	d04b      	beq.n	8005994 <_printf_i+0x1ac>
 80058fc:	4615      	mov	r5, r2
 80058fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005902:	fb03 6711 	mls	r7, r3, r1, r6
 8005906:	5dc7      	ldrb	r7, [r0, r7]
 8005908:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800590c:	4637      	mov	r7, r6
 800590e:	42bb      	cmp	r3, r7
 8005910:	460e      	mov	r6, r1
 8005912:	d9f4      	bls.n	80058fe <_printf_i+0x116>
 8005914:	2b08      	cmp	r3, #8
 8005916:	d10b      	bne.n	8005930 <_printf_i+0x148>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	07de      	lsls	r6, r3, #31
 800591c:	d508      	bpl.n	8005930 <_printf_i+0x148>
 800591e:	6923      	ldr	r3, [r4, #16]
 8005920:	6861      	ldr	r1, [r4, #4]
 8005922:	4299      	cmp	r1, r3
 8005924:	bfde      	ittt	le
 8005926:	2330      	movle	r3, #48	; 0x30
 8005928:	f805 3c01 	strble.w	r3, [r5, #-1]
 800592c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005930:	1b52      	subs	r2, r2, r5
 8005932:	6122      	str	r2, [r4, #16]
 8005934:	f8cd a000 	str.w	sl, [sp]
 8005938:	464b      	mov	r3, r9
 800593a:	aa03      	add	r2, sp, #12
 800593c:	4621      	mov	r1, r4
 800593e:	4640      	mov	r0, r8
 8005940:	f7ff fee4 	bl	800570c <_printf_common>
 8005944:	3001      	adds	r0, #1
 8005946:	d14a      	bne.n	80059de <_printf_i+0x1f6>
 8005948:	f04f 30ff 	mov.w	r0, #4294967295
 800594c:	b004      	add	sp, #16
 800594e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	f043 0320 	orr.w	r3, r3, #32
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	4833      	ldr	r0, [pc, #204]	; (8005a28 <_printf_i+0x240>)
 800595c:	2778      	movs	r7, #120	; 0x78
 800595e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	6829      	ldr	r1, [r5, #0]
 8005966:	061f      	lsls	r7, r3, #24
 8005968:	f851 6b04 	ldr.w	r6, [r1], #4
 800596c:	d402      	bmi.n	8005974 <_printf_i+0x18c>
 800596e:	065f      	lsls	r7, r3, #25
 8005970:	bf48      	it	mi
 8005972:	b2b6      	uxthmi	r6, r6
 8005974:	07df      	lsls	r7, r3, #31
 8005976:	bf48      	it	mi
 8005978:	f043 0320 	orrmi.w	r3, r3, #32
 800597c:	6029      	str	r1, [r5, #0]
 800597e:	bf48      	it	mi
 8005980:	6023      	strmi	r3, [r4, #0]
 8005982:	b91e      	cbnz	r6, 800598c <_printf_i+0x1a4>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	f023 0320 	bic.w	r3, r3, #32
 800598a:	6023      	str	r3, [r4, #0]
 800598c:	2310      	movs	r3, #16
 800598e:	e7a7      	b.n	80058e0 <_printf_i+0xf8>
 8005990:	4824      	ldr	r0, [pc, #144]	; (8005a24 <_printf_i+0x23c>)
 8005992:	e7e4      	b.n	800595e <_printf_i+0x176>
 8005994:	4615      	mov	r5, r2
 8005996:	e7bd      	b.n	8005914 <_printf_i+0x12c>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	6826      	ldr	r6, [r4, #0]
 800599c:	6961      	ldr	r1, [r4, #20]
 800599e:	1d18      	adds	r0, r3, #4
 80059a0:	6028      	str	r0, [r5, #0]
 80059a2:	0635      	lsls	r5, r6, #24
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	d501      	bpl.n	80059ac <_printf_i+0x1c4>
 80059a8:	6019      	str	r1, [r3, #0]
 80059aa:	e002      	b.n	80059b2 <_printf_i+0x1ca>
 80059ac:	0670      	lsls	r0, r6, #25
 80059ae:	d5fb      	bpl.n	80059a8 <_printf_i+0x1c0>
 80059b0:	8019      	strh	r1, [r3, #0]
 80059b2:	2300      	movs	r3, #0
 80059b4:	6123      	str	r3, [r4, #16]
 80059b6:	4615      	mov	r5, r2
 80059b8:	e7bc      	b.n	8005934 <_printf_i+0x14c>
 80059ba:	682b      	ldr	r3, [r5, #0]
 80059bc:	1d1a      	adds	r2, r3, #4
 80059be:	602a      	str	r2, [r5, #0]
 80059c0:	681d      	ldr	r5, [r3, #0]
 80059c2:	6862      	ldr	r2, [r4, #4]
 80059c4:	2100      	movs	r1, #0
 80059c6:	4628      	mov	r0, r5
 80059c8:	f7fa fbda 	bl	8000180 <memchr>
 80059cc:	b108      	cbz	r0, 80059d2 <_printf_i+0x1ea>
 80059ce:	1b40      	subs	r0, r0, r5
 80059d0:	6060      	str	r0, [r4, #4]
 80059d2:	6863      	ldr	r3, [r4, #4]
 80059d4:	6123      	str	r3, [r4, #16]
 80059d6:	2300      	movs	r3, #0
 80059d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059dc:	e7aa      	b.n	8005934 <_printf_i+0x14c>
 80059de:	6923      	ldr	r3, [r4, #16]
 80059e0:	462a      	mov	r2, r5
 80059e2:	4649      	mov	r1, r9
 80059e4:	4640      	mov	r0, r8
 80059e6:	47d0      	blx	sl
 80059e8:	3001      	adds	r0, #1
 80059ea:	d0ad      	beq.n	8005948 <_printf_i+0x160>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	079b      	lsls	r3, r3, #30
 80059f0:	d413      	bmi.n	8005a1a <_printf_i+0x232>
 80059f2:	68e0      	ldr	r0, [r4, #12]
 80059f4:	9b03      	ldr	r3, [sp, #12]
 80059f6:	4298      	cmp	r0, r3
 80059f8:	bfb8      	it	lt
 80059fa:	4618      	movlt	r0, r3
 80059fc:	e7a6      	b.n	800594c <_printf_i+0x164>
 80059fe:	2301      	movs	r3, #1
 8005a00:	4632      	mov	r2, r6
 8005a02:	4649      	mov	r1, r9
 8005a04:	4640      	mov	r0, r8
 8005a06:	47d0      	blx	sl
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d09d      	beq.n	8005948 <_printf_i+0x160>
 8005a0c:	3501      	adds	r5, #1
 8005a0e:	68e3      	ldr	r3, [r4, #12]
 8005a10:	9903      	ldr	r1, [sp, #12]
 8005a12:	1a5b      	subs	r3, r3, r1
 8005a14:	42ab      	cmp	r3, r5
 8005a16:	dcf2      	bgt.n	80059fe <_printf_i+0x216>
 8005a18:	e7eb      	b.n	80059f2 <_printf_i+0x20a>
 8005a1a:	2500      	movs	r5, #0
 8005a1c:	f104 0619 	add.w	r6, r4, #25
 8005a20:	e7f5      	b.n	8005a0e <_printf_i+0x226>
 8005a22:	bf00      	nop
 8005a24:	080091a9 	.word	0x080091a9
 8005a28:	080091ba 	.word	0x080091ba

08005a2c <memmove>:
 8005a2c:	4288      	cmp	r0, r1
 8005a2e:	b510      	push	{r4, lr}
 8005a30:	eb01 0402 	add.w	r4, r1, r2
 8005a34:	d902      	bls.n	8005a3c <memmove+0x10>
 8005a36:	4284      	cmp	r4, r0
 8005a38:	4623      	mov	r3, r4
 8005a3a:	d807      	bhi.n	8005a4c <memmove+0x20>
 8005a3c:	1e43      	subs	r3, r0, #1
 8005a3e:	42a1      	cmp	r1, r4
 8005a40:	d008      	beq.n	8005a54 <memmove+0x28>
 8005a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a4a:	e7f8      	b.n	8005a3e <memmove+0x12>
 8005a4c:	4402      	add	r2, r0
 8005a4e:	4601      	mov	r1, r0
 8005a50:	428a      	cmp	r2, r1
 8005a52:	d100      	bne.n	8005a56 <memmove+0x2a>
 8005a54:	bd10      	pop	{r4, pc}
 8005a56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a5e:	e7f7      	b.n	8005a50 <memmove+0x24>

08005a60 <_sbrk_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4d06      	ldr	r5, [pc, #24]	; (8005a7c <_sbrk_r+0x1c>)
 8005a64:	2300      	movs	r3, #0
 8005a66:	4604      	mov	r4, r0
 8005a68:	4608      	mov	r0, r1
 8005a6a:	602b      	str	r3, [r5, #0]
 8005a6c:	f7fb fb60 	bl	8001130 <_sbrk>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_sbrk_r+0x1a>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_sbrk_r+0x1a>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	20004178 	.word	0x20004178

08005a80 <_realloc_r>:
 8005a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a84:	4680      	mov	r8, r0
 8005a86:	4614      	mov	r4, r2
 8005a88:	460e      	mov	r6, r1
 8005a8a:	b921      	cbnz	r1, 8005a96 <_realloc_r+0x16>
 8005a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a90:	4611      	mov	r1, r2
 8005a92:	f7ff bc57 	b.w	8005344 <_malloc_r>
 8005a96:	b92a      	cbnz	r2, 8005aa4 <_realloc_r+0x24>
 8005a98:	f7ff fbe8 	bl	800526c <_free_r>
 8005a9c:	4625      	mov	r5, r4
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aa4:	f000 f81b 	bl	8005ade <_malloc_usable_size_r>
 8005aa8:	4284      	cmp	r4, r0
 8005aaa:	4607      	mov	r7, r0
 8005aac:	d802      	bhi.n	8005ab4 <_realloc_r+0x34>
 8005aae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ab2:	d812      	bhi.n	8005ada <_realloc_r+0x5a>
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	4640      	mov	r0, r8
 8005ab8:	f7ff fc44 	bl	8005344 <_malloc_r>
 8005abc:	4605      	mov	r5, r0
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d0ed      	beq.n	8005a9e <_realloc_r+0x1e>
 8005ac2:	42bc      	cmp	r4, r7
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	bf28      	it	cs
 8005aca:	463a      	movcs	r2, r7
 8005acc:	f7ff fbc0 	bl	8005250 <memcpy>
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	4640      	mov	r0, r8
 8005ad4:	f7ff fbca 	bl	800526c <_free_r>
 8005ad8:	e7e1      	b.n	8005a9e <_realloc_r+0x1e>
 8005ada:	4635      	mov	r5, r6
 8005adc:	e7df      	b.n	8005a9e <_realloc_r+0x1e>

08005ade <_malloc_usable_size_r>:
 8005ade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ae2:	1f18      	subs	r0, r3, #4
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	bfbc      	itt	lt
 8005ae8:	580b      	ldrlt	r3, [r1, r0]
 8005aea:	18c0      	addlt	r0, r0, r3
 8005aec:	4770      	bx	lr
	...

08005af0 <_init>:
 8005af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af2:	bf00      	nop
 8005af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af6:	bc08      	pop	{r3}
 8005af8:	469e      	mov	lr, r3
 8005afa:	4770      	bx	lr

08005afc <_fini>:
 8005afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afe:	bf00      	nop
 8005b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b02:	bc08      	pop	{r3}
 8005b04:	469e      	mov	lr, r3
 8005b06:	4770      	bx	lr
