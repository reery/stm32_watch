
bluetooth_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005100  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036d4  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008914  08008914  00018914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800891c  0800891c  0001891c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008920  08008920  00018920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000008  08008924  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003f68  200001e4  08008b00  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000414c  08008b00  0002414c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016e82  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002f87  00000000  00000000  000370d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000016f0  00000000  00000000  0003a060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001183  00000000  00000000  0003b750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00022933  00000000  00000000  0003c8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000158f7  00000000  00000000  0005f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000db9db  00000000  00000000  00074afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000065ec  00000000  00000000  001504d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  00156ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	08005228 	.word	0x08005228

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	08005228 	.word	0x08005228

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800052c:	f023 0218 	bic.w	r2, r3, #24
 8000530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4313      	orrs	r3, r2
 8000538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4013      	ands	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056c:	68fb      	ldr	r3, [r7, #12]
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b090      	sub	sp, #64	; 0x40
 8000580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fe19 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f85b 	bl	8000640 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800058a:	f000 f8cf 	bl	800072c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f99f 	bl	80008d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000592:	f000 f927 	bl	80007e4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000596:	f000 f973 	bl	8000880 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 800059a:	f000 f8e5 	bl	8000768 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  init_display();
 800059e:	f000 fa19 	bl	80009d4 <init_display>
  initDisplayBuffer();
 80005a2:	f000 fbe3 	bl	8000d6c <initDisplayBuffer>
  uint32_t startTime = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  const uint32_t interval = 1000;
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	62bb      	str	r3, [r7, #40]	; 0x28
  startTime = HAL_GetTick();
 80005b0:	f000 fe70 	bl	8001294 <HAL_GetTick>
 80005b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t seconds = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	637b      	str	r3, [r7, #52]	; 0x34
  char str[12];
  uint32_t startTime1 = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  char str1[12];
  char str2[12];
  int vcom_bit = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	633b      	str	r3, [r7, #48]	; 0x30
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (HAL_GetTick() - startTime >= interval) {
 80005c2:	f000 fe67 	bl	8001294 <HAL_GetTick>
 80005c6:	4602      	mov	r2, r0
 80005c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d8f7      	bhi.n	80005c2 <main+0x46>
		 seconds++;
 80005d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005d4:	3301      	adds	r3, #1
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34
		 startTime1 = HAL_GetTick();
 80005d8:	f000 fe5c 	bl	8001294 <HAL_GetTick>
 80005dc:	6278      	str	r0, [r7, #36]	; 0x24
		 drawString(30, 60, "Schnuffi", 1);
 80005de:	2301      	movs	r3, #1
 80005e0:	4a14      	ldr	r2, [pc, #80]	; (8000634 <main+0xb8>)
 80005e2:	213c      	movs	r1, #60	; 0x3c
 80005e4:	201e      	movs	r0, #30
 80005e6:	f000 fb5f 	bl	8000ca8 <drawString>
		 drawString(30, 100, "Schnuffi", 1);
 80005ea:	2301      	movs	r3, #1
 80005ec:	4a11      	ldr	r2, [pc, #68]	; (8000634 <main+0xb8>)
 80005ee:	2164      	movs	r1, #100	; 0x64
 80005f0:	201e      	movs	r0, #30
 80005f2:	f000 fb59 	bl	8000ca8 <drawString>
		 numToString(30, 140, vcom_bit, "u", 1);
 80005f6:	2301      	movs	r3, #1
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <main+0xbc>)
 80005fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005fe:	218c      	movs	r1, #140	; 0x8c
 8000600:	201e      	movs	r0, #30
 8000602:	f000 fb77 	bl	8000cf4 <numToString>
		 startTime1 = HAL_GetTick() - startTime1;
 8000606:	f000 fe45 	bl	8001294 <HAL_GetTick>
 800060a:	4602      	mov	r2, r0
 800060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
		 numToString(80, 20, startTime1, "lu", 1);
 8000612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000614:	2301      	movs	r3, #1
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <main+0xc0>)
 800061a:	2114      	movs	r1, #20
 800061c:	2050      	movs	r0, #80	; 0x50
 800061e:	f000 fb69 	bl	8000cf4 <numToString>
		 vcom_bit = sendToDisplay();
 8000622:	f000 fa2b 	bl	8000a7c <sendToDisplay>
 8000626:	4603      	mov	r3, r0
 8000628:	633b      	str	r3, [r7, #48]	; 0x30
		 HAL_Delay(1000);
 800062a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062e:	f000 fe49 	bl	80012c4 <HAL_Delay>
	  if (HAL_GetTick() - startTime >= interval) {
 8000632:	e7c6      	b.n	80005c2 <main+0x46>
 8000634:	08005240 	.word	0x08005240
 8000638:	0800524c 	.word	0x0800524c
 800063c:	08005250 	.word	0x08005250

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09a      	sub	sp, #104	; 0x68
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2248      	movs	r2, #72	; 0x48
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f004 f966 	bl	8004920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000674:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	f023 0303 	bic.w	r3, r3, #3
 8000680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068a:	f001 f9a3 	bl	80019d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800068e:	2000      	movs	r0, #0
 8000690:	f7ff ff44 	bl	800051c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <SystemClock_Config+0xe8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800069c:	4a22      	ldr	r2, [pc, #136]	; (8000728 <SystemClock_Config+0xe8>)
 800069e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <SystemClock_Config+0xe8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80006b0:	2327      	movs	r3, #39	; 0x27
 80006b2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ba:	2301      	movs	r3, #1
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2340      	movs	r3, #64	; 0x40
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d0:	2360      	movs	r3, #96	; 0x60
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fd0d 	bl	80020fc <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006e8:	f000 f950 	bl	800098c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006ec:	236f      	movs	r3, #111	; 0x6f
 80006ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006f0:	2302      	movs	r3, #2
 80006f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2101      	movs	r1, #1
 800070c:	4618      	mov	r0, r3
 800070e:	f002 f869 	bl	80027e4 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000718:	f000 f938 	bl	800098c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800071c:	f002 fe24 	bl	8003368 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000720:	bf00      	nop
 8000722:	3768      	adds	r7, #104	; 0x68
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	58000400 	.word	0x58000400

0800072c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	; 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000732:	463b      	mov	r3, r7
 8000734:	2250      	movs	r2, #80	; 0x50
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f004 f8f1 	bl	8004920 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800073e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000742:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000748:	2300      	movs	r3, #0
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fc94 	bl	800307c <HAL_RCCEx_PeriphCLKConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800075a:	f000 f917 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	; 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_SPI1_Init+0x74>)
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <MX_SPI1_Init+0x78>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_SPI1_Init+0x74>)
 8000774:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_SPI1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_SPI1_Init+0x74>)
 8000782:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000786:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_SPI1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_SPI1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_SPI1_Init+0x74>)
 8000796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800079a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_SPI1_Init+0x74>)
 800079e:	2210      	movs	r2, #16
 80007a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_SPI1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_SPI1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_SPI1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_SPI1_Init+0x74>)
 80007b6:	2207      	movs	r2, #7
 80007b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_SPI1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_SPI1_Init+0x74>)
 80007c8:	f002 fee5 	bl	8003596 <HAL_SPI_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007d2:	f000 f8db 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000200 	.word	0x20000200
 80007e0:	40013000 	.word	0x40013000

080007e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <MX_USART1_UART_Init+0x94>)
 80007ea:	4a24      	ldr	r2, [pc, #144]	; (800087c <MX_USART1_UART_Init+0x98>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ee:	4b22      	ldr	r3, [pc, #136]	; (8000878 <MX_USART1_UART_Init+0x94>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <MX_USART1_UART_Init+0x94>)
 80007f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007fc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <MX_USART1_UART_Init+0x94>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_USART1_UART_Init+0x94>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_USART1_UART_Init+0x94>)
 800080c:	220c      	movs	r2, #12
 800080e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_USART1_UART_Init+0x94>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_USART1_UART_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_USART1_UART_Init+0x94>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_USART1_UART_Init+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_USART1_UART_Init+0x94>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082e:	4812      	ldr	r0, [pc, #72]	; (8000878 <MX_USART1_UART_Init+0x94>)
 8000830:	f003 fa4e 	bl	8003cd0 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800083a:	f000 f8a7 	bl	800098c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083e:	2100      	movs	r1, #0
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <MX_USART1_UART_Init+0x94>)
 8000842:	f003 ff15 	bl	8004670 <HAL_UARTEx_SetTxFifoThreshold>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800084c:	f000 f89e 	bl	800098c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	4809      	ldr	r0, [pc, #36]	; (8000878 <MX_USART1_UART_Init+0x94>)
 8000854:	f003 ff4a 	bl	80046ec <HAL_UARTEx_SetRxFifoThreshold>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800085e:	f000 f895 	bl	800098c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART1_UART_Init+0x94>)
 8000864:	f003 fecb 	bl	80045fe <HAL_UARTEx_DisableFifoMode>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800086e:	f000 f88d 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000264 	.word	0x20000264
 800087c:	40013800 	.word	0x40013800

08000880 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USB_PCD_Init+0x48>)
 8000886:	4a11      	ldr	r2, [pc, #68]	; (80008cc <MX_USB_PCD_Init+0x4c>)
 8000888:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USB_PCD_Init+0x48>)
 800088c:	2208      	movs	r2, #8
 800088e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_USB_PCD_Init+0x48>)
 8000892:	2202      	movs	r2, #2
 8000894:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USB_PCD_Init+0x48>)
 8000898:	2202      	movs	r2, #2
 800089a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_USB_PCD_Init+0x48>)
 800089e:	2200      	movs	r2, #0
 80008a0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USB_PCD_Init+0x48>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_USB_PCD_Init+0x48>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USB_PCD_Init+0x48>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_USB_PCD_Init+0x48>)
 80008b6:	f000 ff95 	bl	80017e4 <HAL_PCD_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80008c0:	f000 f864 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200002f8 	.word	0x200002f8
 80008cc:	40006800 	.word	0x40006800

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e4:	2004      	movs	r0, #4
 80008e6:	f7ff fe2f 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2001      	movs	r0, #1
 80008ec:	f7ff fe2c 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f0:	2002      	movs	r0, #2
 80008f2:	f7ff fe29 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	2008      	movs	r0, #8
 80008f8:	f7ff fe26 	bl	8000548 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f000 ff55 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2123      	movs	r1, #35	; 0x23
 800090e:	481c      	ldr	r0, [pc, #112]	; (8000980 <MX_GPIO_Init+0xb0>)
 8000910:	f000 ff50 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8000914:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000918:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4619      	mov	r1, r3
 800092a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092e:	f000 fdd1 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000932:	2310      	movs	r3, #16
 8000934:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4619      	mov	r1, r3
 8000942:	4810      	ldr	r0, [pc, #64]	; (8000984 <MX_GPIO_Init+0xb4>)
 8000944:	f000 fdc6 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000948:	2323      	movs	r3, #35	; 0x23
 800094a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4808      	ldr	r0, [pc, #32]	; (8000980 <MX_GPIO_Init+0xb0>)
 800095e:	f000 fdb9 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000962:	2303      	movs	r3, #3
 8000964:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4619      	mov	r1, r3
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_GPIO_Init+0xb8>)
 8000974:	f000 fdae 	bl	80014d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000978:	bf00      	nop
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	48000400 	.word	0x48000400
 8000984:	48000800 	.word	0x48000800
 8000988:	48000c00 	.word	0x48000c00

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <clearDisplay>:
//uint8_t frontBuffer[DISPLAY_HEIGHT][DISPLAY_WIDTH / 8];
uint8_t backBuffer[DISPLAY_HEIGHT][DISPLAY_WIDTH / 8] __attribute__((aligned(4)));
uint8_t (*currentBuffer)[DISPLAY_WIDTH / 8] = backBuffer;
uint8_t sendToDisplayBuffer[TOTAL_DATA_SIZE];

void clearDisplay(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	SCS_HIGH();
 800099c:	2201      	movs	r2, #1
 800099e:	2110      	movs	r1, #16
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a4:	f000 ff06 	bl	80017b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &clear_command, 1, HAL_MAX_DELAY);
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	2201      	movs	r2, #1
 80009ae:	4907      	ldr	r1, [pc, #28]	; (80009cc <clearDisplay+0x34>)
 80009b0:	4807      	ldr	r0, [pc, #28]	; (80009d0 <clearDisplay+0x38>)
 80009b2:	f002 fe93 	bl	80036dc <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, &dummy_8bit, 1, HAL_MAX_DELAY);
	SCS_LOW();
 80009b6:	2200      	movs	r2, #0
 80009b8:	2110      	movs	r1, #16
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009be:	f000 fef9 	bl	80017b4 <HAL_GPIO_WritePin>
	toggle_vcom();
 80009c2:	f000 f82d 	bl	8000a20 <toggle_vcom>
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000180 	.word	0x20000180
 80009d0:	20000200 	.word	0x20000200

080009d4 <init_display>:

void init_display(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	// Step 1
	HAL_Delay(10);
 80009d8:	200a      	movs	r0, #10
 80009da:	f000 fc73 	bl	80012c4 <HAL_Delay>
	DISP_LOW();
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f000 fee4 	bl	80017b4 <HAL_GPIO_WritePin>
	SCS_LOW();
 80009ec:	2200      	movs	r2, #0
 80009ee:	2110      	movs	r1, #16
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f4:	f000 fede 	bl	80017b4 <HAL_GPIO_WritePin>
	EXTCOMIN_LOW();
 80009f8:	2200      	movs	r2, #0
 80009fa:	2140      	movs	r1, #64	; 0x40
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f000 fed8 	bl	80017b4 <HAL_GPIO_WritePin>
	// Step 2
	clearDisplay();
 8000a04:	f7ff ffc8 	bl	8000998 <clearDisplay>
	HAL_Delay(50);
 8000a08:	2032      	movs	r0, #50	; 0x32
 8000a0a:	f000 fc5b 	bl	80012c4 <HAL_Delay>
	// Step 3
	DISP_HIGH();
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f000 fecc 	bl	80017b4 <HAL_GPIO_WritePin>
	// Step 4
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <toggle_vcom>:

unsigned int toggle_vcom(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	SCS_HIGH();
 8000a24:	2201      	movs	r2, #1
 8000a26:	2110      	movs	r1, #16
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f000 fec2 	bl	80017b4 <HAL_GPIO_WritePin>
	vcom_bit ^= 0x40;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <toggle_vcom+0x50>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <toggle_vcom+0x50>)
 8000a3c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &vcom_bit, 1, HAL_MAX_DELAY);
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	2201      	movs	r2, #1
 8000a44:	490a      	ldr	r1, [pc, #40]	; (8000a70 <toggle_vcom+0x50>)
 8000a46:	480b      	ldr	r0, [pc, #44]	; (8000a74 <toggle_vcom+0x54>)
 8000a48:	f002 fe48 	bl	80036dc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &dummy_8bit, 1, HAL_MAX_DELAY);
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a50:	2201      	movs	r2, #1
 8000a52:	4909      	ldr	r1, [pc, #36]	; (8000a78 <toggle_vcom+0x58>)
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <toggle_vcom+0x54>)
 8000a56:	f002 fe41 	bl	80036dc <HAL_SPI_Transmit>
	SCS_LOW();
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2110      	movs	r1, #16
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f000 fea7 	bl	80017b4 <HAL_GPIO_WritePin>
	return vcom_bit;
 8000a66:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <toggle_vcom+0x50>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000182 	.word	0x20000182
 8000a74:	20000200 	.word	0x20000200
 8000a78:	200005d5 	.word	0x200005d5

08000a7c <sendToDisplay>:
	RED_LED_OFF();
	toggle_vcom();
}

// This uses a more efficient SPI transfer method
unsigned int sendToDisplay(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
	uint8_t* sendBufferPtr = sendToDisplayBuffer;
 8000a82:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <sendToDisplay+0xd0>)
 8000a84:	617b      	str	r3, [r7, #20]
	*sendBufferPtr++ = write_mode;
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	617a      	str	r2, [r7, #20]
 8000a8c:	4a30      	ldr	r2, [pc, #192]	; (8000b50 <sendToDisplay+0xd4>)
 8000a8e:	7812      	ldrb	r2, [r2, #0]
 8000a90:	701a      	strb	r2, [r3, #0]

	for (uint8_t line = 1; line <= DISPLAY_HEIGHT; line++) {
 8000a92:	2301      	movs	r3, #1
 8000a94:	74fb      	strb	r3, [r7, #19]
 8000a96:	e027      	b.n	8000ae8 <sendToDisplay+0x6c>
	    // Send line address inverted
	    uint8_t line_address = (uint8_t)(__RBIT((uint8_t)(line)) >> 24);
 8000a98:	7cfb      	ldrb	r3, [r7, #19]
 8000a9a:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	fa93 f3a3 	rbit	r3, r3
 8000aa2:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	0e1b      	lsrs	r3, r3, #24
 8000aa8:	72fb      	strb	r3, [r7, #11]
	    *sendBufferPtr++ = line_address;
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	1c5a      	adds	r2, r3, #1
 8000aae:	617a      	str	r2, [r7, #20]
 8000ab0:	7afa      	ldrb	r2, [r7, #11]
 8000ab2:	701a      	strb	r2, [r3, #0]

	    // Add pixel data from displayBuffer -> to improve this all the gfx code could modify only the bufferPtr/sendToDisplayBuffer
	    memcpy(sendBufferPtr, currentBuffer[line - 1], DISPLAY_WIDTH / 8);
 8000ab4:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <sendToDisplay+0xd8>)
 8000ab6:	6819      	ldr	r1, [r3, #0]
 8000ab8:	7cfa      	ldrb	r2, [r7, #19]
 8000aba:	4613      	mov	r3, r2
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	3b1e      	subs	r3, #30
 8000ac4:	440b      	add	r3, r1
 8000ac6:	221e      	movs	r2, #30
 8000ac8:	4619      	mov	r1, r3
 8000aca:	6978      	ldr	r0, [r7, #20]
 8000acc:	f003 ff5c 	bl	8004988 <memcpy>
	    sendBufferPtr += DISPLAY_WIDTH / 8;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	331e      	adds	r3, #30
 8000ad4:	617b      	str	r3, [r7, #20]

	    // Send 8 dummy bits after each line's pixel data
	    *sendBufferPtr++ = dummy_8bit;
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	1c5a      	adds	r2, r3, #1
 8000ada:	617a      	str	r2, [r7, #20]
 8000adc:	4a1e      	ldr	r2, [pc, #120]	; (8000b58 <sendToDisplay+0xdc>)
 8000ade:	7812      	ldrb	r2, [r2, #0]
 8000ae0:	701a      	strb	r2, [r3, #0]
	for (uint8_t line = 1; line <= DISPLAY_HEIGHT; line++) {
 8000ae2:	7cfb      	ldrb	r3, [r7, #19]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	74fb      	strb	r3, [r7, #19]
 8000ae8:	7cfb      	ldrb	r3, [r7, #19]
 8000aea:	2bf0      	cmp	r3, #240	; 0xf0
 8000aec:	d9d4      	bls.n	8000a98 <sendToDisplay+0x1c>
	}
	*sendBufferPtr++ = dummy_16bit;
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	617a      	str	r2, [r7, #20]
 8000af4:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <sendToDisplay+0xe0>)
 8000af6:	7812      	ldrb	r2, [r2, #0]
 8000af8:	701a      	strb	r2, [r3, #0]

	RED_LED_ON();
 8000afa:	2201      	movs	r2, #1
 8000afc:	2102      	movs	r1, #2
 8000afe:	4818      	ldr	r0, [pc, #96]	; (8000b60 <sendToDisplay+0xe4>)
 8000b00:	f000 fe58 	bl	80017b4 <HAL_GPIO_WritePin>
	SCS_HIGH();
 8000b04:	2201      	movs	r2, #1
 8000b06:	2110      	movs	r1, #16
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0c:	f000 fe52 	bl	80017b4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, sendToDisplayBuffer, TOTAL_DATA_SIZE, HAL_MAX_DELAY);
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	f641 6203 	movw	r2, #7683	; 0x1e03
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <sendToDisplay+0xd0>)
 8000b1a:	4812      	ldr	r0, [pc, #72]	; (8000b64 <sendToDisplay+0xe8>)
 8000b1c:	f002 fdde 	bl	80036dc <HAL_SPI_Transmit>
	SCS_LOW();
 8000b20:	2200      	movs	r2, #0
 8000b22:	2110      	movs	r1, #16
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f000 fe44 	bl	80017b4 <HAL_GPIO_WritePin>
	//updateBuffer();
	//currentBuffer = (currentBuffer == frontBuffer) ? backBuffer : frontBuffer;
	initCurrentBuffer();
 8000b2c:	f000 f92c 	bl	8000d88 <initCurrentBuffer>

	RED_LED_OFF();
 8000b30:	2200      	movs	r2, #0
 8000b32:	2102      	movs	r1, #2
 8000b34:	480a      	ldr	r0, [pc, #40]	; (8000b60 <sendToDisplay+0xe4>)
 8000b36:	f000 fe3d 	bl	80017b4 <HAL_GPIO_WritePin>

	int vcom_bit = toggle_vcom();
 8000b3a:	f7ff ff71 	bl	8000a20 <toggle_vcom>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	60fb      	str	r3, [r7, #12]
	return vcom_bit;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200021f8 	.word	0x200021f8
 8000b50:	20000181 	.word	0x20000181
 8000b54:	20000184 	.word	0x20000184
 8000b58:	200005d5 	.word	0x200005d5
 8000b5c:	200005d4 	.word	0x200005d4
 8000b60:	48000400 	.word	0x48000400
 8000b64:	20000200 	.word	0x20000200

08000b68 <setPixel_BB>:
		// Clear the bit to erase a pixel (assuming 1 is the color for erasing)
		currentBuffer[y][byteIndex] |= (1 << bitIndex);
	}
}

void setPixel_BB(int x, int y, bool color) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b08b      	sub	sp, #44	; 0x2c
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	4613      	mov	r3, r2
 8000b74:	71fb      	strb	r3, [r7, #7]
	int byteIndex = x >> 3; // byteIndex = x / 8
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	10db      	asrs	r3, r3, #3
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
	int bitIndex = 7 - (x & 7); // bitIndex = 7 - (x % 8)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	f003 0307 	and.w	r3, r3, #7
 8000b84:	623b      	str	r3, [r7, #32]

	// Calculate the byte offset within the buffer
	uint32_t byte_offset = (uint32_t)&currentBuffer[y][byteIndex] - SRAM_BASE;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <setPixel_BB+0x64>)
 8000b88:	6819      	ldr	r1, [r3, #0]
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	1a9b      	subs	r3, r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	18ca      	adds	r2, r1, r3
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	4413      	add	r3, r2
 8000b9a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b9e:	61fb      	str	r3, [r7, #28]

	// Calculate the bit_word_offset and bit_band_alias_address
	uint32_t bit_word_offset = (byte_offset << 5) + (bitIndex << 2); // bit_word_offset = (byte_offset) * 32 + (bitIndex * 4)
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	015b      	lsls	r3, r3, #5
 8000ba4:	6a3a      	ldr	r2, [r7, #32]
 8000ba6:	0092      	lsls	r2, r2, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
	uint32_t bit_band_alias_address = SRAM_BB_BASE + bit_word_offset;
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 8000bb2:	617b      	str	r3, [r7, #20]

	// Use bit-banding to set or clear the bit
	*(volatile uint32_t *)bit_band_alias_address = (color ? 0 : 1);
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f083 0301 	eor.w	r3, r3, #1
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	372c      	adds	r7, #44	; 0x2c
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	20000184 	.word	0x20000184

08000bd0 <drawChar>:

void drawChar(int x, int y, char c, bool color) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b092      	sub	sp, #72	; 0x48
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	460b      	mov	r3, r1
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	4613      	mov	r3, r2
 8000be4:	71bb      	strb	r3, [r7, #6]
	// Get the index of the character in the font arrays
	int charIndex = c - 33; // Assuming '!' (char 33) is the first character in your font
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	3b21      	subs	r3, #33	; 0x21
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34

	// Get the character width and bitmap address
	int width = char_width[charIndex];
 8000bec:	4a2c      	ldr	r2, [pc, #176]	; (8000ca0 <drawChar+0xd0>)
 8000bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
	const char* bitmap = char_addr[charIndex];
 8000bf6:	4a2b      	ldr	r2, [pc, #172]	; (8000ca4 <drawChar+0xd4>)
 8000bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Iterate over each vertical slice (column) in the character's bitmap
	for (int col = 0; col < width; col++) {
 8000c00:	2300      	movs	r3, #0
 8000c02:	647b      	str	r3, [r7, #68]	; 0x44
 8000c04:	e043      	b.n	8000c8e <drawChar+0xbe>
		int displayX = x + col;  // X position is based on the column (width)
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c0a:	4413      	add	r3, r2
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
		int bitmapColOffset = col; // Pre-calculate column offset in the bitmap
 8000c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24

		int prevRowDivisionResult = -1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
		int prevRowDivisionResultTimesWidth = -1;
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	63fb      	str	r3, [r7, #60]	; 0x3c

		// Iterate over each row in the character's bitmap
		for (int row = 0; row < 48; row++) { // Assuming 48 pixels in height
 8000c1e:	2300      	movs	r3, #0
 8000c20:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c22:	e02e      	b.n	8000c82 <drawChar+0xb2>
			int displayY = y + row;  // Y position is based on the row (height)
 8000c24:	68ba      	ldr	r2, [r7, #8]
 8000c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c28:	4413      	add	r3, r2
 8000c2a:	623b      	str	r3, [r7, #32]

			// Optimize division and multiplication
			int rowDivisionResult = row >> 3;
 8000c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c2e:	10db      	asrs	r3, r3, #3
 8000c30:	61fb      	str	r3, [r7, #28]
			if (rowDivisionResult != prevRowDivisionResult) {
 8000c32:	69fa      	ldr	r2, [r7, #28]
 8000c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d006      	beq.n	8000c48 <drawChar+0x78>
				prevRowDivisionResult = rowDivisionResult;
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	643b      	str	r3, [r7, #64]	; 0x40
				prevRowDivisionResultTimesWidth = rowDivisionResult * width;
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c42:	fb02 f303 	mul.w	r3, r2, r3
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
			}

			// Calculate the position in the bitmap array and the bit index
			int bitmapIndex = bitmapColOffset + prevRowDivisionResultTimesWidth;
 8000c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c4c:	4413      	add	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
			int bitIndex = row & 7;  // Bit index within the byte, assuming LSB to MSB ordering
 8000c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	617b      	str	r3, [r7, #20]

			// Check if the pixel should be drawn (based on the bitmap data)
			if (bitmap[bitmapIndex] & (1 << bitIndex)) {
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c5c:	4413      	add	r3, r2
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa42 f303 	asr.w	r3, r2, r3
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d005      	beq.n	8000c7c <drawChar+0xac>
				setPixel_BB(displayX, displayY, color); // Draw the pixel
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	461a      	mov	r2, r3
 8000c74:	6a39      	ldr	r1, [r7, #32]
 8000c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c78:	f7ff ff76 	bl	8000b68 <setPixel_BB>
		for (int row = 0; row < 48; row++) { // Assuming 48 pixels in height
 8000c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c7e:	3301      	adds	r3, #1
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c84:	2b2f      	cmp	r3, #47	; 0x2f
 8000c86:	ddcd      	ble.n	8000c24 <drawChar+0x54>
	for (int col = 0; col < width; col++) {
 8000c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8000c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c92:	429a      	cmp	r2, r3
 8000c94:	dbb7      	blt.n	8000c06 <drawChar+0x36>
			}
		}
	}
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	3748      	adds	r7, #72	; 0x48
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	080087b8 	.word	0x080087b8
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <drawString>:


void drawString(int x, int y, const char* str, bool color) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000cb6:	e012      	b.n	8000cde <drawString+0x36>
        drawChar(x, y, *str, color);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	68b9      	ldr	r1, [r7, #8]
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f7ff ff85 	bl	8000bd0 <drawChar>
        x += char_width[*str - 33] + 1; // Move x to the next character position
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	3b21      	subs	r3, #33	; 0x21
 8000ccc:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <drawString+0x48>)
 8000cce:	5cd3      	ldrb	r3, [r2, r3]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]
        str++; // Next character
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	607b      	str	r3, [r7, #4]
    while (*str) {
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1e8      	bne.n	8000cb8 <drawString+0x10>
    }
}
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	080087b8 	.word	0x080087b8

08000cf4 <numToString>:

void numToString(int x, int y, int number, char *format, bool color) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	603b      	str	r3, [r7, #0]
	char str[16];
	char *string_pointer = str;
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
	char finalFormat[8];
	snprintf(finalFormat, sizeof(finalFormat), "%%%s", format);
 8000d08:	f107 0014 	add.w	r0, r7, #20
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <numToString+0x70>)
 8000d10:	2108      	movs	r1, #8
 8000d12:	f003 fdb1 	bl	8004878 <sniprintf>
	sprintf(str, finalFormat, number);
 8000d16:	f107 0114 	add.w	r1, r7, #20
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f003 fddd 	bl	80048e0 <siprintf>
	while (*string_pointer) {
 8000d26:	e013      	b.n	8000d50 <numToString+0x5c>
        drawChar(x, y, *string_pointer, color);
 8000d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2a:	781a      	ldrb	r2, [r3, #0]
 8000d2c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	68f8      	ldr	r0, [r7, #12]
 8000d34:	f7ff ff4c 	bl	8000bd0 <drawChar>
        x += char_width[*string_pointer - 33] + 1; // Move x to the next character position
 8000d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	3b21      	subs	r3, #33	; 0x21
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <numToString+0x74>)
 8000d40:	5cd3      	ldrb	r3, [r2, r3]
 8000d42:	3301      	adds	r3, #1
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
        string_pointer++; // Next character
 8000d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (*string_pointer) {
 8000d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1e7      	bne.n	8000d28 <numToString+0x34>
    }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3730      	adds	r7, #48	; 0x30
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	08005254 	.word	0x08005254
 8000d68:	080087b8 	.word	0x080087b8

08000d6c <initDisplayBuffer>:
	    	currentBuffer[row][col] = ~currentBuffer[row][col];
	    }
	}
}

void initDisplayBuffer(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	//memset(frontBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
	memset(currentBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <initDisplayBuffer+0x18>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000d78:	21ff      	movs	r1, #255	; 0xff
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f003 fdd0 	bl	8004920 <memset>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000184 	.word	0x20000184

08000d88 <initCurrentBuffer>:

void initCurrentBuffer(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	memset(currentBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <initCurrentBuffer+0x18>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000d94:	21ff      	movs	r1, #255	; 0xff
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 fdc2 	bl	8004920 <memset>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000184 	.word	0x20000184

08000da4 <LL_AHB2_GRP1_EnableClock>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b085      	sub	sp, #20
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4013      	ands	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <HAL_SPI_MspInit+0x5c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d117      	bne.n	8000e9a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e6a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e6e:	f7ff ffcb 	bl	8000e08 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff ff96 	bl	8000da4 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e78:	23a0      	movs	r3, #160	; 0xa0
 8000e7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e88:	2305      	movs	r3, #5
 8000e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e96:	f000 fb1d 	bl	80014d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3720      	adds	r7, #32
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40013000 	.word	0x40013000

08000ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09c      	sub	sp, #112	; 0x70
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	2250      	movs	r2, #80	; 0x50
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f003 fd29 	bl	8004920 <memset>
  if(huart->Instance==USART1)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <HAL_UART_MspInit+0x84>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d124      	bne.n	8000f22 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f002 f8c9 	bl	800307c <HAL_RCCEx_PeriphCLKConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ef0:	f7ff fd4c 	bl	800098c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ef8:	f7ff ff86 	bl	8000e08 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efc:	2002      	movs	r0, #2
 8000efe:	f7ff ff51 	bl	8000da4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f02:	23c0      	movs	r3, #192	; 0xc0
 8000f04:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f12:	2307      	movs	r3, #7
 8000f14:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <HAL_UART_MspInit+0x88>)
 8000f1e:	f000 fad9 	bl	80014d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	3770      	adds	r7, #112	; 0x70
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40013800 	.word	0x40013800
 8000f30:	48000400 	.word	0x48000400

08000f34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b09c      	sub	sp, #112	; 0x70
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2250      	movs	r2, #80	; 0x50
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f003 fce3 	bl	8004920 <memset>
  if(hpcd->Instance==USB)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_PCD_MspInit+0xa8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d136      	bne.n	8000fd2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f68:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000f6a:	2318      	movs	r3, #24
 8000f6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000f6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f72:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000f74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000f7a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f84:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000f86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f8a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 f873 	bl	800307c <HAL_RCCEx_PeriphCLKConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000f9c:	f7ff fcf6 	bl	800098c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f7ff feff 	bl	8000da4 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fa6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000faa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000fb8:	230a      	movs	r3, #10
 8000fba:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f000 fa85 	bl	80014d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000fca:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000fce:	f7ff ff02 	bl	8000dd6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3770      	adds	r7, #112	; 0x70
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40006800 	.word	0x40006800

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <UsageFault_Handler+0x4>

08000ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102c:	f000 f91e 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	; (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001064:	f003 fc64 	bl	8004930 <__errno>
 8001068:	4603      	mov	r3, r0
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	e009      	b.n	8001088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <_sbrk+0x64>)
 8001084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20030000 	.word	0x20030000
 8001094:	00000400 	.word	0x00000400
 8001098:	20003ffc 	.word	0x20003ffc
 800109c:	20004150 	.word	0x20004150

080010a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <SystemInit+0x98>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010aa:	4a23      	ldr	r2, [pc, #140]	; (8001138 <SystemInit+0x98>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80010c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80010cc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80010ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <SystemInit+0x9c>)
 80010da:	4013      	ands	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80010de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ea:	f023 0305 	bic.w	r3, r3, #5
 80010ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80010f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010fe:	f023 0301 	bic.w	r3, r3, #1
 8001102:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110a:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <SystemInit+0xa0>)
 800110c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800110e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <SystemInit+0xa0>)
 8001114:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001124:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00
 800113c:	faf6fefb 	.word	0xfaf6fefb
 8001140:	22041000 	.word	0x22041000

08001144 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001144:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001146:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001148:	3304      	adds	r3, #4

0800114a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800114e:	d3f9      	bcc.n	8001144 <CopyDataInit>
  bx lr
 8001150:	4770      	bx	lr

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001152:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001154:	3004      	adds	r0, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001156:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>
  bx lr
 800115a:	4770      	bx	lr

0800115c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800115e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001160:	f7ff ff9e 	bl	80010a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <LoopForever+0x6>)
 8001166:	490c      	ldr	r1, [pc, #48]	; (8001198 <LoopForever+0xa>)
 8001168:	4a0c      	ldr	r2, [pc, #48]	; (800119c <LoopForever+0xe>)
 800116a:	2300      	movs	r3, #0
 800116c:	f7ff ffed 	bl	800114a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001170:	480b      	ldr	r0, [pc, #44]	; (80011a0 <LoopForever+0x12>)
 8001172:	490c      	ldr	r1, [pc, #48]	; (80011a4 <LoopForever+0x16>)
 8001174:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <LoopForever+0x1a>)
 8001176:	2300      	movs	r3, #0
 8001178:	f7ff ffe7 	bl	800114a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <LoopForever+0x1e>)
 800117e:	490c      	ldr	r1, [pc, #48]	; (80011b0 <LoopForever+0x22>)
 8001180:	2300      	movs	r3, #0
 8001182:	f7ff ffe8 	bl	8001156 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001186:	f003 fbd9 	bl	800493c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800118a:	f7ff f9f7 	bl	800057c <main>

0800118e <LoopForever>:

LoopForever:
  b LoopForever
 800118e:	e7fe      	b.n	800118e <LoopForever>
  ldr   r0, =_estack
 8001190:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001194:	20000008 	.word	0x20000008
 8001198:	200001e4 	.word	0x200001e4
 800119c:	08008924 	.word	0x08008924
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80011a0:	20030000 	.word	0x20030000
 80011a4:	20030000 	.word	0x20030000
 80011a8:	08008b00 	.word	0x08008b00
  INIT_BSS _sbss, _ebss
 80011ac:	200001e4 	.word	0x200001e4
 80011b0:	2000414c 	.word	0x2000414c

080011b4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_Init+0x3c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_Init+0x3c>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ce:	2003      	movs	r0, #3
 80011d0:	f000 f94e 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011d4:	2000      	movs	r0, #0
 80011d6:	f000 f80f 	bl	80011f8 <HAL_InitTick>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	71fb      	strb	r3, [r7, #7]
 80011e4:	e001      	b.n	80011ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011e6:	f7ff fe28 	bl	8000e3a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ea:	79fb      	ldrb	r3, [r7, #7]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	58004000 	.word	0x58004000

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_InitTick+0x6c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d024      	beq.n	8001256 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800120c:	f001 fc96 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8001210:	4602      	mov	r2, r0
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_InitTick+0x6c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001220:	fbb2 f3f3 	udiv	r3, r2, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f948 	bl	80014ba <HAL_SYSTICK_Config>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10f      	bne.n	8001250 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b0f      	cmp	r3, #15
 8001234:	d809      	bhi.n	800124a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001236:	2200      	movs	r2, #0
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	f04f 30ff 	mov.w	r0, #4294967295
 800123e:	f000 f922 	bl	8001486 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001242:	4a09      	ldr	r2, [pc, #36]	; (8001268 <HAL_InitTick+0x70>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	e007      	b.n	800125a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	e004      	b.n	800125a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e001      	b.n	800125a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000190 	.word	0x20000190
 8001268:	2000018c 	.word	0x2000018c

0800126c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000190 	.word	0x20000190
 8001290:	20004000 	.word	0x20004000

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20004000 	.word	0x20004000

080012ac <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTickPrio+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	2000018c 	.word	0x2000018c

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffe2 	bl	8001294 <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffd2 	bl	8001294 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000190 	.word	0x20000190

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff47 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff5e 	bl	8001354 <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff90 	bl	80013c4 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5f 	bl	8001370 <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffb2 	bl	800142c <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e2:	e14c      	b.n	800177e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 813e 	beq.w	8001778 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d005      	beq.n	8001514 <HAL_GPIO_Init+0x40>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d130      	bne.n	8001576 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800154a:	2201      	movs	r2, #1
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	f003 0201 	and.w	r2, r3, #1
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b03      	cmp	r3, #3
 8001580:	d017      	beq.n	80015b2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d123      	bne.n	8001606 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	08da      	lsrs	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3208      	adds	r2, #8
 80015c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	691a      	ldr	r2, [r3, #16]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	6939      	ldr	r1, [r7, #16]
 8001602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0203 	and.w	r2, r3, #3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8098 	beq.w	8001778 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001648:	4a54      	ldr	r2, [pc, #336]	; (800179c <HAL_GPIO_Init+0x2c8>)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001672:	d019      	beq.n	80016a8 <HAL_GPIO_Init+0x1d4>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a4a      	ldr	r2, [pc, #296]	; (80017a0 <HAL_GPIO_Init+0x2cc>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d013      	beq.n	80016a4 <HAL_GPIO_Init+0x1d0>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a49      	ldr	r2, [pc, #292]	; (80017a4 <HAL_GPIO_Init+0x2d0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d00d      	beq.n	80016a0 <HAL_GPIO_Init+0x1cc>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a48      	ldr	r2, [pc, #288]	; (80017a8 <HAL_GPIO_Init+0x2d4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d007      	beq.n	800169c <HAL_GPIO_Init+0x1c8>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a47      	ldr	r2, [pc, #284]	; (80017ac <HAL_GPIO_Init+0x2d8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d101      	bne.n	8001698 <HAL_GPIO_Init+0x1c4>
 8001694:	2304      	movs	r3, #4
 8001696:	e008      	b.n	80016aa <HAL_GPIO_Init+0x1d6>
 8001698:	2307      	movs	r3, #7
 800169a:	e006      	b.n	80016aa <HAL_GPIO_Init+0x1d6>
 800169c:	2303      	movs	r3, #3
 800169e:	e004      	b.n	80016aa <HAL_GPIO_Init+0x1d6>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e002      	b.n	80016aa <HAL_GPIO_Init+0x1d6>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <HAL_GPIO_Init+0x1d6>
 80016a8:	2300      	movs	r3, #0
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	f002 0203 	and.w	r2, r2, #3
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	4093      	lsls	r3, r2
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016ba:	4938      	ldr	r1, [pc, #224]	; (800179c <HAL_GPIO_Init+0x2c8>)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3302      	adds	r3, #2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016c8:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ec:	4a30      	ldr	r2, [pc, #192]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016f2:	4b2f      	ldr	r3, [pc, #188]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001716:	4a26      	ldr	r2, [pc, #152]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800171c:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 800171e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001742:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 800174c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001770:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3301      	adds	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	f47f aeab 	bne.w	80014e4 <HAL_GPIO_Init+0x10>
  }
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	371c      	adds	r7, #28
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40010000 	.word	0x40010000
 80017a0:	48000400 	.word	0x48000400
 80017a4:	48000800 	.word	0x48000800
 80017a8:	48000c00 	.word	0x48000c00
 80017ac:	48001000 	.word	0x48001000
 80017b0:	58000800 	.word	0x58000800

080017b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	807b      	strh	r3, [r7, #2]
 80017c0:	4613      	mov	r3, r2
 80017c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0c0      	b.n	8001978 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fb92 	bl	8000f34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2203      	movs	r2, #3
 8001814:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f002 fff1 	bl	8004804 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]
 8001826:	e03e      	b.n	80018a6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	3311      	adds	r3, #17
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3310      	adds	r3, #16
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	3313      	adds	r3, #19
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	3320      	adds	r3, #32
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	3324      	adds	r3, #36	; 0x24
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	3301      	adds	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d3bb      	bcc.n	8001828 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	e044      	b.n	8001940 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	f203 1351 	addw	r3, r3, #337	; 0x151
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	f203 1353 	addw	r3, r3, #339	; 0x153
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	3301      	adds	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	791b      	ldrb	r3, [r3, #4]
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3b5      	bcc.n	80018b6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3304      	adds	r3, #4
 8001952:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001956:	f002 ff70 	bl	800483a <USB_DevInit>

  hpcd->USB_Address = 0U;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7a9b      	ldrb	r3, [r3, #10]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d102      	bne.n	8001976 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f805 	bl	8001980 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	f043 0302 	orr.w	r3, r3, #2
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	58000400 	.word	0x58000400

080019f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <HAL_PWREx_GetVoltageRange+0x18>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	58000400 	.word	0x58000400

08001a10 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a22:	d101      	bne.n	8001a28 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_RCC_HSE_Enable>:
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_RCC_HSE_Disable>:
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_RCC_HSE_IsReady>:
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a82:	d101      	bne.n	8001a88 <LL_RCC_HSE_IsReady+0x18>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <LL_RCC_HSE_IsReady+0x1a>
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_RCC_HSI_Enable>:
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_RCC_HSI_Disable>:
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_RCC_HSI_IsReady>:
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae2:	d101      	bne.n	8001ae8 <LL_RCC_HSI_IsReady+0x18>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <LL_RCC_HSI_IsReady+0x1a>
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	061b      	lsls	r3, r3, #24
 8001b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_RCC_HSI48_Enable>:
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_RCC_HSI48_Disable>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_RCC_HSI48_IsReady>:
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d101      	bne.n	8001b7a <LL_RCC_HSI48_IsReady+0x18>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <LL_RCC_HSI48_IsReady+0x1a>
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <LL_RCC_LSE_Enable>:
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_RCC_LSE_Disable>:
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <LL_RCC_LSE_EnableBypass>:
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_RCC_LSE_DisableBypass>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d101      	bne.n	8001c26 <LL_RCC_LSE_IsReady+0x18>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <LL_RCC_LSE_IsReady+0x1a>
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d101      	bne.n	8001c8e <LL_RCC_LSI1_IsReady+0x18>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <LL_RCC_LSI1_IsReady+0x1a>
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d101      	bne.n	8001cf6 <LL_RCC_LSI2_IsReady+0x18>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <LL_RCC_LSI2_IsReady+0x1a>
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d12:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6013      	str	r3, [r2, #0]
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d101      	bne.n	8001d82 <LL_RCC_MSI_IsReady+0x16>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <LL_RCC_MSI_IsReady+0x18>
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2bb0      	cmp	r3, #176	; 0xb0
 8001dcc:	d901      	bls.n	8001dd2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001dce:	23b0      	movs	r3, #176	; 0xb0
 8001dd0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001dd2:	687b      	ldr	r3, [r7, #4]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 0203 	bic.w	r2, r3, #3
 8001e1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eae:	f023 020f 	bic.w	r2, r3, #15
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	608b      	str	r3, [r1, #8]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb0:	6013      	str	r3, [r2, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fce:	d101      	bne.n	8001fd4 <LL_RCC_PLL_IsReady+0x18>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <LL_RCC_PLL_IsReady+0x1a>
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0303 	and.w	r3, r3, #3
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002054:	d101      	bne.n	800205a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800207a:	d101      	bne.n	8002080 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002094:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a0:	d101      	bne.n	80020a6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80020b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020c4:	d101      	bne.n	80020ca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020e8:	d101      	bne.n	80020ee <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b08d      	sub	sp, #52	; 0x34
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e363      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 808d 	beq.w	8002236 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211c:	f7ff fe89 	bl	8001e32 <LL_RCC_GetSysClkSource>
 8002120:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002122:	f7ff ff82 	bl	800202a <LL_RCC_PLL_GetMainSource>
 8002126:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_RCC_OscConfig+0x3e>
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	2b0c      	cmp	r3, #12
 8002132:	d147      	bne.n	80021c4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	2b01      	cmp	r3, #1
 8002138:	d144      	bne.n	80021c4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e347      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800214a:	f7ff fe34 	bl	8001db6 <LL_RCC_MSI_GetRange>
 800214e:	4603      	mov	r3, r0
 8002150:	429c      	cmp	r4, r3
 8002152:	d914      	bls.n	800217e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fd2f 	bl	8002bbc <RCC_SetFlashLatencyFromMSIRange>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e336      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fe0e 	bl	8001d8e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fe32 	bl	8001de0 <LL_RCC_MSI_SetCalibTrimming>
 800217c:	e013      	b.n	80021a6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fe03 	bl	8001d8e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fe27 	bl	8001de0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	4618      	mov	r0, r3
 8002198:	f000 fd10 	bl	8002bbc <RCC_SetFlashLatencyFromMSIRange>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e317      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021a6:	f000 fcc9 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4aa4      	ldr	r2, [pc, #656]	; (8002440 <HAL_RCC_OscConfig+0x344>)
 80021ae:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021b0:	4ba4      	ldr	r3, [pc, #656]	; (8002444 <HAL_RCC_OscConfig+0x348>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff f81f 	bl	80011f8 <HAL_InitTick>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d039      	beq.n	8002234 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e308      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01e      	beq.n	800220a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021cc:	f7ff fdb0 	bl	8001d30 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021d0:	f7ff f860 	bl	8001294 <HAL_GetTick>
 80021d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d8:	f7ff f85c 	bl	8001294 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e2f5      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80021ea:	f7ff fdbf 	bl	8001d6c <LL_RCC_MSI_IsReady>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f1      	beq.n	80021d8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fdc8 	bl	8001d8e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fdec 	bl	8001de0 <LL_RCC_MSI_SetCalibTrimming>
 8002208:	e015      	b.n	8002236 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800220a:	f7ff fda0 	bl	8001d4e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800220e:	f7ff f841 	bl	8001294 <HAL_GetTick>
 8002212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002216:	f7ff f83d 	bl	8001294 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e2d6      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002228:	f7ff fda0 	bl	8001d6c <LL_RCC_MSI_IsReady>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f1      	bne.n	8002216 <HAL_RCC_OscConfig+0x11a>
 8002232:	e000      	b.n	8002236 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002234:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d047      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002242:	f7ff fdf6 	bl	8001e32 <LL_RCC_GetSysClkSource>
 8002246:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002248:	f7ff feef 	bl	800202a <LL_RCC_PLL_GetMainSource>
 800224c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	2b08      	cmp	r3, #8
 8002252:	d005      	beq.n	8002260 <HAL_RCC_OscConfig+0x164>
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	2b0c      	cmp	r3, #12
 8002258:	d108      	bne.n	800226c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d105      	bne.n	800226c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d134      	bne.n	80022d2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e2b4      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002274:	d102      	bne.n	800227c <HAL_RCC_OscConfig+0x180>
 8002276:	f7ff fbdd 	bl	8001a34 <LL_RCC_HSE_Enable>
 800227a:	e001      	b.n	8002280 <HAL_RCC_OscConfig+0x184>
 800227c:	f7ff fbe9 	bl	8001a52 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d012      	beq.n	80022ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7ff f804 	bl	8001294 <HAL_GetTick>
 800228c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff f800 	bl	8001294 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e299      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80022a2:	f7ff fbe5 	bl	8001a70 <LL_RCC_HSE_IsReady>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f1      	beq.n	8002290 <HAL_RCC_OscConfig+0x194>
 80022ac:	e011      	b.n	80022d2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ae:	f7fe fff1 	bl	8001294 <HAL_GetTick>
 80022b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b6:	f7fe ffed 	bl	8001294 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b64      	cmp	r3, #100	; 0x64
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e286      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80022c8:	f7ff fbd2 	bl	8001a70 <LL_RCC_HSE_IsReady>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f1      	bne.n	80022b6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d04c      	beq.n	8002378 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022de:	f7ff fda8 	bl	8001e32 <LL_RCC_GetSysClkSource>
 80022e2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e4:	f7ff fea1 	bl	800202a <LL_RCC_PLL_GetMainSource>
 80022e8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_OscConfig+0x200>
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	d10e      	bne.n	8002314 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d10b      	bne.n	8002314 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e266      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fbf1 	bl	8001af4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002312:	e031      	b.n	8002378 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d019      	beq.n	8002350 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800231c:	f7ff fbba 	bl	8001a94 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe ffb8 	bl	8001294 <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002328:	f7fe ffb4 	bl	8001294 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e24d      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800233a:	f7ff fbc9 	bl	8001ad0 <LL_RCC_HSI_IsReady>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f1      	beq.n	8002328 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fbd3 	bl	8001af4 <LL_RCC_HSI_SetCalibTrimming>
 800234e:	e013      	b.n	8002378 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002350:	f7ff fbaf 	bl	8001ab2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe ff9e 	bl	8001294 <HAL_GetTick>
 8002358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235c:	f7fe ff9a 	bl	8001294 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e233      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800236e:	f7ff fbaf 	bl	8001ad0 <LL_RCC_HSI_IsReady>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f1      	bne.n	800235c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80a3 	beq.w	80024d8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d076      	beq.n	8002488 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d046      	beq.n	8002434 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80023a6:	f7ff fc66 	bl	8001c76 <LL_RCC_LSI1_IsReady>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d113      	bne.n	80023d8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80023b0:	f7ff fc3f 	bl	8001c32 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023b4:	f7fe ff6e 	bl	8001294 <HAL_GetTick>
 80023b8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023bc:	f7fe ff6a 	bl	8001294 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e203      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80023ce:	f7ff fc52 	bl	8001c76 <LL_RCC_LSI1_IsReady>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f1      	beq.n	80023bc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80023d8:	f7ff fc5f 	bl	8001c9a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe ff5a 	bl	8001294 <HAL_GetTick>
 80023e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80023e4:	f7fe ff56 	bl	8001294 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1ef      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80023f6:	f7ff fc72 	bl	8001cde <LL_RCC_LSI2_IsReady>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f1      	beq.n	80023e4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fc7c 	bl	8001d02 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800240a:	f7ff fc23 	bl	8001c54 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7fe ff41 	bl	8001294 <HAL_GetTick>
 8002412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002416:	f7fe ff3d 	bl	8001294 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e1d6      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002428:	f7ff fc25 	bl	8001c76 <LL_RCC_LSI1_IsReady>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f1      	bne.n	8002416 <HAL_RCC_OscConfig+0x31a>
 8002432:	e051      	b.n	80024d8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002434:	f7ff fbfd 	bl	8001c32 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe ff2c 	bl	8001294 <HAL_GetTick>
 800243c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800243e:	e00c      	b.n	800245a <HAL_RCC_OscConfig+0x35e>
 8002440:	20000188 	.word	0x20000188
 8002444:	2000018c 	.word	0x2000018c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002448:	f7fe ff24 	bl	8001294 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1bd      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800245a:	f7ff fc0c 	bl	8001c76 <LL_RCC_LSI1_IsReady>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f1      	beq.n	8002448 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002464:	f7ff fc2a 	bl	8001cbc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800246a:	f7fe ff13 	bl	8001294 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b03      	cmp	r3, #3
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1ac      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800247c:	f7ff fc2f 	bl	8001cde <LL_RCC_LSI2_IsReady>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f1      	bne.n	800246a <HAL_RCC_OscConfig+0x36e>
 8002486:	e027      	b.n	80024d8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002488:	f7ff fc18 	bl	8001cbc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248c:	f7fe ff02 	bl	8001294 <HAL_GetTick>
 8002490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002494:	f7fe fefe 	bl	8001294 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e197      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80024a6:	f7ff fc1a 	bl	8001cde <LL_RCC_LSI2_IsReady>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f1      	bne.n	8002494 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80024b0:	f7ff fbd0 	bl	8001c54 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b4:	f7fe feee 	bl	8001294 <HAL_GetTick>
 80024b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80024bc:	f7fe feea 	bl	8001294 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e183      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80024ce:	f7ff fbd2 	bl	8001c76 <LL_RCC_LSI1_IsReady>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f1      	bne.n	80024bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d05b      	beq.n	800259c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e4:	4ba7      	ldr	r3, [pc, #668]	; (8002784 <HAL_RCC_OscConfig+0x688>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d114      	bne.n	800251a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80024f0:	f7ff fa70 	bl	80019d4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f4:	f7fe fece 	bl	8001294 <HAL_GetTick>
 80024f8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fc:	f7fe feca 	bl	8001294 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e163      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250e:	4b9d      	ldr	r3, [pc, #628]	; (8002784 <HAL_RCC_OscConfig+0x688>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d102      	bne.n	8002528 <HAL_RCC_OscConfig+0x42c>
 8002522:	f7ff fb30 	bl	8001b86 <LL_RCC_LSE_Enable>
 8002526:	e00c      	b.n	8002542 <HAL_RCC_OscConfig+0x446>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b05      	cmp	r3, #5
 800252e:	d104      	bne.n	800253a <HAL_RCC_OscConfig+0x43e>
 8002530:	f7ff fb4b 	bl	8001bca <LL_RCC_LSE_EnableBypass>
 8002534:	f7ff fb27 	bl	8001b86 <LL_RCC_LSE_Enable>
 8002538:	e003      	b.n	8002542 <HAL_RCC_OscConfig+0x446>
 800253a:	f7ff fb35 	bl	8001ba8 <LL_RCC_LSE_Disable>
 800253e:	f7ff fb55 	bl	8001bec <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d014      	beq.n	8002574 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7fe fea3 	bl	8001294 <HAL_GetTick>
 800254e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7fe fe9f 	bl	8001294 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e136      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002568:	f7ff fb51 	bl	8001c0e <LL_RCC_LSE_IsReady>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0ef      	beq.n	8002552 <HAL_RCC_OscConfig+0x456>
 8002572:	e013      	b.n	800259c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe fe8e 	bl	8001294 <HAL_GetTick>
 8002578:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fe8a 	bl	8001294 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e121      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002592:	f7ff fb3c 	bl	8001c0e <LL_RCC_LSE_IsReady>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ef      	bne.n	800257c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d02c      	beq.n	8002602 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d014      	beq.n	80025da <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025b0:	f7ff fab5 	bl	8001b1e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7fe fe6e 	bl	8001294 <HAL_GetTick>
 80025b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025bc:	f7fe fe6a 	bl	8001294 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e103      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80025ce:	f7ff fac8 	bl	8001b62 <LL_RCC_HSI48_IsReady>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f1      	beq.n	80025bc <HAL_RCC_OscConfig+0x4c0>
 80025d8:	e013      	b.n	8002602 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025da:	f7ff fab1 	bl	8001b40 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025de:	f7fe fe59 	bl	8001294 <HAL_GetTick>
 80025e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025e6:	f7fe fe55 	bl	8001294 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0ee      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80025f8:	f7ff fab3 	bl	8001b62 <LL_RCC_HSI48_IsReady>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f1      	bne.n	80025e6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80e4 	beq.w	80027d4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260c:	f7ff fc11 	bl	8001e32 <LL_RCC_GetSysClkSource>
 8002610:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	2b02      	cmp	r3, #2
 8002620:	f040 80b4 	bne.w	800278c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0203 	and.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	429a      	cmp	r2, r3
 8002630:	d123      	bne.n	800267a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d11c      	bne.n	800267a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d114      	bne.n	800267a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d10d      	bne.n	800267a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d05d      	beq.n	8002736 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b0c      	cmp	r3, #12
 800267e:	d058      	beq.n	8002732 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0a1      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002692:	f7ff fc84 	bl	8001f9e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002696:	f7fe fdfd 	bl	8001294 <HAL_GetTick>
 800269a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe fdf9 	bl	8001294 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e092      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1ef      	bne.n	800269e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	4b30      	ldr	r3, [pc, #192]	; (8002788 <HAL_RCC_OscConfig+0x68c>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026d0:	4311      	orrs	r1, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026d6:	0212      	lsls	r2, r2, #8
 80026d8:	4311      	orrs	r1, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026de:	4311      	orrs	r1, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026e4:	4311      	orrs	r1, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026ea:	430a      	orrs	r2, r1
 80026ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026f4:	f7ff fc44 	bl	8001f80 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002706:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002708:	f7fe fdc4 	bl	8001294 <HAL_GetTick>
 800270c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe fdc0 	bl	8001294 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e059      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ef      	beq.n	8002710 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002730:	e050      	b.n	80027d4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e04f      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d147      	bne.n	80027d4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002744:	f7ff fc1c 	bl	8001f80 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002756:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002758:	f7fe fd9c 	bl	8001294 <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe fd98 	bl	8001294 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e031      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ef      	beq.n	8002760 <HAL_RCC_OscConfig+0x664>
 8002780:	e028      	b.n	80027d4 <HAL_RCC_OscConfig+0x6d8>
 8002782:	bf00      	nop
 8002784:	58000400 	.word	0x58000400
 8002788:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d01e      	beq.n	80027d0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	f7ff fc04 	bl	8001f9e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe fd7d 	bl	8001294 <HAL_GetTick>
 800279a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279e:	f7fe fd79 	bl	8001294 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e012      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1ef      	bne.n	800279e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80027be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_RCC_OscConfig+0x6e4>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	60cb      	str	r3, [r1, #12]
 80027ce:	e001      	b.n	80027d4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3734      	adds	r7, #52	; 0x34
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd90      	pop	{r4, r7, pc}
 80027de:	bf00      	nop
 80027e0:	eefefffc 	.word	0xeefefffc

080027e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e12d      	b.n	8002a54 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b98      	ldr	r3, [pc, #608]	; (8002a5c <HAL_RCC_ClockConfig+0x278>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d91b      	bls.n	800283e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b95      	ldr	r3, [pc, #596]	; (8002a5c <HAL_RCC_ClockConfig+0x278>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	4993      	ldr	r1, [pc, #588]	; (8002a5c <HAL_RCC_ClockConfig+0x278>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002816:	f7fe fd3d 	bl	8001294 <HAL_GetTick>
 800281a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281c:	e008      	b.n	8002830 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800281e:	f7fe fd39 	bl	8001294 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e111      	b.n	8002a54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002830:	4b8a      	ldr	r3, [pc, #552]	; (8002a5c <HAL_RCC_ClockConfig+0x278>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d1ef      	bne.n	800281e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d016      	beq.n	8002878 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fafb 	bl	8001e4a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002854:	f7fe fd1e 	bl	8001294 <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800285c:	f7fe fd1a 	bl	8001294 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e0f2      	b.n	8002a54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800286e:	f7ff fbe8 	bl	8002042 <LL_RCC_IsActiveFlag_HPRE>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f1      	beq.n	800285c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	d016      	beq.n	80028b2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff faf2 	bl	8001e72 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800288e:	f7fe fd01 	bl	8001294 <HAL_GetTick>
 8002892:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002896:	f7fe fcfd 	bl	8001294 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e0d5      	b.n	8002a54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80028a8:	f7ff fbdd 	bl	8002066 <LL_RCC_IsActiveFlag_C2HPRE>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f1      	beq.n	8002896 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d016      	beq.n	80028ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff faeb 	bl	8001e9e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028c8:	f7fe fce4 	bl	8001294 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028d0:	f7fe fce0 	bl	8001294 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e0b8      	b.n	8002a54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80028e2:	f7ff fbd3 	bl	800208c <LL_RCC_IsActiveFlag_SHDHPRE>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f1      	beq.n	80028d0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d016      	beq.n	8002926 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fae5 	bl	8001ecc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002902:	f7fe fcc7 	bl	8001294 <HAL_GetTick>
 8002906:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800290a:	f7fe fcc3 	bl	8001294 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e09b      	b.n	8002a54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800291c:	f7ff fbc9 	bl	80020b2 <LL_RCC_IsActiveFlag_PPRE1>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f1      	beq.n	800290a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d017      	beq.n	8002962 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fadb 	bl	8001ef4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800293e:	f7fe fca9 	bl	8001294 <HAL_GetTick>
 8002942:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002946:	f7fe fca5 	bl	8001294 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e07d      	b.n	8002a54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002958:	f7ff fbbd 	bl	80020d6 <LL_RCC_IsActiveFlag_PPRE2>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f1      	beq.n	8002946 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d043      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d106      	bne.n	8002984 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002976:	f7ff f87b 	bl	8001a70 <LL_RCC_HSE_IsReady>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d11e      	bne.n	80029be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e067      	b.n	8002a54 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d106      	bne.n	800299a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800298c:	f7ff fb16 	bl	8001fbc <LL_RCC_PLL_IsReady>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d113      	bne.n	80029be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e05c      	b.n	8002a54 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80029a2:	f7ff f9e3 	bl	8001d6c <LL_RCC_MSI_IsReady>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d108      	bne.n	80029be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e051      	b.n	8002a54 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80029b0:	f7ff f88e 	bl	8001ad0 <LL_RCC_HSI_IsReady>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e04a      	b.n	8002a54 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fa21 	bl	8001e0a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c8:	f7fe fc64 	bl	8001294 <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	e00a      	b.n	80029e6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d0:	f7fe fc60 	bl	8001294 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	; 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e036      	b.n	8002a54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	f7ff fa24 	bl	8001e32 <LL_RCC_GetSysClkSource>
 80029ea:	4602      	mov	r2, r0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d1ec      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f6:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <HAL_RCC_ClockConfig+0x278>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d21b      	bcs.n	8002a3c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a04:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_RCC_ClockConfig+0x278>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 0207 	bic.w	r2, r3, #7
 8002a0c:	4913      	ldr	r1, [pc, #76]	; (8002a5c <HAL_RCC_ClockConfig+0x278>)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a14:	f7fe fc3e 	bl	8001294 <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a1c:	f7fe fc3a 	bl	8001294 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e012      	b.n	8002a54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_ClockConfig+0x278>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d1ef      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a3c:	f000 f87e 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4a07      	ldr	r2, [pc, #28]	; (8002a60 <HAL_RCC_ClockConfig+0x27c>)
 8002a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002a46:	f7fe fc31 	bl	80012ac <HAL_GetTickPrio>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe fbd3 	bl	80011f8 <HAL_InitTick>
 8002a52:	4603      	mov	r3, r0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	58004000 	.word	0x58004000
 8002a60:	20000188 	.word	0x20000188

08002a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6a:	f7ff f9e2 	bl	8001e32 <LL_RCC_GetSysClkSource>
 8002a6e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a76:	f7ff f99e 	bl	8001db6 <LL_RCC_MSI_GetRange>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	4a2b      	ldr	r2, [pc, #172]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e04b      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d102      	bne.n	8002a98 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a92:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	e045      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d10a      	bne.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a9e:	f7fe ffb7 	bl	8001a10 <LL_RCC_HSE_IsEnabledDiv2>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d102      	bne.n	8002aae <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e03a      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	e037      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002ab4:	f7ff fab9 	bl	800202a <LL_RCC_PLL_GetMainSource>
 8002ab8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d003      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x64>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d003      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0x6a>
 8002ac6:	e00d      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002aca:	60bb      	str	r3, [r7, #8]
        break;
 8002acc:	e015      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002ace:	f7fe ff9f 	bl	8001a10 <LL_RCC_HSE_IsEnabledDiv2>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d102      	bne.n	8002ade <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ada:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002adc:	e00d      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002ade:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ae0:	60bb      	str	r3, [r7, #8]
        break;
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ae4:	f7ff f967 	bl	8001db6 <LL_RCC_MSI_GetRange>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	4a0f      	ldr	r2, [pc, #60]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af6:	60bb      	str	r3, [r7, #8]
        break;
 8002af8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002afa:	f7ff fa71 	bl	8001fe0 <LL_RCC_PLL_GetN>
 8002afe:	4602      	mov	r2, r0
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	fb03 f402 	mul.w	r4, r3, r2
 8002b06:	f7ff fa84 	bl	8002012 <LL_RCC_PLL_GetDivider>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	3301      	adds	r3, #1
 8002b10:	fbb4 f4f3 	udiv	r4, r4, r3
 8002b14:	f7ff fa71 	bl	8001ffa <LL_RCC_PLL_GetR>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	0f5b      	lsrs	r3, r3, #29
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002b22:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002b24:	68fb      	ldr	r3, [r7, #12]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd90      	pop	{r4, r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	08008878 	.word	0x08008878
 8002b34:	00f42400 	.word	0x00f42400
 8002b38:	01e84800 	.word	0x01e84800

08002b3c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b3c:	b598      	push	{r3, r4, r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002b40:	f7ff ff90 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8002b44:	4604      	mov	r4, r0
 8002b46:	f7ff f9e9 	bl	8001f1c <LL_RCC_GetAHBPrescaler>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	4a03      	ldr	r2, [pc, #12]	; (8002b60 <HAL_RCC_GetHCLKFreq+0x24>)
 8002b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b58:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd98      	pop	{r3, r4, r7, pc}
 8002b60:	08008818 	.word	0x08008818

08002b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b64:	b598      	push	{r3, r4, r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b68:	f7ff ffe8 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002b6c:	4604      	mov	r4, r0
 8002b6e:	f7ff f9ef 	bl	8001f50 <LL_RCC_GetAPB1Prescaler>
 8002b72:	4603      	mov	r3, r0
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd98      	pop	{r3, r4, r7, pc}
 8002b8c:	08008858 	.word	0x08008858

08002b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b90:	b598      	push	{r3, r4, r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002b94:	f7ff ffd2 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002b98:	4604      	mov	r4, r0
 8002b9a:	f7ff f9e5 	bl	8001f68 <LL_RCC_GetAPB2Prescaler>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	0adb      	lsrs	r3, r3, #11
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd98      	pop	{r3, r4, r7, pc}
 8002bb8:	08008858 	.word	0x08008858

08002bbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2bb0      	cmp	r3, #176	; 0xb0
 8002bc8:	d903      	bls.n	8002bd2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e007      	b.n	8002be2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002be2:	f7ff f9a7 	bl	8001f34 <LL_RCC_GetAHB4Prescaler>
 8002be6:	4603      	mov	r3, r0
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	0c9c      	lsrs	r4, r3, #18
 8002c06:	f7fe fef5 	bl	80019f4 <HAL_PWREx_GetVoltageRange>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f000 f80c 	bl	8002c2c <RCC_SetFlashLatency>
 8002c14:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd90      	pop	{r4, r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	08008878 	.word	0x08008878
 8002c24:	08008818 	.word	0x08008818
 8002c28:	431bde83 	.word	0x431bde83

08002c2c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b093      	sub	sp, #76	; 0x4c
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002c36:	4b37      	ldr	r3, [pc, #220]	; (8002d14 <RCC_SetFlashLatency+0xe8>)
 8002c38:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002c3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002c42:	4a35      	ldr	r2, [pc, #212]	; (8002d18 <RCC_SetFlashLatency+0xec>)
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002c4e:	4b33      	ldr	r3, [pc, #204]	; (8002d1c <RCC_SetFlashLatency+0xf0>)
 8002c50:	f107 040c 	add.w	r4, r7, #12
 8002c54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c64:	d11a      	bne.n	8002c9c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	643b      	str	r3, [r7, #64]	; 0x40
 8002c6a:	e013      	b.n	8002c94 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	3348      	adds	r3, #72	; 0x48
 8002c72:	443b      	add	r3, r7
 8002c74:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d807      	bhi.n	8002c8e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	3348      	adds	r3, #72	; 0x48
 8002c84:	443b      	add	r3, r7
 8002c86:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c8a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c8c:	e020      	b.n	8002cd0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c90:	3301      	adds	r3, #1
 8002c92:	643b      	str	r3, [r7, #64]	; 0x40
 8002c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d9e8      	bls.n	8002c6c <RCC_SetFlashLatency+0x40>
 8002c9a:	e019      	b.n	8002cd0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ca0:	e013      	b.n	8002cca <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	3348      	adds	r3, #72	; 0x48
 8002ca8:	443b      	add	r3, r7
 8002caa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d807      	bhi.n	8002cc4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	3348      	adds	r3, #72	; 0x48
 8002cba:	443b      	add	r3, r7
 8002cbc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002cc0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002cc2:	e005      	b.n	8002cd0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d9e8      	bls.n	8002ca2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002cd0:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <RCC_SetFlashLatency+0xf4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 0207 	bic.w	r2, r3, #7
 8002cd8:	4911      	ldr	r1, [pc, #68]	; (8002d20 <RCC_SetFlashLatency+0xf4>)
 8002cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ce0:	f7fe fad8 	bl	8001294 <HAL_GetTick>
 8002ce4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ce6:	e008      	b.n	8002cfa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ce8:	f7fe fad4 	bl	8001294 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e007      	b.n	8002d0a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <RCC_SetFlashLatency+0xf4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1ef      	bne.n	8002ce8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	374c      	adds	r7, #76	; 0x4c
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd90      	pop	{r4, r7, pc}
 8002d12:	bf00      	nop
 8002d14:	0800525c 	.word	0x0800525c
 8002d18:	0800526c 	.word	0x0800526c
 8002d1c:	08005278 	.word	0x08005278
 8002d20:	58004000 	.word	0x58004000

08002d24 <LL_RCC_LSE_IsEnabled>:
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <LL_RCC_LSE_IsEnabled+0x18>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <LL_RCC_LSE_IsEnabled+0x1a>
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_RCC_LSE_IsReady>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d101      	bne.n	8002d60 <LL_RCC_LSE_IsReady+0x18>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <LL_RCC_LSE_IsReady+0x1a>
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_RCC_MSI_EnablePLLMode>:
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d7a:	f043 0304 	orr.w	r3, r3, #4
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_RCC_SetRFWKPClockSource>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <LL_RCC_SetSMPSClockSource>:
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f023 0203 	bic.w	r2, r3, #3
 8002dc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_RCC_SetSMPSPrescaler>:
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_RCC_SetUSARTClockSource>:
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <LL_RCC_SetLPUARTClockSource>:
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_RCC_SetI2CClockSource>:
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e76:	43db      	mvns	r3, r3
 8002e78:	401a      	ands	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_RCC_SetLPTIMClockSource>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0c1b      	lsrs	r3, r3, #16
 8002eac:	041b      	lsls	r3, r3, #16
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	041b      	lsls	r3, r3, #16
 8002eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_RCC_SetSAIClockSource>:
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002edc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ee0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_RCC_SetRNGClockSource>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <LL_RCC_SetCLK48ClockSource>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_RCC_SetUSBClockSource>:
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ffe3 	bl	8002f24 <LL_RCC_SetCLK48ClockSource>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <LL_RCC_SetADCClockSource>:
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <LL_RCC_SetRTCClockSource>:
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <LL_RCC_GetRTCClockSource>:
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_RCC_ForceBackupDomainReset>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800300a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_RCC_PLLSAI1_Enable>:
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800302a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800302e:	6013      	str	r3, [r2, #0]
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_RCC_PLLSAI1_Disable>:
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800303e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003048:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800304c:	6013      	str	r3, [r2, #0]
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <LL_RCC_PLLSAI1_IsReady>:
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800305c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800306a:	d101      	bne.n	8003070 <LL_RCC_PLLSAI1_IsReady+0x18>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003084:	2300      	movs	r3, #0
 8003086:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003088:	2300      	movs	r3, #0
 800308a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d034      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030a0:	d021      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80030a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030a6:	d81b      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030ac:	d01d      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80030ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030b2:	d815      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80030b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030bc:	d110      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80030be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030cc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80030ce:	e00d      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f94d 	bl	8003374 <RCCEx_PLLSAI1_ConfigNP>
 80030da:	4603      	mov	r3, r0
 80030dc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030de:	e005      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	77fb      	strb	r3, [r7, #31]
        break;
 80030e4:	e002      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80030e6:	bf00      	nop
 80030e8:	e000      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80030ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ec:	7ffb      	ldrb	r3, [r7, #31]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d105      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fee8 	bl	8002ecc <LL_RCC_SetSAIClockSource>
 80030fc:	e001      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fe:	7ffb      	ldrb	r3, [r7, #31]
 8003100:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310a:	2b00      	cmp	r3, #0
 800310c:	d046      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800310e:	f7ff ff56 	bl	8002fbe <LL_RCC_GetRTCClockSource>
 8003112:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	429a      	cmp	r2, r3
 800311c:	d03c      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800311e:	f7fe fc59 	bl	80019d4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff30 	bl	8002f92 <LL_RCC_SetRTCClockSource>
 8003132:	e02e      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800313e:	f7ff ff4b 	bl	8002fd8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003142:	f7ff ff5a 	bl	8002ffa <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800315e:	f7ff fde1 	bl	8002d24 <LL_RCC_LSE_IsEnabled>
 8003162:	4603      	mov	r3, r0
 8003164:	2b01      	cmp	r3, #1
 8003166:	d114      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003168:	f7fe f894 	bl	8001294 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800316e:	e00b      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f7fe f890 	bl	8001294 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d902      	bls.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	77fb      	strb	r3, [r7, #31]
              break;
 8003186:	e004      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003188:	f7ff fdde 	bl	8002d48 <LL_RCC_LSE_IsReady>
 800318c:	4603      	mov	r3, r0
 800318e:	2b01      	cmp	r3, #1
 8003190:	d1ee      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003192:	7ffb      	ldrb	r3, [r7, #31]
 8003194:	77bb      	strb	r3, [r7, #30]
 8003196:	e001      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	7ffb      	ldrb	r3, [r7, #31]
 800319a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d004      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fe2a 	bl	8002e06 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fe35 	bl	8002e32 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fe5d 	bl	8002e98 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d004      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fe52 	bl	8002e98 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d004      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fe2a 	bl	8002e5e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fe1f 	bl	8002e5e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d022      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fe8d 	bl	8002f50 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800323e:	d107      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800324a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800324e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003254:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003258:	d10b      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3304      	adds	r3, #4
 800325e:	4618      	mov	r0, r3
 8003260:	f000 f8e3 	bl	800342a <RCCEx_PLLSAI1_ConfigNQ>
 8003264:	4603      	mov	r3, r0
 8003266:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003268:	7ffb      	ldrb	r3, [r7, #31]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800326e:	7ffb      	ldrb	r3, [r7, #31]
 8003270:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327a:	2b00      	cmp	r3, #0
 800327c:	d02b      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003286:	d008      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003290:	d003      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fe2a 	bl	8002ef8 <LL_RCC_SetRNGClockSource>
 80032a4:	e00a      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x240>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7ff fe21 	bl	8002ef8 <LL_RCC_SetRNGClockSource>
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f7ff fe34 	bl	8002f24 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80032c4:	d107      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80032c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d022      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fe3d 	bl	8002f66 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f4:	d107      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003304:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800330e:	d10b      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3304      	adds	r3, #4
 8003314:	4618      	mov	r0, r3
 8003316:	f000 f8e3 	bl	80034e0 <RCCEx_PLLSAI1_ConfigNR>
 800331a:	4603      	mov	r3, r0
 800331c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003324:	7ffb      	ldrb	r3, [r7, #31]
 8003326:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fd26 	bl	8002d8a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fd45 	bl	8002dde <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fd2c 	bl	8002db6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800335e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3720      	adds	r7, #32
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800336c:	f7ff fcfe 	bl	8002d6c <LL_RCC_MSI_EnablePLLMode>
}
 8003370:	bf00      	nop
 8003372:	bd80      	pop	{r7, pc}

08003374 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003380:	f7ff fe5b 	bl	800303a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003384:	f7fd ff86 	bl	8001294 <HAL_GetTick>
 8003388:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800338a:	e009      	b.n	80033a0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800338c:	f7fd ff82 	bl	8001294 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d902      	bls.n	80033a0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	73fb      	strb	r3, [r7, #15]
      break;
 800339e:	e004      	b.n	80033aa <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033a0:	f7ff fe5a 	bl	8003058 <LL_RCC_PLLSAI1_IsReady>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d137      	bne.n	8003420 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80033b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c4:	4313      	orrs	r3, r2
 80033c6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80033c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033da:	4313      	orrs	r3, r2
 80033dc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80033de:	f7ff fe1d 	bl	800301c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e2:	f7fd ff57 	bl	8001294 <HAL_GetTick>
 80033e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033e8:	e009      	b.n	80033fe <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033ea:	f7fd ff53 	bl	8001294 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d902      	bls.n	80033fe <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	73fb      	strb	r3, [r7, #15]
        break;
 80033fc:	e004      	b.n	8003408 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033fe:	f7ff fe2b 	bl	8003058 <LL_RCC_PLLSAI1_IsReady>
 8003402:	4603      	mov	r3, r0
 8003404:	2b01      	cmp	r3, #1
 8003406:	d1f0      	bne.n	80033ea <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d108      	bne.n	8003420 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800340e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341c:	4313      	orrs	r3, r2
 800341e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003436:	f7ff fe00 	bl	800303a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800343a:	f7fd ff2b 	bl	8001294 <HAL_GetTick>
 800343e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003440:	e009      	b.n	8003456 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003442:	f7fd ff27 	bl	8001294 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d902      	bls.n	8003456 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	73fb      	strb	r3, [r7, #15]
      break;
 8003454:	e004      	b.n	8003460 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003456:	f7ff fdff 	bl	8003058 <LL_RCC_PLLSAI1_IsReady>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f0      	bne.n	8003442 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d137      	bne.n	80034d6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800347a:	4313      	orrs	r3, r2
 800347c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800347e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003490:	4313      	orrs	r3, r2
 8003492:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003494:	f7ff fdc2 	bl	800301c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003498:	f7fd fefc 	bl	8001294 <HAL_GetTick>
 800349c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800349e:	e009      	b.n	80034b4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034a0:	f7fd fef8 	bl	8001294 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d902      	bls.n	80034b4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	73fb      	strb	r3, [r7, #15]
        break;
 80034b2:	e004      	b.n	80034be <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034b4:	f7ff fdd0 	bl	8003058 <LL_RCC_PLLSAI1_IsReady>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d1f0      	bne.n	80034a0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d108      	bne.n	80034d6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80034c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d2:	4313      	orrs	r3, r2
 80034d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034ec:	f7ff fda5 	bl	800303a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034f0:	f7fd fed0 	bl	8001294 <HAL_GetTick>
 80034f4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034f6:	e009      	b.n	800350c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034f8:	f7fd fecc 	bl	8001294 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d902      	bls.n	800350c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	73fb      	strb	r3, [r7, #15]
      break;
 800350a:	e004      	b.n	8003516 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800350c:	f7ff fda4 	bl	8003058 <LL_RCC_PLLSAI1_IsReady>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d137      	bne.n	800358c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800351c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003530:	4313      	orrs	r3, r2
 8003532:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003546:	4313      	orrs	r3, r2
 8003548:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800354a:	f7ff fd67 	bl	800301c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800354e:	f7fd fea1 	bl	8001294 <HAL_GetTick>
 8003552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003554:	e009      	b.n	800356a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003556:	f7fd fe9d 	bl	8001294 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d902      	bls.n	800356a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	73fb      	strb	r3, [r7, #15]
        break;
 8003568:	e004      	b.n	8003574 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800356a:	f7ff fd75 	bl	8003058 <LL_RCC_PLLSAI1_IsReady>
 800356e:	4603      	mov	r3, r0
 8003570:	2b01      	cmp	r3, #1
 8003572:	d1f0      	bne.n	8003556 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d108      	bne.n	800358c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800357a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003588:	4313      	orrs	r3, r2
 800358a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e095      	b.n	80036d4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b8:	d009      	beq.n	80035ce <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	61da      	str	r2, [r3, #28]
 80035c0:	e005      	b.n	80035ce <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d106      	bne.n	80035ee <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7fd fc2d 	bl	8000e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003604:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800360e:	d902      	bls.n	8003616 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	e002      	b.n	800361c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800361a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003624:	d007      	beq.n	8003636 <HAL_SPI_Init+0xa0>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800362e:	d002      	beq.n	8003636 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003678:	ea42 0103 	orr.w	r1, r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	f003 0204 	and.w	r2, r3, #4
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80036b2:	ea42 0103 	orr.w	r1, r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_SPI_Transmit+0x22>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e15f      	b.n	80039be <HAL_SPI_Transmit+0x2e2>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003706:	f7fd fdc5 	bl	8001294 <HAL_GetTick>
 800370a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d002      	beq.n	8003722 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800371c:	2302      	movs	r3, #2
 800371e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003720:	e148      	b.n	80039b4 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_SPI_Transmit+0x52>
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003732:	e13f      	b.n	80039b4 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2203      	movs	r2, #3
 8003738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	88fa      	ldrh	r2, [r7, #6]
 8003752:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800377e:	d10f      	bne.n	80037a0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800379e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d007      	beq.n	80037be <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037c6:	d94f      	bls.n	8003868 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <HAL_SPI_Transmit+0xfa>
 80037d0:	8afb      	ldrh	r3, [r7, #22]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d142      	bne.n	800385c <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	881a      	ldrh	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	1c9a      	adds	r2, r3, #2
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037fa:	e02f      	b.n	800385c <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b02      	cmp	r3, #2
 8003808:	d112      	bne.n	8003830 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	881a      	ldrh	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	1c9a      	adds	r2, r3, #2
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800382e:	e015      	b.n	800385c <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003830:	f7fd fd30 	bl	8001294 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d803      	bhi.n	8003848 <HAL_SPI_Transmit+0x16c>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d102      	bne.n	800384e <HAL_SPI_Transmit+0x172>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800385a:	e0ab      	b.n	80039b4 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1ca      	bne.n	80037fc <HAL_SPI_Transmit+0x120>
 8003866:	e080      	b.n	800396a <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_SPI_Transmit+0x19a>
 8003870:	8afb      	ldrh	r3, [r7, #22]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d174      	bne.n	8003960 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d912      	bls.n	80038a6 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	881a      	ldrh	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	1c9a      	adds	r2, r3, #2
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b02      	subs	r3, #2
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038a4:	e05c      	b.n	8003960 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	7812      	ldrb	r2, [r2, #0]
 80038b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80038cc:	e048      	b.n	8003960 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d12b      	bne.n	8003934 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d912      	bls.n	800390c <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	881a      	ldrh	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	1c9a      	adds	r2, r3, #2
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b02      	subs	r3, #2
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	87da      	strh	r2, [r3, #62]	; 0x3e
 800390a:	e029      	b.n	8003960 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	330c      	adds	r3, #12
 8003916:	7812      	ldrb	r2, [r2, #0]
 8003918:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003932:	e015      	b.n	8003960 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003934:	f7fd fcae 	bl	8001294 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d803      	bhi.n	800394c <HAL_SPI_Transmit+0x270>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	d102      	bne.n	8003952 <HAL_SPI_Transmit+0x276>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800395e:	e029      	b.n	80039b4 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1b1      	bne.n	80038ce <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	6839      	ldr	r1, [r7, #0]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f948 	bl	8003c04 <SPI_EndRxTxTransaction>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003988:	2300      	movs	r3, #0
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e003      	b.n	80039b4 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	4613      	mov	r3, r2
 80039d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039d8:	f7fd fc5c 	bl	8001294 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039e8:	f7fd fc54 	bl	8001294 <HAL_GetTick>
 80039ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	015b      	lsls	r3, r3, #5
 80039f4:	0d1b      	lsrs	r3, r3, #20
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039fe:	e054      	b.n	8003aaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d050      	beq.n	8003aaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a08:	f7fd fc44 	bl	8001294 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d902      	bls.n	8003a1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d13d      	bne.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a36:	d111      	bne.n	8003a5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a40:	d004      	beq.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4a:	d107      	bne.n	8003a5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a64:	d10f      	bne.n	8003a86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e017      	b.n	8003aca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d19b      	bne.n	8003a00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000188 	.word	0x20000188

08003ad8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	; 0x28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003aea:	f7fd fbd3 	bl	8001294 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	4413      	add	r3, r2
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003afa:	f7fd fbcb 	bl	8001294 <HAL_GetTick>
 8003afe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	330c      	adds	r3, #12
 8003b06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b08:	4b3d      	ldr	r3, [pc, #244]	; (8003c00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00da      	lsls	r2, r3, #3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	0d1b      	lsrs	r3, r3, #20
 8003b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b20:	e060      	b.n	8003be4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b28:	d107      	bne.n	8003b3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d050      	beq.n	8003be4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b42:	f7fd fba7 	bl	8001294 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d902      	bls.n	8003b58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d13d      	bne.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b70:	d111      	bne.n	8003b96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7a:	d004      	beq.n	8003b86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b84:	d107      	bne.n	8003b96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9e:	d10f      	bne.n	8003bc0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e010      	b.n	8003bf6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4013      	ands	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d196      	bne.n	8003b22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3728      	adds	r7, #40	; 0x28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000188 	.word	0x20000188

08003c04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff ff5b 	bl	8003ad8 <SPI_WaitFifoStateUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d007      	beq.n	8003c38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2c:	f043 0220 	orr.w	r2, r3, #32
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e027      	b.n	8003c88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2180      	movs	r1, #128	; 0x80
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7ff fec0 	bl	80039c8 <SPI_WaitFlagStateUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c52:	f043 0220 	orr.w	r2, r3, #32
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e014      	b.n	8003c88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff ff34 	bl	8003ad8 <SPI_WaitFifoStateUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7a:	f043 0220 	orr.w	r2, r3, #32
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e000      	b.n	8003c88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <LL_RCC_GetUSARTClockSource>:
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4013      	ands	r3, r2
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_RCC_GetLPUARTClockSource>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4013      	ands	r3, r2
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e042      	b.n	8003d68 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d106      	bne.n	8003cfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7fd f8d7 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2224      	movs	r2, #36	; 0x24
 8003cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0201 	bic.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fa50 	bl	80041c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f825 	bl	8003d70 <UART_SetConfig>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e01b      	b.n	8003d68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 facf 	bl	8004304 <UART_CheckIdleState>
 8003d66:	4603      	mov	r3, r0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d74:	b08c      	sub	sp, #48	; 0x30
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4baf      	ldr	r3, [pc, #700]	; (800405c <UART_SetConfig+0x2ec>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4aa4      	ldr	r2, [pc, #656]	; (8004060 <UART_SetConfig+0x2f0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003de6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	f023 010f 	bic.w	r1, r3, #15
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a95      	ldr	r2, [pc, #596]	; (8004064 <UART_SetConfig+0x2f4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d125      	bne.n	8003e60 <UART_SetConfig+0xf0>
 8003e14:	2003      	movs	r0, #3
 8003e16:	f7ff ff3b 	bl	8003c90 <LL_RCC_GetUSARTClockSource>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d81b      	bhi.n	8003e58 <UART_SetConfig+0xe8>
 8003e20:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <UART_SetConfig+0xb8>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e39 	.word	0x08003e39
 8003e2c:	08003e49 	.word	0x08003e49
 8003e30:	08003e41 	.word	0x08003e41
 8003e34:	08003e51 	.word	0x08003e51
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e3e:	e042      	b.n	8003ec6 <UART_SetConfig+0x156>
 8003e40:	2302      	movs	r3, #2
 8003e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e46:	e03e      	b.n	8003ec6 <UART_SetConfig+0x156>
 8003e48:	2304      	movs	r3, #4
 8003e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e4e:	e03a      	b.n	8003ec6 <UART_SetConfig+0x156>
 8003e50:	2308      	movs	r3, #8
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e56:	e036      	b.n	8003ec6 <UART_SetConfig+0x156>
 8003e58:	2310      	movs	r3, #16
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e5e:	e032      	b.n	8003ec6 <UART_SetConfig+0x156>
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a7e      	ldr	r2, [pc, #504]	; (8004060 <UART_SetConfig+0x2f0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d12a      	bne.n	8003ec0 <UART_SetConfig+0x150>
 8003e6a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003e6e:	f7ff ff1f 	bl	8003cb0 <LL_RCC_GetLPUARTClockSource>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e78:	d01a      	beq.n	8003eb0 <UART_SetConfig+0x140>
 8003e7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e7e:	d81b      	bhi.n	8003eb8 <UART_SetConfig+0x148>
 8003e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e84:	d00c      	beq.n	8003ea0 <UART_SetConfig+0x130>
 8003e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8a:	d815      	bhi.n	8003eb8 <UART_SetConfig+0x148>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <UART_SetConfig+0x128>
 8003e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e94:	d008      	beq.n	8003ea8 <UART_SetConfig+0x138>
 8003e96:	e00f      	b.n	8003eb8 <UART_SetConfig+0x148>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e9e:	e012      	b.n	8003ec6 <UART_SetConfig+0x156>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ea6:	e00e      	b.n	8003ec6 <UART_SetConfig+0x156>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eae:	e00a      	b.n	8003ec6 <UART_SetConfig+0x156>
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb6:	e006      	b.n	8003ec6 <UART_SetConfig+0x156>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ebe:	e002      	b.n	8003ec6 <UART_SetConfig+0x156>
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a65      	ldr	r2, [pc, #404]	; (8004060 <UART_SetConfig+0x2f0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	f040 8097 	bne.w	8004000 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ed2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d823      	bhi.n	8003f22 <UART_SetConfig+0x1b2>
 8003eda:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <UART_SetConfig+0x170>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003f05 	.word	0x08003f05
 8003ee4:	08003f23 	.word	0x08003f23
 8003ee8:	08003f0d 	.word	0x08003f0d
 8003eec:	08003f23 	.word	0x08003f23
 8003ef0:	08003f13 	.word	0x08003f13
 8003ef4:	08003f23 	.word	0x08003f23
 8003ef8:	08003f23 	.word	0x08003f23
 8003efc:	08003f23 	.word	0x08003f23
 8003f00:	08003f1b 	.word	0x08003f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f04:	f7fe fe2e 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 8003f08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f0a:	e010      	b.n	8003f2e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f0c:	4b56      	ldr	r3, [pc, #344]	; (8004068 <UART_SetConfig+0x2f8>)
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f10:	e00d      	b.n	8003f2e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f12:	f7fe fda7 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8003f16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f18:	e009      	b.n	8003f2e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f20:	e005      	b.n	8003f2e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 812b 	beq.w	800418c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	4a4c      	ldr	r2, [pc, #304]	; (800406c <UART_SetConfig+0x2fc>)
 8003f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f40:	461a      	mov	r2, r3
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d305      	bcc.n	8003f66 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d903      	bls.n	8003f6e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f6c:	e10e      	b.n	800418c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	2200      	movs	r2, #0
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	60fa      	str	r2, [r7, #12]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	4a3c      	ldr	r2, [pc, #240]	; (800406c <UART_SetConfig+0x2fc>)
 8003f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2200      	movs	r2, #0
 8003f84:	603b      	str	r3, [r7, #0]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f90:	f7fc f946 	bl	8000220 <__aeabi_uldivmod>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4610      	mov	r0, r2
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	020b      	lsls	r3, r1, #8
 8003fa6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003faa:	0202      	lsls	r2, r0, #8
 8003fac:	6979      	ldr	r1, [r7, #20]
 8003fae:	6849      	ldr	r1, [r1, #4]
 8003fb0:	0849      	lsrs	r1, r1, #1
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	460c      	mov	r4, r1
 8003fb6:	4605      	mov	r5, r0
 8003fb8:	eb12 0804 	adds.w	r8, r2, r4
 8003fbc:	eb43 0905 	adc.w	r9, r3, r5
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	469a      	mov	sl, r3
 8003fc8:	4693      	mov	fp, r2
 8003fca:	4652      	mov	r2, sl
 8003fcc:	465b      	mov	r3, fp
 8003fce:	4640      	mov	r0, r8
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	f7fc f925 	bl	8000220 <__aeabi_uldivmod>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4613      	mov	r3, r2
 8003fdc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe4:	d308      	bcc.n	8003ff8 <UART_SetConfig+0x288>
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fec:	d204      	bcs.n	8003ff8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a3a      	ldr	r2, [r7, #32]
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	e0c9      	b.n	800418c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ffe:	e0c5      	b.n	800418c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004008:	d16d      	bne.n	80040e6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800400a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800400e:	3b01      	subs	r3, #1
 8004010:	2b07      	cmp	r3, #7
 8004012:	d82d      	bhi.n	8004070 <UART_SetConfig+0x300>
 8004014:	a201      	add	r2, pc, #4	; (adr r2, 800401c <UART_SetConfig+0x2ac>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	0800403d 	.word	0x0800403d
 8004020:	08004045 	.word	0x08004045
 8004024:	08004071 	.word	0x08004071
 8004028:	0800404b 	.word	0x0800404b
 800402c:	08004071 	.word	0x08004071
 8004030:	08004071 	.word	0x08004071
 8004034:	08004071 	.word	0x08004071
 8004038:	08004053 	.word	0x08004053
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800403c:	f7fe fda8 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8004040:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004042:	e01b      	b.n	800407c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004044:	4b08      	ldr	r3, [pc, #32]	; (8004068 <UART_SetConfig+0x2f8>)
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004048:	e018      	b.n	800407c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404a:	f7fe fd0b 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 800404e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004050:	e014      	b.n	800407c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004058:	e010      	b.n	800407c <UART_SetConfig+0x30c>
 800405a:	bf00      	nop
 800405c:	cfff69f3 	.word	0xcfff69f3
 8004060:	40008000 	.word	0x40008000
 8004064:	40013800 	.word	0x40013800
 8004068:	00f42400 	.word	0x00f42400
 800406c:	080088b8 	.word	0x080088b8
      default:
        pclk = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800407a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8084 	beq.w	800418c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	4a4b      	ldr	r2, [pc, #300]	; (80041b8 <UART_SetConfig+0x448>)
 800408a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800408e:	461a      	mov	r2, r3
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	fbb3 f3f2 	udiv	r3, r3, r2
 8004096:	005a      	lsls	r2, r3, #1
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	441a      	add	r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	2b0f      	cmp	r3, #15
 80040ae:	d916      	bls.n	80040de <UART_SetConfig+0x36e>
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b6:	d212      	bcs.n	80040de <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f023 030f 	bic.w	r3, r3, #15
 80040c0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	8bfb      	ldrh	r3, [r7, #30]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	8bfa      	ldrh	r2, [r7, #30]
 80040da:	60da      	str	r2, [r3, #12]
 80040dc:	e056      	b.n	800418c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040e4:	e052      	b.n	800418c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040ea:	3b01      	subs	r3, #1
 80040ec:	2b07      	cmp	r3, #7
 80040ee:	d822      	bhi.n	8004136 <UART_SetConfig+0x3c6>
 80040f0:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <UART_SetConfig+0x388>)
 80040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f6:	bf00      	nop
 80040f8:	08004119 	.word	0x08004119
 80040fc:	08004121 	.word	0x08004121
 8004100:	08004137 	.word	0x08004137
 8004104:	08004127 	.word	0x08004127
 8004108:	08004137 	.word	0x08004137
 800410c:	08004137 	.word	0x08004137
 8004110:	08004137 	.word	0x08004137
 8004114:	0800412f 	.word	0x0800412f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004118:	f7fe fd3a 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 800411c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800411e:	e010      	b.n	8004142 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004120:	4b26      	ldr	r3, [pc, #152]	; (80041bc <UART_SetConfig+0x44c>)
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004124:	e00d      	b.n	8004142 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004126:	f7fe fc9d 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 800412a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800412c:	e009      	b.n	8004142 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004134:	e005      	b.n	8004142 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004140:	bf00      	nop
    }

    if (pclk != 0U)
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	d021      	beq.n	800418c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	4a1a      	ldr	r2, [pc, #104]	; (80041b8 <UART_SetConfig+0x448>)
 800414e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004152:	461a      	mov	r2, r3
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	fbb3 f2f2 	udiv	r2, r3, r2
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	085b      	lsrs	r3, r3, #1
 8004160:	441a      	add	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	fbb2 f3f3 	udiv	r3, r2, r3
 800416a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	2b0f      	cmp	r3, #15
 8004170:	d909      	bls.n	8004186 <UART_SetConfig+0x416>
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004178:	d205      	bcs.n	8004186 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	b29a      	uxth	r2, r3
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60da      	str	r2, [r3, #12]
 8004184:	e002      	b.n	800418c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2201      	movs	r2, #1
 8004190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2201      	movs	r2, #1
 8004198:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2200      	movs	r2, #0
 80041a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80041a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3730      	adds	r7, #48	; 0x30
 80041b0:	46bd      	mov	sp, r7
 80041b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b6:	bf00      	nop
 80041b8:	080088b8 	.word	0x080088b8
 80041bc:	00f42400 	.word	0x00f42400

080041c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01a      	beq.n	80042d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042be:	d10a      	bne.n	80042d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
  }
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b098      	sub	sp, #96	; 0x60
 8004308:	af02      	add	r7, sp, #8
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004314:	f7fc ffbe 	bl	8001294 <HAL_GetTick>
 8004318:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b08      	cmp	r3, #8
 8004326:	d12f      	bne.n	8004388 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004330:	2200      	movs	r2, #0
 8004332:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f88e 	bl	8004458 <UART_WaitOnFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d022      	beq.n	8004388 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	e853 3f00 	ldrex	r3, [r3]
 800434e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004356:	653b      	str	r3, [r7, #80]	; 0x50
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004360:	647b      	str	r3, [r7, #68]	; 0x44
 8004362:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004368:	e841 2300 	strex	r3, r2, [r1]
 800436c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800436e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e6      	bne.n	8004342 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e063      	b.n	8004450 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b04      	cmp	r3, #4
 8004394:	d149      	bne.n	800442a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004396:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800439e:	2200      	movs	r2, #0
 80043a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f857 	bl	8004458 <UART_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d03c      	beq.n	800442a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	623b      	str	r3, [r7, #32]
   return(result);
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ce:	633b      	str	r3, [r7, #48]	; 0x30
 80043d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d6:	e841 2300 	strex	r3, r2, [r1]
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e6      	bne.n	80043b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3308      	adds	r3, #8
 80043e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f023 0301 	bic.w	r3, r3, #1
 80043f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3308      	adds	r3, #8
 8004400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004402:	61fa      	str	r2, [r7, #28]
 8004404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	69b9      	ldr	r1, [r7, #24]
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	617b      	str	r3, [r7, #20]
   return(result);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e5      	bne.n	80043e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e012      	b.n	8004450 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3758      	adds	r7, #88	; 0x58
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004468:	e04f      	b.n	800450a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d04b      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004472:	f7fc ff0f 	bl	8001294 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	429a      	cmp	r2, r3
 8004480:	d302      	bcc.n	8004488 <UART_WaitOnFlagUntilTimeout+0x30>
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e04e      	b.n	800452a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d037      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0xb2>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b80      	cmp	r3, #128	; 0x80
 800449e:	d034      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0xb2>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d031      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d110      	bne.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2208      	movs	r2, #8
 80044ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f838 	bl	8004532 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2208      	movs	r2, #8
 80044c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e029      	b.n	800452a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e4:	d111      	bne.n	800450a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f81e 	bl	8004532 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e00f      	b.n	800452a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	429a      	cmp	r2, r3
 8004526:	d0a0      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004532:	b480      	push	{r7}
 8004534:	b095      	sub	sp, #84	; 0x54
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800454e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004558:	643b      	str	r3, [r7, #64]	; 0x40
 800455a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800455e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e6      	bne.n	800453a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3308      	adds	r3, #8
 8004572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	61fb      	str	r3, [r7, #28]
   return(result);
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	64bb      	str	r3, [r7, #72]	; 0x48
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3308      	adds	r3, #8
 800458e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004590:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e3      	bne.n	800456c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d118      	bne.n	80045de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f023 0310 	bic.w	r3, r3, #16
 80045c0:	647b      	str	r3, [r7, #68]	; 0x44
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	6979      	ldr	r1, [r7, #20]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	613b      	str	r3, [r7, #16]
   return(result);
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e6      	bne.n	80045ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80045f2:	bf00      	nop
 80045f4:	3754      	adds	r7, #84	; 0x54
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80045fe:	b480      	push	{r7}
 8004600:	b085      	sub	sp, #20
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_UARTEx_DisableFifoMode+0x16>
 8004610:	2302      	movs	r3, #2
 8004612:	e027      	b.n	8004664 <HAL_UARTEx_DisableFifoMode+0x66>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2224      	movs	r2, #36	; 0x24
 8004620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0201 	bic.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004642:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004684:	2302      	movs	r3, #2
 8004686:	e02d      	b.n	80046e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2224      	movs	r2, #36	; 0x24
 8004694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f84f 	bl	8004768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004700:	2302      	movs	r3, #2
 8004702:	e02d      	b.n	8004760 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2224      	movs	r2, #36	; 0x24
 8004710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f811 	bl	8004768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004774:	2b00      	cmp	r3, #0
 8004776:	d108      	bne.n	800478a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004788:	e031      	b.n	80047ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800478a:	2308      	movs	r3, #8
 800478c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800478e:	2308      	movs	r3, #8
 8004790:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	0e5b      	lsrs	r3, r3, #25
 800479a:	b2db      	uxtb	r3, r3
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	0f5b      	lsrs	r3, r3, #29
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047b2:	7bbb      	ldrb	r3, [r7, #14]
 80047b4:	7b3a      	ldrb	r2, [r7, #12]
 80047b6:	4911      	ldr	r1, [pc, #68]	; (80047fc <UARTEx_SetNbDataToProcess+0x94>)
 80047b8:	5c8a      	ldrb	r2, [r1, r2]
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80047be:	7b3a      	ldrb	r2, [r7, #12]
 80047c0:	490f      	ldr	r1, [pc, #60]	; (8004800 <UARTEx_SetNbDataToProcess+0x98>)
 80047c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	7b7a      	ldrb	r2, [r7, #13]
 80047d4:	4909      	ldr	r1, [pc, #36]	; (80047fc <UARTEx_SetNbDataToProcess+0x94>)
 80047d6:	5c8a      	ldrb	r2, [r1, r2]
 80047d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80047dc:	7b7a      	ldrb	r2, [r7, #13]
 80047de:	4908      	ldr	r1, [pc, #32]	; (8004800 <UARTEx_SetNbDataToProcess+0x98>)
 80047e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	080088d0 	.word	0x080088d0
 8004800:	080088d8 	.word	0x080088d8

08004804 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800480c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004810:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	b29b      	uxth	r3, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	b29b      	uxth	r3, r3
 8004822:	4013      	ands	r3, r2
 8004824:	b29a      	uxth	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	1d3b      	adds	r3, r7, #4
 8004844:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2201      	movs	r2, #1
 800484c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <sniprintf>:
 8004878:	b40c      	push	{r2, r3}
 800487a:	b530      	push	{r4, r5, lr}
 800487c:	4b17      	ldr	r3, [pc, #92]	; (80048dc <sniprintf+0x64>)
 800487e:	1e0c      	subs	r4, r1, #0
 8004880:	681d      	ldr	r5, [r3, #0]
 8004882:	b09d      	sub	sp, #116	; 0x74
 8004884:	da08      	bge.n	8004898 <sniprintf+0x20>
 8004886:	238b      	movs	r3, #139	; 0x8b
 8004888:	602b      	str	r3, [r5, #0]
 800488a:	f04f 30ff 	mov.w	r0, #4294967295
 800488e:	b01d      	add	sp, #116	; 0x74
 8004890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004894:	b002      	add	sp, #8
 8004896:	4770      	bx	lr
 8004898:	f44f 7302 	mov.w	r3, #520	; 0x208
 800489c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80048a0:	bf14      	ite	ne
 80048a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80048a6:	4623      	moveq	r3, r4
 80048a8:	9304      	str	r3, [sp, #16]
 80048aa:	9307      	str	r3, [sp, #28]
 80048ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048b0:	9002      	str	r0, [sp, #8]
 80048b2:	9006      	str	r0, [sp, #24]
 80048b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80048b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80048ba:	ab21      	add	r3, sp, #132	; 0x84
 80048bc:	a902      	add	r1, sp, #8
 80048be:	4628      	mov	r0, r5
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	f000 f9c1 	bl	8004c48 <_svfiprintf_r>
 80048c6:	1c43      	adds	r3, r0, #1
 80048c8:	bfbc      	itt	lt
 80048ca:	238b      	movlt	r3, #139	; 0x8b
 80048cc:	602b      	strlt	r3, [r5, #0]
 80048ce:	2c00      	cmp	r4, #0
 80048d0:	d0dd      	beq.n	800488e <sniprintf+0x16>
 80048d2:	9b02      	ldr	r3, [sp, #8]
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	e7d9      	b.n	800488e <sniprintf+0x16>
 80048da:	bf00      	nop
 80048dc:	200001e0 	.word	0x200001e0

080048e0 <siprintf>:
 80048e0:	b40e      	push	{r1, r2, r3}
 80048e2:	b500      	push	{lr}
 80048e4:	b09c      	sub	sp, #112	; 0x70
 80048e6:	ab1d      	add	r3, sp, #116	; 0x74
 80048e8:	9002      	str	r0, [sp, #8]
 80048ea:	9006      	str	r0, [sp, #24]
 80048ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048f0:	4809      	ldr	r0, [pc, #36]	; (8004918 <siprintf+0x38>)
 80048f2:	9107      	str	r1, [sp, #28]
 80048f4:	9104      	str	r1, [sp, #16]
 80048f6:	4909      	ldr	r1, [pc, #36]	; (800491c <siprintf+0x3c>)
 80048f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80048fc:	9105      	str	r1, [sp, #20]
 80048fe:	6800      	ldr	r0, [r0, #0]
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	a902      	add	r1, sp, #8
 8004904:	f000 f9a0 	bl	8004c48 <_svfiprintf_r>
 8004908:	9b02      	ldr	r3, [sp, #8]
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	b01c      	add	sp, #112	; 0x70
 8004910:	f85d eb04 	ldr.w	lr, [sp], #4
 8004914:	b003      	add	sp, #12
 8004916:	4770      	bx	lr
 8004918:	200001e0 	.word	0x200001e0
 800491c:	ffff0208 	.word	0xffff0208

08004920 <memset>:
 8004920:	4402      	add	r2, r0
 8004922:	4603      	mov	r3, r0
 8004924:	4293      	cmp	r3, r2
 8004926:	d100      	bne.n	800492a <memset+0xa>
 8004928:	4770      	bx	lr
 800492a:	f803 1b01 	strb.w	r1, [r3], #1
 800492e:	e7f9      	b.n	8004924 <memset+0x4>

08004930 <__errno>:
 8004930:	4b01      	ldr	r3, [pc, #4]	; (8004938 <__errno+0x8>)
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	200001e0 	.word	0x200001e0

0800493c <__libc_init_array>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	4d0d      	ldr	r5, [pc, #52]	; (8004974 <__libc_init_array+0x38>)
 8004940:	4c0d      	ldr	r4, [pc, #52]	; (8004978 <__libc_init_array+0x3c>)
 8004942:	1b64      	subs	r4, r4, r5
 8004944:	10a4      	asrs	r4, r4, #2
 8004946:	2600      	movs	r6, #0
 8004948:	42a6      	cmp	r6, r4
 800494a:	d109      	bne.n	8004960 <__libc_init_array+0x24>
 800494c:	4d0b      	ldr	r5, [pc, #44]	; (800497c <__libc_init_array+0x40>)
 800494e:	4c0c      	ldr	r4, [pc, #48]	; (8004980 <__libc_init_array+0x44>)
 8004950:	f000 fc6a 	bl	8005228 <_init>
 8004954:	1b64      	subs	r4, r4, r5
 8004956:	10a4      	asrs	r4, r4, #2
 8004958:	2600      	movs	r6, #0
 800495a:	42a6      	cmp	r6, r4
 800495c:	d105      	bne.n	800496a <__libc_init_array+0x2e>
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	f855 3b04 	ldr.w	r3, [r5], #4
 8004964:	4798      	blx	r3
 8004966:	3601      	adds	r6, #1
 8004968:	e7ee      	b.n	8004948 <__libc_init_array+0xc>
 800496a:	f855 3b04 	ldr.w	r3, [r5], #4
 800496e:	4798      	blx	r3
 8004970:	3601      	adds	r6, #1
 8004972:	e7f2      	b.n	800495a <__libc_init_array+0x1e>
 8004974:	0800891c 	.word	0x0800891c
 8004978:	0800891c 	.word	0x0800891c
 800497c:	0800891c 	.word	0x0800891c
 8004980:	08008920 	.word	0x08008920

08004984 <__retarget_lock_acquire_recursive>:
 8004984:	4770      	bx	lr

08004986 <__retarget_lock_release_recursive>:
 8004986:	4770      	bx	lr

08004988 <memcpy>:
 8004988:	440a      	add	r2, r1
 800498a:	4291      	cmp	r1, r2
 800498c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004990:	d100      	bne.n	8004994 <memcpy+0xc>
 8004992:	4770      	bx	lr
 8004994:	b510      	push	{r4, lr}
 8004996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800499a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800499e:	4291      	cmp	r1, r2
 80049a0:	d1f9      	bne.n	8004996 <memcpy+0xe>
 80049a2:	bd10      	pop	{r4, pc}

080049a4 <_free_r>:
 80049a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049a6:	2900      	cmp	r1, #0
 80049a8:	d044      	beq.n	8004a34 <_free_r+0x90>
 80049aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ae:	9001      	str	r0, [sp, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f1a1 0404 	sub.w	r4, r1, #4
 80049b6:	bfb8      	it	lt
 80049b8:	18e4      	addlt	r4, r4, r3
 80049ba:	f000 f8df 	bl	8004b7c <__malloc_lock>
 80049be:	4a1e      	ldr	r2, [pc, #120]	; (8004a38 <_free_r+0x94>)
 80049c0:	9801      	ldr	r0, [sp, #4]
 80049c2:	6813      	ldr	r3, [r2, #0]
 80049c4:	b933      	cbnz	r3, 80049d4 <_free_r+0x30>
 80049c6:	6063      	str	r3, [r4, #4]
 80049c8:	6014      	str	r4, [r2, #0]
 80049ca:	b003      	add	sp, #12
 80049cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049d0:	f000 b8da 	b.w	8004b88 <__malloc_unlock>
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	d908      	bls.n	80049ea <_free_r+0x46>
 80049d8:	6825      	ldr	r5, [r4, #0]
 80049da:	1961      	adds	r1, r4, r5
 80049dc:	428b      	cmp	r3, r1
 80049de:	bf01      	itttt	eq
 80049e0:	6819      	ldreq	r1, [r3, #0]
 80049e2:	685b      	ldreq	r3, [r3, #4]
 80049e4:	1949      	addeq	r1, r1, r5
 80049e6:	6021      	streq	r1, [r4, #0]
 80049e8:	e7ed      	b.n	80049c6 <_free_r+0x22>
 80049ea:	461a      	mov	r2, r3
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	b10b      	cbz	r3, 80049f4 <_free_r+0x50>
 80049f0:	42a3      	cmp	r3, r4
 80049f2:	d9fa      	bls.n	80049ea <_free_r+0x46>
 80049f4:	6811      	ldr	r1, [r2, #0]
 80049f6:	1855      	adds	r5, r2, r1
 80049f8:	42a5      	cmp	r5, r4
 80049fa:	d10b      	bne.n	8004a14 <_free_r+0x70>
 80049fc:	6824      	ldr	r4, [r4, #0]
 80049fe:	4421      	add	r1, r4
 8004a00:	1854      	adds	r4, r2, r1
 8004a02:	42a3      	cmp	r3, r4
 8004a04:	6011      	str	r1, [r2, #0]
 8004a06:	d1e0      	bne.n	80049ca <_free_r+0x26>
 8004a08:	681c      	ldr	r4, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	6053      	str	r3, [r2, #4]
 8004a0e:	440c      	add	r4, r1
 8004a10:	6014      	str	r4, [r2, #0]
 8004a12:	e7da      	b.n	80049ca <_free_r+0x26>
 8004a14:	d902      	bls.n	8004a1c <_free_r+0x78>
 8004a16:	230c      	movs	r3, #12
 8004a18:	6003      	str	r3, [r0, #0]
 8004a1a:	e7d6      	b.n	80049ca <_free_r+0x26>
 8004a1c:	6825      	ldr	r5, [r4, #0]
 8004a1e:	1961      	adds	r1, r4, r5
 8004a20:	428b      	cmp	r3, r1
 8004a22:	bf04      	itt	eq
 8004a24:	6819      	ldreq	r1, [r3, #0]
 8004a26:	685b      	ldreq	r3, [r3, #4]
 8004a28:	6063      	str	r3, [r4, #4]
 8004a2a:	bf04      	itt	eq
 8004a2c:	1949      	addeq	r1, r1, r5
 8004a2e:	6021      	streq	r1, [r4, #0]
 8004a30:	6054      	str	r4, [r2, #4]
 8004a32:	e7ca      	b.n	80049ca <_free_r+0x26>
 8004a34:	b003      	add	sp, #12
 8004a36:	bd30      	pop	{r4, r5, pc}
 8004a38:	20004144 	.word	0x20004144

08004a3c <sbrk_aligned>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	4e0e      	ldr	r6, [pc, #56]	; (8004a78 <sbrk_aligned+0x3c>)
 8004a40:	460c      	mov	r4, r1
 8004a42:	6831      	ldr	r1, [r6, #0]
 8004a44:	4605      	mov	r5, r0
 8004a46:	b911      	cbnz	r1, 8004a4e <sbrk_aligned+0x12>
 8004a48:	f000 fba6 	bl	8005198 <_sbrk_r>
 8004a4c:	6030      	str	r0, [r6, #0]
 8004a4e:	4621      	mov	r1, r4
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 fba1 	bl	8005198 <_sbrk_r>
 8004a56:	1c43      	adds	r3, r0, #1
 8004a58:	d00a      	beq.n	8004a70 <sbrk_aligned+0x34>
 8004a5a:	1cc4      	adds	r4, r0, #3
 8004a5c:	f024 0403 	bic.w	r4, r4, #3
 8004a60:	42a0      	cmp	r0, r4
 8004a62:	d007      	beq.n	8004a74 <sbrk_aligned+0x38>
 8004a64:	1a21      	subs	r1, r4, r0
 8004a66:	4628      	mov	r0, r5
 8004a68:	f000 fb96 	bl	8005198 <_sbrk_r>
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d101      	bne.n	8004a74 <sbrk_aligned+0x38>
 8004a70:	f04f 34ff 	mov.w	r4, #4294967295
 8004a74:	4620      	mov	r0, r4
 8004a76:	bd70      	pop	{r4, r5, r6, pc}
 8004a78:	20004148 	.word	0x20004148

08004a7c <_malloc_r>:
 8004a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a80:	1ccd      	adds	r5, r1, #3
 8004a82:	f025 0503 	bic.w	r5, r5, #3
 8004a86:	3508      	adds	r5, #8
 8004a88:	2d0c      	cmp	r5, #12
 8004a8a:	bf38      	it	cc
 8004a8c:	250c      	movcc	r5, #12
 8004a8e:	2d00      	cmp	r5, #0
 8004a90:	4607      	mov	r7, r0
 8004a92:	db01      	blt.n	8004a98 <_malloc_r+0x1c>
 8004a94:	42a9      	cmp	r1, r5
 8004a96:	d905      	bls.n	8004aa4 <_malloc_r+0x28>
 8004a98:	230c      	movs	r3, #12
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	2600      	movs	r6, #0
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aa4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b78 <_malloc_r+0xfc>
 8004aa8:	f000 f868 	bl	8004b7c <__malloc_lock>
 8004aac:	f8d8 3000 	ldr.w	r3, [r8]
 8004ab0:	461c      	mov	r4, r3
 8004ab2:	bb5c      	cbnz	r4, 8004b0c <_malloc_r+0x90>
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	f7ff ffc0 	bl	8004a3c <sbrk_aligned>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	4604      	mov	r4, r0
 8004ac0:	d155      	bne.n	8004b6e <_malloc_r+0xf2>
 8004ac2:	f8d8 4000 	ldr.w	r4, [r8]
 8004ac6:	4626      	mov	r6, r4
 8004ac8:	2e00      	cmp	r6, #0
 8004aca:	d145      	bne.n	8004b58 <_malloc_r+0xdc>
 8004acc:	2c00      	cmp	r4, #0
 8004ace:	d048      	beq.n	8004b62 <_malloc_r+0xe6>
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	4631      	mov	r1, r6
 8004ad4:	4638      	mov	r0, r7
 8004ad6:	eb04 0903 	add.w	r9, r4, r3
 8004ada:	f000 fb5d 	bl	8005198 <_sbrk_r>
 8004ade:	4581      	cmp	r9, r0
 8004ae0:	d13f      	bne.n	8004b62 <_malloc_r+0xe6>
 8004ae2:	6821      	ldr	r1, [r4, #0]
 8004ae4:	1a6d      	subs	r5, r5, r1
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	4638      	mov	r0, r7
 8004aea:	f7ff ffa7 	bl	8004a3c <sbrk_aligned>
 8004aee:	3001      	adds	r0, #1
 8004af0:	d037      	beq.n	8004b62 <_malloc_r+0xe6>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	442b      	add	r3, r5
 8004af6:	6023      	str	r3, [r4, #0]
 8004af8:	f8d8 3000 	ldr.w	r3, [r8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d038      	beq.n	8004b72 <_malloc_r+0xf6>
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	42a2      	cmp	r2, r4
 8004b04:	d12b      	bne.n	8004b5e <_malloc_r+0xe2>
 8004b06:	2200      	movs	r2, #0
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	e00f      	b.n	8004b2c <_malloc_r+0xb0>
 8004b0c:	6822      	ldr	r2, [r4, #0]
 8004b0e:	1b52      	subs	r2, r2, r5
 8004b10:	d41f      	bmi.n	8004b52 <_malloc_r+0xd6>
 8004b12:	2a0b      	cmp	r2, #11
 8004b14:	d917      	bls.n	8004b46 <_malloc_r+0xca>
 8004b16:	1961      	adds	r1, r4, r5
 8004b18:	42a3      	cmp	r3, r4
 8004b1a:	6025      	str	r5, [r4, #0]
 8004b1c:	bf18      	it	ne
 8004b1e:	6059      	strne	r1, [r3, #4]
 8004b20:	6863      	ldr	r3, [r4, #4]
 8004b22:	bf08      	it	eq
 8004b24:	f8c8 1000 	streq.w	r1, [r8]
 8004b28:	5162      	str	r2, [r4, r5]
 8004b2a:	604b      	str	r3, [r1, #4]
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	f104 060b 	add.w	r6, r4, #11
 8004b32:	f000 f829 	bl	8004b88 <__malloc_unlock>
 8004b36:	f026 0607 	bic.w	r6, r6, #7
 8004b3a:	1d23      	adds	r3, r4, #4
 8004b3c:	1af2      	subs	r2, r6, r3
 8004b3e:	d0ae      	beq.n	8004a9e <_malloc_r+0x22>
 8004b40:	1b9b      	subs	r3, r3, r6
 8004b42:	50a3      	str	r3, [r4, r2]
 8004b44:	e7ab      	b.n	8004a9e <_malloc_r+0x22>
 8004b46:	42a3      	cmp	r3, r4
 8004b48:	6862      	ldr	r2, [r4, #4]
 8004b4a:	d1dd      	bne.n	8004b08 <_malloc_r+0x8c>
 8004b4c:	f8c8 2000 	str.w	r2, [r8]
 8004b50:	e7ec      	b.n	8004b2c <_malloc_r+0xb0>
 8004b52:	4623      	mov	r3, r4
 8004b54:	6864      	ldr	r4, [r4, #4]
 8004b56:	e7ac      	b.n	8004ab2 <_malloc_r+0x36>
 8004b58:	4634      	mov	r4, r6
 8004b5a:	6876      	ldr	r6, [r6, #4]
 8004b5c:	e7b4      	b.n	8004ac8 <_malloc_r+0x4c>
 8004b5e:	4613      	mov	r3, r2
 8004b60:	e7cc      	b.n	8004afc <_malloc_r+0x80>
 8004b62:	230c      	movs	r3, #12
 8004b64:	603b      	str	r3, [r7, #0]
 8004b66:	4638      	mov	r0, r7
 8004b68:	f000 f80e 	bl	8004b88 <__malloc_unlock>
 8004b6c:	e797      	b.n	8004a9e <_malloc_r+0x22>
 8004b6e:	6025      	str	r5, [r4, #0]
 8004b70:	e7dc      	b.n	8004b2c <_malloc_r+0xb0>
 8004b72:	605b      	str	r3, [r3, #4]
 8004b74:	deff      	udf	#255	; 0xff
 8004b76:	bf00      	nop
 8004b78:	20004144 	.word	0x20004144

08004b7c <__malloc_lock>:
 8004b7c:	4801      	ldr	r0, [pc, #4]	; (8004b84 <__malloc_lock+0x8>)
 8004b7e:	f7ff bf01 	b.w	8004984 <__retarget_lock_acquire_recursive>
 8004b82:	bf00      	nop
 8004b84:	20004140 	.word	0x20004140

08004b88 <__malloc_unlock>:
 8004b88:	4801      	ldr	r0, [pc, #4]	; (8004b90 <__malloc_unlock+0x8>)
 8004b8a:	f7ff befc 	b.w	8004986 <__retarget_lock_release_recursive>
 8004b8e:	bf00      	nop
 8004b90:	20004140 	.word	0x20004140

08004b94 <__ssputs_r>:
 8004b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b98:	688e      	ldr	r6, [r1, #8]
 8004b9a:	461f      	mov	r7, r3
 8004b9c:	42be      	cmp	r6, r7
 8004b9e:	680b      	ldr	r3, [r1, #0]
 8004ba0:	4682      	mov	sl, r0
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	4690      	mov	r8, r2
 8004ba6:	d82c      	bhi.n	8004c02 <__ssputs_r+0x6e>
 8004ba8:	898a      	ldrh	r2, [r1, #12]
 8004baa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bae:	d026      	beq.n	8004bfe <__ssputs_r+0x6a>
 8004bb0:	6965      	ldr	r5, [r4, #20]
 8004bb2:	6909      	ldr	r1, [r1, #16]
 8004bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bb8:	eba3 0901 	sub.w	r9, r3, r1
 8004bbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bc0:	1c7b      	adds	r3, r7, #1
 8004bc2:	444b      	add	r3, r9
 8004bc4:	106d      	asrs	r5, r5, #1
 8004bc6:	429d      	cmp	r5, r3
 8004bc8:	bf38      	it	cc
 8004bca:	461d      	movcc	r5, r3
 8004bcc:	0553      	lsls	r3, r2, #21
 8004bce:	d527      	bpl.n	8004c20 <__ssputs_r+0x8c>
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	f7ff ff53 	bl	8004a7c <_malloc_r>
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	b360      	cbz	r0, 8004c34 <__ssputs_r+0xa0>
 8004bda:	6921      	ldr	r1, [r4, #16]
 8004bdc:	464a      	mov	r2, r9
 8004bde:	f7ff fed3 	bl	8004988 <memcpy>
 8004be2:	89a3      	ldrh	r3, [r4, #12]
 8004be4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bec:	81a3      	strh	r3, [r4, #12]
 8004bee:	6126      	str	r6, [r4, #16]
 8004bf0:	6165      	str	r5, [r4, #20]
 8004bf2:	444e      	add	r6, r9
 8004bf4:	eba5 0509 	sub.w	r5, r5, r9
 8004bf8:	6026      	str	r6, [r4, #0]
 8004bfa:	60a5      	str	r5, [r4, #8]
 8004bfc:	463e      	mov	r6, r7
 8004bfe:	42be      	cmp	r6, r7
 8004c00:	d900      	bls.n	8004c04 <__ssputs_r+0x70>
 8004c02:	463e      	mov	r6, r7
 8004c04:	6820      	ldr	r0, [r4, #0]
 8004c06:	4632      	mov	r2, r6
 8004c08:	4641      	mov	r1, r8
 8004c0a:	f000 faab 	bl	8005164 <memmove>
 8004c0e:	68a3      	ldr	r3, [r4, #8]
 8004c10:	1b9b      	subs	r3, r3, r6
 8004c12:	60a3      	str	r3, [r4, #8]
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	4433      	add	r3, r6
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c20:	462a      	mov	r2, r5
 8004c22:	f000 fac9 	bl	80051b8 <_realloc_r>
 8004c26:	4606      	mov	r6, r0
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	d1e0      	bne.n	8004bee <__ssputs_r+0x5a>
 8004c2c:	6921      	ldr	r1, [r4, #16]
 8004c2e:	4650      	mov	r0, sl
 8004c30:	f7ff feb8 	bl	80049a4 <_free_r>
 8004c34:	230c      	movs	r3, #12
 8004c36:	f8ca 3000 	str.w	r3, [sl]
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	f04f 30ff 	mov.w	r0, #4294967295
 8004c46:	e7e9      	b.n	8004c1c <__ssputs_r+0x88>

08004c48 <_svfiprintf_r>:
 8004c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4c:	4698      	mov	r8, r3
 8004c4e:	898b      	ldrh	r3, [r1, #12]
 8004c50:	061b      	lsls	r3, r3, #24
 8004c52:	b09d      	sub	sp, #116	; 0x74
 8004c54:	4607      	mov	r7, r0
 8004c56:	460d      	mov	r5, r1
 8004c58:	4614      	mov	r4, r2
 8004c5a:	d50e      	bpl.n	8004c7a <_svfiprintf_r+0x32>
 8004c5c:	690b      	ldr	r3, [r1, #16]
 8004c5e:	b963      	cbnz	r3, 8004c7a <_svfiprintf_r+0x32>
 8004c60:	2140      	movs	r1, #64	; 0x40
 8004c62:	f7ff ff0b 	bl	8004a7c <_malloc_r>
 8004c66:	6028      	str	r0, [r5, #0]
 8004c68:	6128      	str	r0, [r5, #16]
 8004c6a:	b920      	cbnz	r0, 8004c76 <_svfiprintf_r+0x2e>
 8004c6c:	230c      	movs	r3, #12
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295
 8004c74:	e0d0      	b.n	8004e18 <_svfiprintf_r+0x1d0>
 8004c76:	2340      	movs	r3, #64	; 0x40
 8004c78:	616b      	str	r3, [r5, #20]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c7e:	2320      	movs	r3, #32
 8004c80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c88:	2330      	movs	r3, #48	; 0x30
 8004c8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e30 <_svfiprintf_r+0x1e8>
 8004c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c92:	f04f 0901 	mov.w	r9, #1
 8004c96:	4623      	mov	r3, r4
 8004c98:	469a      	mov	sl, r3
 8004c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c9e:	b10a      	cbz	r2, 8004ca4 <_svfiprintf_r+0x5c>
 8004ca0:	2a25      	cmp	r2, #37	; 0x25
 8004ca2:	d1f9      	bne.n	8004c98 <_svfiprintf_r+0x50>
 8004ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8004ca8:	d00b      	beq.n	8004cc2 <_svfiprintf_r+0x7a>
 8004caa:	465b      	mov	r3, fp
 8004cac:	4622      	mov	r2, r4
 8004cae:	4629      	mov	r1, r5
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	f7ff ff6f 	bl	8004b94 <__ssputs_r>
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	f000 80a9 	beq.w	8004e0e <_svfiprintf_r+0x1c6>
 8004cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cbe:	445a      	add	r2, fp
 8004cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8004cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 80a1 	beq.w	8004e0e <_svfiprintf_r+0x1c6>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cd6:	f10a 0a01 	add.w	sl, sl, #1
 8004cda:	9304      	str	r3, [sp, #16]
 8004cdc:	9307      	str	r3, [sp, #28]
 8004cde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ce4:	4654      	mov	r4, sl
 8004ce6:	2205      	movs	r2, #5
 8004ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cec:	4850      	ldr	r0, [pc, #320]	; (8004e30 <_svfiprintf_r+0x1e8>)
 8004cee:	f7fb fa47 	bl	8000180 <memchr>
 8004cf2:	9a04      	ldr	r2, [sp, #16]
 8004cf4:	b9d8      	cbnz	r0, 8004d2e <_svfiprintf_r+0xe6>
 8004cf6:	06d0      	lsls	r0, r2, #27
 8004cf8:	bf44      	itt	mi
 8004cfa:	2320      	movmi	r3, #32
 8004cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d00:	0711      	lsls	r1, r2, #28
 8004d02:	bf44      	itt	mi
 8004d04:	232b      	movmi	r3, #43	; 0x2b
 8004d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d10:	d015      	beq.n	8004d3e <_svfiprintf_r+0xf6>
 8004d12:	9a07      	ldr	r2, [sp, #28]
 8004d14:	4654      	mov	r4, sl
 8004d16:	2000      	movs	r0, #0
 8004d18:	f04f 0c0a 	mov.w	ip, #10
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d22:	3b30      	subs	r3, #48	; 0x30
 8004d24:	2b09      	cmp	r3, #9
 8004d26:	d94d      	bls.n	8004dc4 <_svfiprintf_r+0x17c>
 8004d28:	b1b0      	cbz	r0, 8004d58 <_svfiprintf_r+0x110>
 8004d2a:	9207      	str	r2, [sp, #28]
 8004d2c:	e014      	b.n	8004d58 <_svfiprintf_r+0x110>
 8004d2e:	eba0 0308 	sub.w	r3, r0, r8
 8004d32:	fa09 f303 	lsl.w	r3, r9, r3
 8004d36:	4313      	orrs	r3, r2
 8004d38:	9304      	str	r3, [sp, #16]
 8004d3a:	46a2      	mov	sl, r4
 8004d3c:	e7d2      	b.n	8004ce4 <_svfiprintf_r+0x9c>
 8004d3e:	9b03      	ldr	r3, [sp, #12]
 8004d40:	1d19      	adds	r1, r3, #4
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	9103      	str	r1, [sp, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	bfbb      	ittet	lt
 8004d4a:	425b      	neglt	r3, r3
 8004d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8004d50:	9307      	strge	r3, [sp, #28]
 8004d52:	9307      	strlt	r3, [sp, #28]
 8004d54:	bfb8      	it	lt
 8004d56:	9204      	strlt	r2, [sp, #16]
 8004d58:	7823      	ldrb	r3, [r4, #0]
 8004d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8004d5c:	d10c      	bne.n	8004d78 <_svfiprintf_r+0x130>
 8004d5e:	7863      	ldrb	r3, [r4, #1]
 8004d60:	2b2a      	cmp	r3, #42	; 0x2a
 8004d62:	d134      	bne.n	8004dce <_svfiprintf_r+0x186>
 8004d64:	9b03      	ldr	r3, [sp, #12]
 8004d66:	1d1a      	adds	r2, r3, #4
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	9203      	str	r2, [sp, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bfb8      	it	lt
 8004d70:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d74:	3402      	adds	r4, #2
 8004d76:	9305      	str	r3, [sp, #20]
 8004d78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004e40 <_svfiprintf_r+0x1f8>
 8004d7c:	7821      	ldrb	r1, [r4, #0]
 8004d7e:	2203      	movs	r2, #3
 8004d80:	4650      	mov	r0, sl
 8004d82:	f7fb f9fd 	bl	8000180 <memchr>
 8004d86:	b138      	cbz	r0, 8004d98 <_svfiprintf_r+0x150>
 8004d88:	9b04      	ldr	r3, [sp, #16]
 8004d8a:	eba0 000a 	sub.w	r0, r0, sl
 8004d8e:	2240      	movs	r2, #64	; 0x40
 8004d90:	4082      	lsls	r2, r0
 8004d92:	4313      	orrs	r3, r2
 8004d94:	3401      	adds	r4, #1
 8004d96:	9304      	str	r3, [sp, #16]
 8004d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d9c:	4825      	ldr	r0, [pc, #148]	; (8004e34 <_svfiprintf_r+0x1ec>)
 8004d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004da2:	2206      	movs	r2, #6
 8004da4:	f7fb f9ec 	bl	8000180 <memchr>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d038      	beq.n	8004e1e <_svfiprintf_r+0x1d6>
 8004dac:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <_svfiprintf_r+0x1f0>)
 8004dae:	bb1b      	cbnz	r3, 8004df8 <_svfiprintf_r+0x1b0>
 8004db0:	9b03      	ldr	r3, [sp, #12]
 8004db2:	3307      	adds	r3, #7
 8004db4:	f023 0307 	bic.w	r3, r3, #7
 8004db8:	3308      	adds	r3, #8
 8004dba:	9303      	str	r3, [sp, #12]
 8004dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dbe:	4433      	add	r3, r6
 8004dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc2:	e768      	b.n	8004c96 <_svfiprintf_r+0x4e>
 8004dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dc8:	460c      	mov	r4, r1
 8004dca:	2001      	movs	r0, #1
 8004dcc:	e7a6      	b.n	8004d1c <_svfiprintf_r+0xd4>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	3401      	adds	r4, #1
 8004dd2:	9305      	str	r3, [sp, #20]
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	f04f 0c0a 	mov.w	ip, #10
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004de0:	3a30      	subs	r2, #48	; 0x30
 8004de2:	2a09      	cmp	r2, #9
 8004de4:	d903      	bls.n	8004dee <_svfiprintf_r+0x1a6>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0c6      	beq.n	8004d78 <_svfiprintf_r+0x130>
 8004dea:	9105      	str	r1, [sp, #20]
 8004dec:	e7c4      	b.n	8004d78 <_svfiprintf_r+0x130>
 8004dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8004df2:	4604      	mov	r4, r0
 8004df4:	2301      	movs	r3, #1
 8004df6:	e7f0      	b.n	8004dda <_svfiprintf_r+0x192>
 8004df8:	ab03      	add	r3, sp, #12
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	462a      	mov	r2, r5
 8004dfe:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <_svfiprintf_r+0x1f4>)
 8004e00:	a904      	add	r1, sp, #16
 8004e02:	4638      	mov	r0, r7
 8004e04:	f3af 8000 	nop.w
 8004e08:	1c42      	adds	r2, r0, #1
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	d1d6      	bne.n	8004dbc <_svfiprintf_r+0x174>
 8004e0e:	89ab      	ldrh	r3, [r5, #12]
 8004e10:	065b      	lsls	r3, r3, #25
 8004e12:	f53f af2d 	bmi.w	8004c70 <_svfiprintf_r+0x28>
 8004e16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e18:	b01d      	add	sp, #116	; 0x74
 8004e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e1e:	ab03      	add	r3, sp, #12
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	462a      	mov	r2, r5
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <_svfiprintf_r+0x1f4>)
 8004e26:	a904      	add	r1, sp, #16
 8004e28:	4638      	mov	r0, r7
 8004e2a:	f000 f879 	bl	8004f20 <_printf_i>
 8004e2e:	e7eb      	b.n	8004e08 <_svfiprintf_r+0x1c0>
 8004e30:	080088e0 	.word	0x080088e0
 8004e34:	080088ea 	.word	0x080088ea
 8004e38:	00000000 	.word	0x00000000
 8004e3c:	08004b95 	.word	0x08004b95
 8004e40:	080088e6 	.word	0x080088e6

08004e44 <_printf_common>:
 8004e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	4616      	mov	r6, r2
 8004e4a:	4699      	mov	r9, r3
 8004e4c:	688a      	ldr	r2, [r1, #8]
 8004e4e:	690b      	ldr	r3, [r1, #16]
 8004e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e54:	4293      	cmp	r3, r2
 8004e56:	bfb8      	it	lt
 8004e58:	4613      	movlt	r3, r2
 8004e5a:	6033      	str	r3, [r6, #0]
 8004e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e60:	4607      	mov	r7, r0
 8004e62:	460c      	mov	r4, r1
 8004e64:	b10a      	cbz	r2, 8004e6a <_printf_common+0x26>
 8004e66:	3301      	adds	r3, #1
 8004e68:	6033      	str	r3, [r6, #0]
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	0699      	lsls	r1, r3, #26
 8004e6e:	bf42      	ittt	mi
 8004e70:	6833      	ldrmi	r3, [r6, #0]
 8004e72:	3302      	addmi	r3, #2
 8004e74:	6033      	strmi	r3, [r6, #0]
 8004e76:	6825      	ldr	r5, [r4, #0]
 8004e78:	f015 0506 	ands.w	r5, r5, #6
 8004e7c:	d106      	bne.n	8004e8c <_printf_common+0x48>
 8004e7e:	f104 0a19 	add.w	sl, r4, #25
 8004e82:	68e3      	ldr	r3, [r4, #12]
 8004e84:	6832      	ldr	r2, [r6, #0]
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	42ab      	cmp	r3, r5
 8004e8a:	dc26      	bgt.n	8004eda <_printf_common+0x96>
 8004e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e90:	1e13      	subs	r3, r2, #0
 8004e92:	6822      	ldr	r2, [r4, #0]
 8004e94:	bf18      	it	ne
 8004e96:	2301      	movne	r3, #1
 8004e98:	0692      	lsls	r2, r2, #26
 8004e9a:	d42b      	bmi.n	8004ef4 <_printf_common+0xb0>
 8004e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	47c0      	blx	r8
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d01e      	beq.n	8004ee8 <_printf_common+0xa4>
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	6922      	ldr	r2, [r4, #16]
 8004eae:	f003 0306 	and.w	r3, r3, #6
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	bf02      	ittt	eq
 8004eb6:	68e5      	ldreq	r5, [r4, #12]
 8004eb8:	6833      	ldreq	r3, [r6, #0]
 8004eba:	1aed      	subeq	r5, r5, r3
 8004ebc:	68a3      	ldr	r3, [r4, #8]
 8004ebe:	bf0c      	ite	eq
 8004ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ec4:	2500      	movne	r5, #0
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	bfc4      	itt	gt
 8004eca:	1a9b      	subgt	r3, r3, r2
 8004ecc:	18ed      	addgt	r5, r5, r3
 8004ece:	2600      	movs	r6, #0
 8004ed0:	341a      	adds	r4, #26
 8004ed2:	42b5      	cmp	r5, r6
 8004ed4:	d11a      	bne.n	8004f0c <_printf_common+0xc8>
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	e008      	b.n	8004eec <_printf_common+0xa8>
 8004eda:	2301      	movs	r3, #1
 8004edc:	4652      	mov	r2, sl
 8004ede:	4649      	mov	r1, r9
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	47c0      	blx	r8
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d103      	bne.n	8004ef0 <_printf_common+0xac>
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef0:	3501      	adds	r5, #1
 8004ef2:	e7c6      	b.n	8004e82 <_printf_common+0x3e>
 8004ef4:	18e1      	adds	r1, r4, r3
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	2030      	movs	r0, #48	; 0x30
 8004efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004efe:	4422      	add	r2, r4
 8004f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f08:	3302      	adds	r3, #2
 8004f0a:	e7c7      	b.n	8004e9c <_printf_common+0x58>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4622      	mov	r2, r4
 8004f10:	4649      	mov	r1, r9
 8004f12:	4638      	mov	r0, r7
 8004f14:	47c0      	blx	r8
 8004f16:	3001      	adds	r0, #1
 8004f18:	d0e6      	beq.n	8004ee8 <_printf_common+0xa4>
 8004f1a:	3601      	adds	r6, #1
 8004f1c:	e7d9      	b.n	8004ed2 <_printf_common+0x8e>
	...

08004f20 <_printf_i>:
 8004f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f24:	7e0f      	ldrb	r7, [r1, #24]
 8004f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f28:	2f78      	cmp	r7, #120	; 0x78
 8004f2a:	4691      	mov	r9, r2
 8004f2c:	4680      	mov	r8, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	469a      	mov	sl, r3
 8004f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f36:	d807      	bhi.n	8004f48 <_printf_i+0x28>
 8004f38:	2f62      	cmp	r7, #98	; 0x62
 8004f3a:	d80a      	bhi.n	8004f52 <_printf_i+0x32>
 8004f3c:	2f00      	cmp	r7, #0
 8004f3e:	f000 80d4 	beq.w	80050ea <_printf_i+0x1ca>
 8004f42:	2f58      	cmp	r7, #88	; 0x58
 8004f44:	f000 80c0 	beq.w	80050c8 <_printf_i+0x1a8>
 8004f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f50:	e03a      	b.n	8004fc8 <_printf_i+0xa8>
 8004f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f56:	2b15      	cmp	r3, #21
 8004f58:	d8f6      	bhi.n	8004f48 <_printf_i+0x28>
 8004f5a:	a101      	add	r1, pc, #4	; (adr r1, 8004f60 <_printf_i+0x40>)
 8004f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f60:	08004fb9 	.word	0x08004fb9
 8004f64:	08004fcd 	.word	0x08004fcd
 8004f68:	08004f49 	.word	0x08004f49
 8004f6c:	08004f49 	.word	0x08004f49
 8004f70:	08004f49 	.word	0x08004f49
 8004f74:	08004f49 	.word	0x08004f49
 8004f78:	08004fcd 	.word	0x08004fcd
 8004f7c:	08004f49 	.word	0x08004f49
 8004f80:	08004f49 	.word	0x08004f49
 8004f84:	08004f49 	.word	0x08004f49
 8004f88:	08004f49 	.word	0x08004f49
 8004f8c:	080050d1 	.word	0x080050d1
 8004f90:	08004ff9 	.word	0x08004ff9
 8004f94:	0800508b 	.word	0x0800508b
 8004f98:	08004f49 	.word	0x08004f49
 8004f9c:	08004f49 	.word	0x08004f49
 8004fa0:	080050f3 	.word	0x080050f3
 8004fa4:	08004f49 	.word	0x08004f49
 8004fa8:	08004ff9 	.word	0x08004ff9
 8004fac:	08004f49 	.word	0x08004f49
 8004fb0:	08004f49 	.word	0x08004f49
 8004fb4:	08005093 	.word	0x08005093
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	1d1a      	adds	r2, r3, #4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	602a      	str	r2, [r5, #0]
 8004fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e09f      	b.n	800510c <_printf_i+0x1ec>
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	682b      	ldr	r3, [r5, #0]
 8004fd0:	0607      	lsls	r7, r0, #24
 8004fd2:	f103 0104 	add.w	r1, r3, #4
 8004fd6:	6029      	str	r1, [r5, #0]
 8004fd8:	d501      	bpl.n	8004fde <_printf_i+0xbe>
 8004fda:	681e      	ldr	r6, [r3, #0]
 8004fdc:	e003      	b.n	8004fe6 <_printf_i+0xc6>
 8004fde:	0646      	lsls	r6, r0, #25
 8004fe0:	d5fb      	bpl.n	8004fda <_printf_i+0xba>
 8004fe2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	da03      	bge.n	8004ff2 <_printf_i+0xd2>
 8004fea:	232d      	movs	r3, #45	; 0x2d
 8004fec:	4276      	negs	r6, r6
 8004fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff2:	485a      	ldr	r0, [pc, #360]	; (800515c <_printf_i+0x23c>)
 8004ff4:	230a      	movs	r3, #10
 8004ff6:	e012      	b.n	800501e <_printf_i+0xfe>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	6820      	ldr	r0, [r4, #0]
 8004ffc:	1d19      	adds	r1, r3, #4
 8004ffe:	6029      	str	r1, [r5, #0]
 8005000:	0605      	lsls	r5, r0, #24
 8005002:	d501      	bpl.n	8005008 <_printf_i+0xe8>
 8005004:	681e      	ldr	r6, [r3, #0]
 8005006:	e002      	b.n	800500e <_printf_i+0xee>
 8005008:	0641      	lsls	r1, r0, #25
 800500a:	d5fb      	bpl.n	8005004 <_printf_i+0xe4>
 800500c:	881e      	ldrh	r6, [r3, #0]
 800500e:	4853      	ldr	r0, [pc, #332]	; (800515c <_printf_i+0x23c>)
 8005010:	2f6f      	cmp	r7, #111	; 0x6f
 8005012:	bf0c      	ite	eq
 8005014:	2308      	moveq	r3, #8
 8005016:	230a      	movne	r3, #10
 8005018:	2100      	movs	r1, #0
 800501a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800501e:	6865      	ldr	r5, [r4, #4]
 8005020:	60a5      	str	r5, [r4, #8]
 8005022:	2d00      	cmp	r5, #0
 8005024:	bfa2      	ittt	ge
 8005026:	6821      	ldrge	r1, [r4, #0]
 8005028:	f021 0104 	bicge.w	r1, r1, #4
 800502c:	6021      	strge	r1, [r4, #0]
 800502e:	b90e      	cbnz	r6, 8005034 <_printf_i+0x114>
 8005030:	2d00      	cmp	r5, #0
 8005032:	d04b      	beq.n	80050cc <_printf_i+0x1ac>
 8005034:	4615      	mov	r5, r2
 8005036:	fbb6 f1f3 	udiv	r1, r6, r3
 800503a:	fb03 6711 	mls	r7, r3, r1, r6
 800503e:	5dc7      	ldrb	r7, [r0, r7]
 8005040:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005044:	4637      	mov	r7, r6
 8005046:	42bb      	cmp	r3, r7
 8005048:	460e      	mov	r6, r1
 800504a:	d9f4      	bls.n	8005036 <_printf_i+0x116>
 800504c:	2b08      	cmp	r3, #8
 800504e:	d10b      	bne.n	8005068 <_printf_i+0x148>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	07de      	lsls	r6, r3, #31
 8005054:	d508      	bpl.n	8005068 <_printf_i+0x148>
 8005056:	6923      	ldr	r3, [r4, #16]
 8005058:	6861      	ldr	r1, [r4, #4]
 800505a:	4299      	cmp	r1, r3
 800505c:	bfde      	ittt	le
 800505e:	2330      	movle	r3, #48	; 0x30
 8005060:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005064:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005068:	1b52      	subs	r2, r2, r5
 800506a:	6122      	str	r2, [r4, #16]
 800506c:	f8cd a000 	str.w	sl, [sp]
 8005070:	464b      	mov	r3, r9
 8005072:	aa03      	add	r2, sp, #12
 8005074:	4621      	mov	r1, r4
 8005076:	4640      	mov	r0, r8
 8005078:	f7ff fee4 	bl	8004e44 <_printf_common>
 800507c:	3001      	adds	r0, #1
 800507e:	d14a      	bne.n	8005116 <_printf_i+0x1f6>
 8005080:	f04f 30ff 	mov.w	r0, #4294967295
 8005084:	b004      	add	sp, #16
 8005086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	f043 0320 	orr.w	r3, r3, #32
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	4833      	ldr	r0, [pc, #204]	; (8005160 <_printf_i+0x240>)
 8005094:	2778      	movs	r7, #120	; 0x78
 8005096:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	6829      	ldr	r1, [r5, #0]
 800509e:	061f      	lsls	r7, r3, #24
 80050a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80050a4:	d402      	bmi.n	80050ac <_printf_i+0x18c>
 80050a6:	065f      	lsls	r7, r3, #25
 80050a8:	bf48      	it	mi
 80050aa:	b2b6      	uxthmi	r6, r6
 80050ac:	07df      	lsls	r7, r3, #31
 80050ae:	bf48      	it	mi
 80050b0:	f043 0320 	orrmi.w	r3, r3, #32
 80050b4:	6029      	str	r1, [r5, #0]
 80050b6:	bf48      	it	mi
 80050b8:	6023      	strmi	r3, [r4, #0]
 80050ba:	b91e      	cbnz	r6, 80050c4 <_printf_i+0x1a4>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	f023 0320 	bic.w	r3, r3, #32
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	2310      	movs	r3, #16
 80050c6:	e7a7      	b.n	8005018 <_printf_i+0xf8>
 80050c8:	4824      	ldr	r0, [pc, #144]	; (800515c <_printf_i+0x23c>)
 80050ca:	e7e4      	b.n	8005096 <_printf_i+0x176>
 80050cc:	4615      	mov	r5, r2
 80050ce:	e7bd      	b.n	800504c <_printf_i+0x12c>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	6826      	ldr	r6, [r4, #0]
 80050d4:	6961      	ldr	r1, [r4, #20]
 80050d6:	1d18      	adds	r0, r3, #4
 80050d8:	6028      	str	r0, [r5, #0]
 80050da:	0635      	lsls	r5, r6, #24
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	d501      	bpl.n	80050e4 <_printf_i+0x1c4>
 80050e0:	6019      	str	r1, [r3, #0]
 80050e2:	e002      	b.n	80050ea <_printf_i+0x1ca>
 80050e4:	0670      	lsls	r0, r6, #25
 80050e6:	d5fb      	bpl.n	80050e0 <_printf_i+0x1c0>
 80050e8:	8019      	strh	r1, [r3, #0]
 80050ea:	2300      	movs	r3, #0
 80050ec:	6123      	str	r3, [r4, #16]
 80050ee:	4615      	mov	r5, r2
 80050f0:	e7bc      	b.n	800506c <_printf_i+0x14c>
 80050f2:	682b      	ldr	r3, [r5, #0]
 80050f4:	1d1a      	adds	r2, r3, #4
 80050f6:	602a      	str	r2, [r5, #0]
 80050f8:	681d      	ldr	r5, [r3, #0]
 80050fa:	6862      	ldr	r2, [r4, #4]
 80050fc:	2100      	movs	r1, #0
 80050fe:	4628      	mov	r0, r5
 8005100:	f7fb f83e 	bl	8000180 <memchr>
 8005104:	b108      	cbz	r0, 800510a <_printf_i+0x1ea>
 8005106:	1b40      	subs	r0, r0, r5
 8005108:	6060      	str	r0, [r4, #4]
 800510a:	6863      	ldr	r3, [r4, #4]
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	2300      	movs	r3, #0
 8005110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005114:	e7aa      	b.n	800506c <_printf_i+0x14c>
 8005116:	6923      	ldr	r3, [r4, #16]
 8005118:	462a      	mov	r2, r5
 800511a:	4649      	mov	r1, r9
 800511c:	4640      	mov	r0, r8
 800511e:	47d0      	blx	sl
 8005120:	3001      	adds	r0, #1
 8005122:	d0ad      	beq.n	8005080 <_printf_i+0x160>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	079b      	lsls	r3, r3, #30
 8005128:	d413      	bmi.n	8005152 <_printf_i+0x232>
 800512a:	68e0      	ldr	r0, [r4, #12]
 800512c:	9b03      	ldr	r3, [sp, #12]
 800512e:	4298      	cmp	r0, r3
 8005130:	bfb8      	it	lt
 8005132:	4618      	movlt	r0, r3
 8005134:	e7a6      	b.n	8005084 <_printf_i+0x164>
 8005136:	2301      	movs	r3, #1
 8005138:	4632      	mov	r2, r6
 800513a:	4649      	mov	r1, r9
 800513c:	4640      	mov	r0, r8
 800513e:	47d0      	blx	sl
 8005140:	3001      	adds	r0, #1
 8005142:	d09d      	beq.n	8005080 <_printf_i+0x160>
 8005144:	3501      	adds	r5, #1
 8005146:	68e3      	ldr	r3, [r4, #12]
 8005148:	9903      	ldr	r1, [sp, #12]
 800514a:	1a5b      	subs	r3, r3, r1
 800514c:	42ab      	cmp	r3, r5
 800514e:	dcf2      	bgt.n	8005136 <_printf_i+0x216>
 8005150:	e7eb      	b.n	800512a <_printf_i+0x20a>
 8005152:	2500      	movs	r5, #0
 8005154:	f104 0619 	add.w	r6, r4, #25
 8005158:	e7f5      	b.n	8005146 <_printf_i+0x226>
 800515a:	bf00      	nop
 800515c:	080088f1 	.word	0x080088f1
 8005160:	08008902 	.word	0x08008902

08005164 <memmove>:
 8005164:	4288      	cmp	r0, r1
 8005166:	b510      	push	{r4, lr}
 8005168:	eb01 0402 	add.w	r4, r1, r2
 800516c:	d902      	bls.n	8005174 <memmove+0x10>
 800516e:	4284      	cmp	r4, r0
 8005170:	4623      	mov	r3, r4
 8005172:	d807      	bhi.n	8005184 <memmove+0x20>
 8005174:	1e43      	subs	r3, r0, #1
 8005176:	42a1      	cmp	r1, r4
 8005178:	d008      	beq.n	800518c <memmove+0x28>
 800517a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800517e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005182:	e7f8      	b.n	8005176 <memmove+0x12>
 8005184:	4402      	add	r2, r0
 8005186:	4601      	mov	r1, r0
 8005188:	428a      	cmp	r2, r1
 800518a:	d100      	bne.n	800518e <memmove+0x2a>
 800518c:	bd10      	pop	{r4, pc}
 800518e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005196:	e7f7      	b.n	8005188 <memmove+0x24>

08005198 <_sbrk_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	4d06      	ldr	r5, [pc, #24]	; (80051b4 <_sbrk_r+0x1c>)
 800519c:	2300      	movs	r3, #0
 800519e:	4604      	mov	r4, r0
 80051a0:	4608      	mov	r0, r1
 80051a2:	602b      	str	r3, [r5, #0]
 80051a4:	f7fb ff46 	bl	8001034 <_sbrk>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	d102      	bne.n	80051b2 <_sbrk_r+0x1a>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	b103      	cbz	r3, 80051b2 <_sbrk_r+0x1a>
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	2000413c 	.word	0x2000413c

080051b8 <_realloc_r>:
 80051b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051bc:	4680      	mov	r8, r0
 80051be:	4614      	mov	r4, r2
 80051c0:	460e      	mov	r6, r1
 80051c2:	b921      	cbnz	r1, 80051ce <_realloc_r+0x16>
 80051c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051c8:	4611      	mov	r1, r2
 80051ca:	f7ff bc57 	b.w	8004a7c <_malloc_r>
 80051ce:	b92a      	cbnz	r2, 80051dc <_realloc_r+0x24>
 80051d0:	f7ff fbe8 	bl	80049a4 <_free_r>
 80051d4:	4625      	mov	r5, r4
 80051d6:	4628      	mov	r0, r5
 80051d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051dc:	f000 f81b 	bl	8005216 <_malloc_usable_size_r>
 80051e0:	4284      	cmp	r4, r0
 80051e2:	4607      	mov	r7, r0
 80051e4:	d802      	bhi.n	80051ec <_realloc_r+0x34>
 80051e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051ea:	d812      	bhi.n	8005212 <_realloc_r+0x5a>
 80051ec:	4621      	mov	r1, r4
 80051ee:	4640      	mov	r0, r8
 80051f0:	f7ff fc44 	bl	8004a7c <_malloc_r>
 80051f4:	4605      	mov	r5, r0
 80051f6:	2800      	cmp	r0, #0
 80051f8:	d0ed      	beq.n	80051d6 <_realloc_r+0x1e>
 80051fa:	42bc      	cmp	r4, r7
 80051fc:	4622      	mov	r2, r4
 80051fe:	4631      	mov	r1, r6
 8005200:	bf28      	it	cs
 8005202:	463a      	movcs	r2, r7
 8005204:	f7ff fbc0 	bl	8004988 <memcpy>
 8005208:	4631      	mov	r1, r6
 800520a:	4640      	mov	r0, r8
 800520c:	f7ff fbca 	bl	80049a4 <_free_r>
 8005210:	e7e1      	b.n	80051d6 <_realloc_r+0x1e>
 8005212:	4635      	mov	r5, r6
 8005214:	e7df      	b.n	80051d6 <_realloc_r+0x1e>

08005216 <_malloc_usable_size_r>:
 8005216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800521a:	1f18      	subs	r0, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	bfbc      	itt	lt
 8005220:	580b      	ldrlt	r3, [r1, r0]
 8005222:	18c0      	addlt	r0, r0, r3
 8005224:	4770      	bx	lr
	...

08005228 <_init>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	bf00      	nop
 800522c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522e:	bc08      	pop	{r3}
 8005230:	469e      	mov	lr, r3
 8005232:	4770      	bx	lr

08005234 <_fini>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	bf00      	nop
 8005238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523a:	bc08      	pop	{r3}
 800523c:	469e      	mov	lr, r3
 800523e:	4770      	bx	lr
