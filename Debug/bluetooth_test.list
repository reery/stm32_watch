
bluetooth_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036c4  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080094ec  080094ec  000194ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080094f4  080094f4  000194f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080094f8  080094f8  000194f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000008  080094fc  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003f8c  200001e4  080096d8  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004170  080096d8  00024170  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 11 .debug_info   00019cf2  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000344c  00000000  00000000  00039f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001960  00000000  00000000  0003d398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000136b  00000000  00000000  0003ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000238cf  00000000  00000000  00040063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001889b  00000000  00000000  00063932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e31ff  00000000  00000000  0007c1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000070a8  00000000  00000000  0015f3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  00166474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	08005e10 	.word	0x08005e10

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	08005e10 	.word	0x08005e10

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800052c:	f023 0218 	bic.w	r2, r3, #24
 8000530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4313      	orrs	r3, r2
 8000538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4013      	ands	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056c:	68fb      	ldr	r3, [r7, #12]
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <HAL_RTCEx_WakeUpTimerEventCallback>:
static void MX_RTC_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
	numToString(30, 40, startTime, "lu", 1);
	updateDisplay(40, 134);
	uint32_t stopTime = HAL_GetTick() - startTime;
	numToString(30, 136, stopTime, "lu", 1);
	updateDisplay(136, 185);*/
	drawLine_H(70, 28, 100, 1);
 8000584:	2301      	movs	r3, #1
 8000586:	2264      	movs	r2, #100	; 0x64
 8000588:	211c      	movs	r1, #28
 800058a:	2046      	movs	r0, #70	; 0x46
 800058c:	f000 fc10 	bl	8000db0 <drawLine_H>
	drawLine_V(68, 30, 100, 1);
 8000590:	2301      	movs	r3, #1
 8000592:	2264      	movs	r2, #100	; 0x64
 8000594:	211e      	movs	r1, #30
 8000596:	2044      	movs	r0, #68	; 0x44
 8000598:	f000 fc82 	bl	8000ea0 <drawLine_V>
	uint32_t startTime = HAL_GetTick();
 800059c:	f001 f8ce 	bl	800173c <HAL_GetTick>
 80005a0:	60f8      	str	r0, [r7, #12]
	fillSquare(70, 30, 100, 1);
 80005a2:	2301      	movs	r3, #1
 80005a4:	2264      	movs	r2, #100	; 0x64
 80005a6:	211e      	movs	r1, #30
 80005a8:	2046      	movs	r0, #70	; 0x46
 80005aa:	f000 fb63 	bl	8000c74 <fillSquare>
	startTime = HAL_GetTick() - startTime;
 80005ae:	f001 f8c5 	bl	800173c <HAL_GetTick>
 80005b2:	4602      	mov	r2, r0
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	60fb      	str	r3, [r7, #12]
	updateDisplay(28, 130);
 80005ba:	2182      	movs	r1, #130	; 0x82
 80005bc:	201c      	movs	r0, #28
 80005be:	f000 fad7 	bl	8000b70 <updateDisplay>
	numToString(30, 140, startTime, "lu", 1);
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	2301      	movs	r3, #1
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_RTCEx_WakeUpTimerEventCallback+0x68>)
 80005ca:	218c      	movs	r1, #140	; 0x8c
 80005cc:	201e      	movs	r0, #30
 80005ce:	f000 fd85 	bl	80010dc <numToString>
	updateDisplay(140, 190);
 80005d2:	21be      	movs	r1, #190	; 0xbe
 80005d4:	208c      	movs	r0, #140	; 0x8c
 80005d6:	f000 facb 	bl	8000b70 <updateDisplay>

}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	08005e28 	.word	0x08005e28

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08e      	sub	sp, #56	; 0x38
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f001 f837 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f82d 	bl	8000650 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005f6:	f000 f8a1 	bl	800073c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f9e5 	bl	80009c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005fe:	f000 f96d 	bl	80008dc <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000602:	f000 f9b9 	bl	8000978 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 8000606:	f000 f92b 	bl	8000860 <MX_SPI1_Init>
  MX_RTC_Init();
 800060a:	f000 f8c1 	bl	8000790 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800060e:	f000 f8b2 	bl	8000776 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  init_display();
 8000612:	f000 fa5b 	bl	8000acc <init_display>
  initDisplayBuffer();
 8000616:	f000 fd9d 	bl	8001154 <initDisplayBuffer>
  clearDisplay();
 800061a:	f000 fa39 	bl	8000a90 <clearDisplay>

  //uint32_t startTime = 0;
  const uint32_t lptimReset = 1024;
 800061e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000622:	637b      	str	r3, [r7, #52]	; 0x34
  //startTime = HAL_GetTick();
  char str[12];
  uint32_t startTime1 = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	633b      	str	r3, [r7, #48]	; 0x30
  char str1[12];
  char str2[12];
  int vcom_bit = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t counterValue = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  int counter = 1024;
 8000630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000634:	627b      	str	r3, [r7, #36]	; 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GREEN_LED_ON();
 8000636:	2201      	movs	r2, #1
 8000638:	2101      	movs	r1, #1
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <main+0x64>)
 800063c:	f001 fb3a 	bl	8001cb4 <HAL_GPIO_WritePin>
	  BLUE_LED_OFF();
 8000640:	2200      	movs	r2, #0
 8000642:	2120      	movs	r1, #32
 8000644:	4801      	ldr	r0, [pc, #4]	; (800064c <main+0x64>)
 8000646:	f001 fb35 	bl	8001cb4 <HAL_GPIO_WritePin>
	  GREEN_LED_ON();
 800064a:	e7f4      	b.n	8000636 <main+0x4e>
 800064c:	48000400 	.word	0x48000400

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b09a      	sub	sp, #104	; 0x68
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2248      	movs	r2, #72	; 0x48
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 ff52 	bl	8005508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
 8000672:	615a      	str	r2, [r3, #20]
 8000674:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000684:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	f023 0303 	bic.w	r3, r3, #3
 8000690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800069a:	f001 fc1b 	bl	8001ed4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ff3c 	bl	800051c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <SystemClock_Config+0xe8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006ac:	4a22      	ldr	r2, [pc, #136]	; (8000738 <SystemClock_Config+0xe8>)
 80006ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <SystemClock_Config+0xe8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80006c0:	2327      	movs	r3, #39	; 0x27
 80006c2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ca:	2301      	movs	r3, #1
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2340      	movs	r3, #64	; 0x40
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006dc:	2300      	movs	r3, #0
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e0:	2360      	movs	r3, #96	; 0x60
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 ff85 	bl	80025fc <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006f8:	f000 f9c4 	bl	8000a84 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006fc:	236f      	movs	r3, #111	; 0x6f
 80006fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000700:	2302      	movs	r3, #2
 8000702:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2101      	movs	r1, #1
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fae1 	bl	8002ce4 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000728:	f000 f9ac 	bl	8000a84 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800072c:	f003 f89c 	bl	8003868 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000730:	bf00      	nop
 8000732:	3768      	adds	r7, #104	; 0x68
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	58000400 	.word	0x58000400

0800073c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	2250      	movs	r2, #80	; 0x50
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f004 fedd 	bl	8005508 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800074e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000752:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000758:	2300      	movs	r3, #0
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4618      	mov	r0, r3
 8000760:	f002 ff0c 	bl	800357c <HAL_RCCEx_PeriphCLKConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800076a:	f000 f98b 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	; 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* RTC_WKUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 1, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2101      	movs	r1, #1
 800077e:	2003      	movs	r0, #3
 8000780:	f001 f8f3 	bl	800196a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000784:	2003      	movs	r0, #3
 8000786:	f001 f90a 	bl	800199e <HAL_NVIC_EnableIRQ>
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007a8:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <MX_RTC_Init+0xc8>)
 80007aa:	4a2c      	ldr	r2, [pc, #176]	; (800085c <MX_RTC_Init+0xcc>)
 80007ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <MX_RTC_Init+0xc8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <MX_RTC_Init+0xc8>)
 80007b6:	227f      	movs	r2, #127	; 0x7f
 80007b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007ba:	4b27      	ldr	r3, [pc, #156]	; (8000858 <MX_RTC_Init+0xc8>)
 80007bc:	22ff      	movs	r2, #255	; 0xff
 80007be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <MX_RTC_Init+0xc8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007c6:	4b24      	ldr	r3, [pc, #144]	; (8000858 <MX_RTC_Init+0xc8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <MX_RTC_Init+0xc8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <MX_RTC_Init+0xc8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007d8:	481f      	ldr	r0, [pc, #124]	; (8000858 <MX_RTC_Init+0xc8>)
 80007da:	f003 f95d 	bl	8003a98 <HAL_RTC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80007e4:	f000 f94e 	bl	8000a84 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 80007e8:	2322      	movs	r3, #34	; 0x22
 80007ea:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x15;
 80007ec:	2315      	movs	r3, #21
 80007ee:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2201      	movs	r2, #1
 8000804:	4619      	mov	r1, r3
 8000806:	4814      	ldr	r0, [pc, #80]	; (8000858 <MX_RTC_Init+0xc8>)
 8000808:	f003 f9f6 	bl	8003bf8 <HAL_RTC_SetTime>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000812:	f000 f937 	bl	8000a84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000816:	2303      	movs	r3, #3
 8000818:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800081a:	2301      	movs	r3, #1
 800081c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 800081e:	2331      	movs	r3, #49	; 0x31
 8000820:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8000822:	2324      	movs	r3, #36	; 0x24
 8000824:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	2201      	movs	r2, #1
 800082a:	4619      	mov	r1, r3
 800082c:	480a      	ldr	r0, [pc, #40]	; (8000858 <MX_RTC_Init+0xc8>)
 800082e:	f003 faa7 	bl	8003d80 <HAL_RTC_SetDate>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_RTC_Init+0xac>
  {
    Error_Handler();
 8000838:	f000 f924 	bl	8000a84 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800083c:	2204      	movs	r2, #4
 800083e:	2100      	movs	r1, #0
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_RTC_Init+0xc8>)
 8000842:	f003 fbbb 	bl	8003fbc <HAL_RTCEx_SetWakeUpTimer_IT>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 800084c:	f000 f91a 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000200 	.word	0x20000200
 800085c:	40002800 	.word	0x40002800

08000860 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_SPI1_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_SPI1_Init+0x74>)
 800086c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI1_Init+0x74>)
 800087a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800087e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI1_Init+0x74>)
 800088e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000892:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000896:	2210      	movs	r2, #16
 8000898:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SPI1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008ae:	2207      	movs	r2, #7
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008c0:	f003 fc5e 	bl	8004180 <HAL_SPI_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f000 f8db 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000224 	.word	0x20000224
 80008d8:	40013000 	.word	0x40013000

080008dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <MX_USART1_UART_Init+0x94>)
 80008e2:	4a24      	ldr	r2, [pc, #144]	; (8000974 <MX_USART1_UART_Init+0x98>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_USART1_UART_Init+0x94>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_USART1_UART_Init+0x94>)
 80008f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008f4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f6:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <MX_USART1_UART_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_USART1_UART_Init+0x94>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000902:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_USART1_UART_Init+0x94>)
 8000904:	220c      	movs	r2, #12
 8000906:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_USART1_UART_Init+0x94>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_USART1_UART_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_USART1_UART_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_USART1_UART_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART1_UART_Init+0x94>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000926:	4812      	ldr	r0, [pc, #72]	; (8000970 <MX_USART1_UART_Init+0x94>)
 8000928:	f003 ffc6 	bl	80048b8 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000932:	f000 f8a7 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000936:	2100      	movs	r1, #0
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_USART1_UART_Init+0x94>)
 800093a:	f004 fc8d 	bl	8005258 <HAL_UARTEx_SetTxFifoThreshold>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000944:	f000 f89e 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	4809      	ldr	r0, [pc, #36]	; (8000970 <MX_USART1_UART_Init+0x94>)
 800094c:	f004 fcc2 	bl	80052d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000956:	f000 f895 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART1_UART_Init+0x94>)
 800095c:	f004 fc43 	bl	80051e6 <HAL_UARTEx_DisableFifoMode>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000966:	f000 f88d 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000288 	.word	0x20000288
 8000974:	40013800 	.word	0x40013800

08000978 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USB_PCD_Init+0x48>)
 800097e:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <MX_USB_PCD_Init+0x4c>)
 8000980:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_USB_PCD_Init+0x48>)
 8000984:	2208      	movs	r2, #8
 8000986:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <MX_USB_PCD_Init+0x48>)
 800098a:	2202      	movs	r2, #2
 800098c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USB_PCD_Init+0x48>)
 8000990:	2202      	movs	r2, #2
 8000992:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <MX_USB_PCD_Init+0x48>)
 8000996:	2200      	movs	r2, #0
 8000998:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USB_PCD_Init+0x48>)
 800099c:	2200      	movs	r2, #0
 800099e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <MX_USB_PCD_Init+0x48>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USB_PCD_Init+0x48>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_USB_PCD_Init+0x48>)
 80009ae:	f001 f999 	bl	8001ce4 <HAL_PCD_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80009b8:	f000 f864 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000031c 	.word	0x2000031c
 80009c4:	40006800 	.word	0x40006800

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	2004      	movs	r0, #4
 80009de:	f7ff fdb3 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff fdb0 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	2002      	movs	r0, #2
 80009ea:	f7ff fdad 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	2008      	movs	r0, #8
 80009f0:	f7ff fdaa 	bl	8000548 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f001 f959 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2123      	movs	r1, #35	; 0x23
 8000a06:	481c      	ldr	r0, [pc, #112]	; (8000a78 <MX_GPIO_Init+0xb0>)
 8000a08:	f001 f954 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8000a0c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a26:	f000 ffd5 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a2a:	2310      	movs	r3, #16
 8000a2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4810      	ldr	r0, [pc, #64]	; (8000a7c <MX_GPIO_Init+0xb4>)
 8000a3c:	f000 ffca 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000a40:	2323      	movs	r3, #35	; 0x23
 8000a42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <MX_GPIO_Init+0xb0>)
 8000a56:	f000 ffbd 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_GPIO_Init+0xb8>)
 8000a6c:	f000 ffb2 	bl	80019d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a70:	bf00      	nop
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	48000400 	.word	0x48000400
 8000a7c:	48000800 	.word	0x48000800
 8000a80:	48000c00 	.word	0x48000c00

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <clearDisplay>:
//uint8_t frontBuffer[DISPLAY_HEIGHT][DISPLAY_WIDTH / 8];
uint8_t backBuffer[DISPLAY_HEIGHT][DISPLAY_WIDTH / 8] __attribute__((aligned(4)));
uint8_t (*currentBuffer)[DISPLAY_WIDTH / 8] = backBuffer;
uint8_t sendToDisplayBuffer[TOTAL_DATA_SIZE];

void clearDisplay(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	SCS_HIGH();
 8000a94:	2201      	movs	r2, #1
 8000a96:	2110      	movs	r1, #16
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f001 f90a 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &clear_command, 1, HAL_MAX_DELAY);
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4907      	ldr	r1, [pc, #28]	; (8000ac4 <clearDisplay+0x34>)
 8000aa8:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <clearDisplay+0x38>)
 8000aaa:	f003 fc0c 	bl	80042c6 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, &dummy_8bit, 1, HAL_MAX_DELAY);
	SCS_LOW();
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab6:	f001 f8fd 	bl	8001cb4 <HAL_GPIO_WritePin>
	toggle_vcom();
 8000aba:	f000 f82d 	bl	8000b18 <toggle_vcom>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000180 	.word	0x20000180
 8000ac8:	20000224 	.word	0x20000224

08000acc <init_display>:

void init_display(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	// Step 1
	HAL_Delay(10);
 8000ad0:	200a      	movs	r0, #10
 8000ad2:	f000 fe4b 	bl	800176c <HAL_Delay>
	DISP_LOW();
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f001 f8e8 	bl	8001cb4 <HAL_GPIO_WritePin>
	SCS_LOW();
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f001 f8e2 	bl	8001cb4 <HAL_GPIO_WritePin>
	EXTCOMIN_LOW();
 8000af0:	2200      	movs	r2, #0
 8000af2:	2140      	movs	r1, #64	; 0x40
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f001 f8dc 	bl	8001cb4 <HAL_GPIO_WritePin>
	// Step 2
	clearDisplay();
 8000afc:	f7ff ffc8 	bl	8000a90 <clearDisplay>
	HAL_Delay(50);
 8000b00:	2032      	movs	r0, #50	; 0x32
 8000b02:	f000 fe33 	bl	800176c <HAL_Delay>
	// Step 3
	DISP_HIGH();
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f001 f8d0 	bl	8001cb4 <HAL_GPIO_WritePin>
	// Step 4
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <toggle_vcom>:

unsigned int toggle_vcom(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	vcom_bit ^= 0x40;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <toggle_vcom+0x50>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <toggle_vcom+0x50>)
 8000b2a:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[2] = {vcom_bit, 0x00};
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <toggle_vcom+0x50>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	713b      	strb	r3, [r7, #4]
 8000b32:	2300      	movs	r3, #0
 8000b34:	717b      	strb	r3, [r7, #5]
	SCS_HIGH();
 8000b36:	2201      	movs	r2, #1
 8000b38:	2110      	movs	r1, #16
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f001 f8b9 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY);
 8000b42:	1d39      	adds	r1, r7, #4
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	2202      	movs	r2, #2
 8000b4a:	4808      	ldr	r0, [pc, #32]	; (8000b6c <toggle_vcom+0x54>)
 8000b4c:	f003 fbbb 	bl	80042c6 <HAL_SPI_Transmit>
	SCS_LOW();
 8000b50:	2200      	movs	r2, #0
 8000b52:	2110      	movs	r1, #16
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f001 f8ac 	bl	8001cb4 <HAL_GPIO_WritePin>
	return vcom_bit;
 8000b5c:	4b02      	ldr	r3, [pc, #8]	; (8000b68 <toggle_vcom+0x50>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000182 	.word	0x20000182
 8000b6c:	20000224 	.word	0x20000224

08000b70 <updateDisplay>:

	int vcom_bit = toggle_vcom();
	return vcom_bit;
}

unsigned int updateDisplay(uint8_t y_start, uint8_t y_end) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	460a      	mov	r2, r1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]
	uint8_t* sendBufferPtr = sendToDisplayBuffer;
 8000b80:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <updateDisplay+0xe8>)
 8000b82:	61fb      	str	r3, [r7, #28]
	*sendBufferPtr++ = write_mode;
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	61fa      	str	r2, [r7, #28]
 8000b8a:	4a34      	ldr	r2, [pc, #208]	; (8000c5c <updateDisplay+0xec>)
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	701a      	strb	r2, [r3, #0]

	// 1 ms for the loop
	for (uint8_t line = y_start - 1; line <= y_end; line++) {
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	76fb      	strb	r3, [r7, #27]
 8000b96:	e027      	b.n	8000be8 <updateDisplay+0x78>
	    // Send line address inverted
	    uint8_t line_address = (uint8_t)(__RBIT((uint8_t)(line)) >> 24);
 8000b98:	7efb      	ldrb	r3, [r7, #27]
 8000b9a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	fa93 f3a3 	rbit	r3, r3
 8000ba2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	0e1b      	lsrs	r3, r3, #24
 8000ba8:	74fb      	strb	r3, [r7, #19]
	    *sendBufferPtr++ = line_address;
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	61fa      	str	r2, [r7, #28]
 8000bb0:	7cfa      	ldrb	r2, [r7, #19]
 8000bb2:	701a      	strb	r2, [r3, #0]

	    // Add pixel data from displayBuffer -> to improve this all the gfx code could modify only the bufferPtr/sendToDisplayBuffer
	    memcpy(sendBufferPtr, currentBuffer[line - 1], DISPLAY_WIDTH / 8);
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <updateDisplay+0xf0>)
 8000bb6:	6819      	ldr	r1, [r3, #0]
 8000bb8:	7efa      	ldrb	r2, [r7, #27]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	1a9b      	subs	r3, r3, r2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	3b1e      	subs	r3, #30
 8000bc4:	440b      	add	r3, r1
 8000bc6:	221e      	movs	r2, #30
 8000bc8:	4619      	mov	r1, r3
 8000bca:	69f8      	ldr	r0, [r7, #28]
 8000bcc:	f004 fcd0 	bl	8005570 <memcpy>
	    sendBufferPtr += DISPLAY_WIDTH / 8;
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	331e      	adds	r3, #30
 8000bd4:	61fb      	str	r3, [r7, #28]

	    // Send 8 dummy bits after each line's pixel data
	    *sendBufferPtr++ = dummy_8bit;
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	61fa      	str	r2, [r7, #28]
 8000bdc:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <updateDisplay+0xf4>)
 8000bde:	7812      	ldrb	r2, [r2, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
	for (uint8_t line = y_start - 1; line <= y_end; line++) {
 8000be2:	7efb      	ldrb	r3, [r7, #27]
 8000be4:	3301      	adds	r3, #1
 8000be6:	76fb      	strb	r3, [r7, #27]
 8000be8:	7efa      	ldrb	r2, [r7, #27]
 8000bea:	79bb      	ldrb	r3, [r7, #6]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d9d3      	bls.n	8000b98 <updateDisplay+0x28>
	}
	*sendBufferPtr++ = dummy_16bit;
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	61fa      	str	r2, [r7, #28]
 8000bf6:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <updateDisplay+0xf8>)
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	701a      	strb	r2, [r3, #0]

	RED_LED_ON();
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2102      	movs	r1, #2
 8000c00:	481a      	ldr	r0, [pc, #104]	; (8000c6c <updateDisplay+0xfc>)
 8000c02:	f001 f857 	bl	8001cb4 <HAL_GPIO_WritePin>
	SCS_HIGH();
 8000c06:	2201      	movs	r2, #1
 8000c08:	2110      	movs	r1, #16
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0e:	f001 f851 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, sendToDisplayBuffer, TOTAL_DATA_SIZE, HAL_MAX_DELAY); // 16 ms for the SPI transfer
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	f641 6203 	movw	r2, #7683	; 0x1e03
 8000c1a:	490f      	ldr	r1, [pc, #60]	; (8000c58 <updateDisplay+0xe8>)
 8000c1c:	4814      	ldr	r0, [pc, #80]	; (8000c70 <updateDisplay+0x100>)
 8000c1e:	f003 fb52 	bl	80042c6 <HAL_SPI_Transmit>
	SCS_LOW();
 8000c22:	2200      	movs	r2, #0
 8000c24:	2110      	movs	r1, #16
 8000c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2a:	f001 f843 	bl	8001cb4 <HAL_GPIO_WritePin>
	//updateBuffer();
	//currentBuffer = (currentBuffer == frontBuffer) ? backBuffer : frontBuffer;
	//initCurrentBuffer();

	resetCurrentBufferLines(y_start, y_end); // 1 ms
 8000c2e:	79ba      	ldrb	r2, [r7, #6]
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fa9b 	bl	8001170 <resetCurrentBufferLines>
	RED_LED_OFF();
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	480b      	ldr	r0, [pc, #44]	; (8000c6c <updateDisplay+0xfc>)
 8000c40:	f001 f838 	bl	8001cb4 <HAL_GPIO_WritePin>

	int vcom_bit = toggle_vcom();
 8000c44:	f7ff ff68 	bl	8000b18 <toggle_vcom>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	617b      	str	r3, [r7, #20]
	return vcom_bit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3720      	adds	r7, #32
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000221c 	.word	0x2000221c
 8000c5c:	20000181 	.word	0x20000181
 8000c60:	20000184 	.word	0x20000184
 8000c64:	200005f9 	.word	0x200005f9
 8000c68:	200005f8 	.word	0x200005f8
 8000c6c:	48000400 	.word	0x48000400
 8000c70:	20000224 	.word	0x20000224

08000c74 <fillSquare>:
			}
        }
    }
}*/

void fillSquare(int start_position_x, int start_position_y, int square_size, bool color) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b090      	sub	sp, #64	; 0x40
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	70fb      	strb	r3, [r7, #3]
	int col = start_position_x - 1;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	63fb      	str	r3, [r7, #60]	; 0x3c
	int lastBytePosition = (col + square_size) >> 3; // (col + square_size) / 8
 8000c88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	10db      	asrs	r3, r3, #3
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
	int lastBitPosition = 7 - ((col + square_size) & 7); // 7 - ((col + square_size) % 8
 8000c92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4413      	add	r3, r2
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
	int byteIndex = col >> 3; // byteIndex = x / 8
 8000ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ca2:	10db      	asrs	r3, r3, #3
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
	int bitIndex = 7 - (col & 7); // bitIndex = 7 - (x % 8)
 8000ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	623b      	str	r3, [r7, #32]
	int columnsToMemset = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t memsetColor = 0x0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (color == 0) {
 8000cba:	78fb      	ldrb	r3, [r7, #3]
 8000cbc:	f083 0301 	eor.w	r3, r3, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <fillSquare+0x58>
		memsetColor = 0xF;
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	if (lastBitPosition == 7) {
 8000ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cce:	2b07      	cmp	r3, #7
 8000cd0:	d104      	bne.n	8000cdc <fillSquare+0x68>
		columnsToMemset = lastBytePosition - byteIndex;
 8000cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cda:	e004      	b.n	8000ce6 <fillSquare+0x72>
	} else {
		columnsToMemset = lastBytePosition - byteIndex - 1;
 8000cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
    // Loop over each row of the square
    for (int row = start_position_y - 1; row < start_position_y + square_size; row++) {
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
 8000cec:	e052      	b.n	8000d94 <fillSquare+0x120>
        // Loop over each column of the square
        for (col = start_position_x - 1; col < start_position_x + square_size; col++) {
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cf4:	e045      	b.n	8000d82 <fillSquare+0x10e>
        	byteIndex = col >> 3; // byteIndex = x / 8
 8000cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cf8:	10db      	asrs	r3, r3, #3
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
        	bitIndex = 7 - (col & 7); // bitIndex = 7 - (x % 8)
 8000cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	f003 0307 	and.w	r3, r3, #7
 8000d04:	623b      	str	r3, [r7, #32]

            if (bitIndex == 7 && byteIndex != lastBytePosition) {
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	2b07      	cmp	r3, #7
 8000d0a:	d11a      	bne.n	8000d42 <fillSquare+0xce>
 8000d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d016      	beq.n	8000d42 <fillSquare+0xce>
            	memset(&currentBuffer[row][byteIndex], memsetColor, columnsToMemset);
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <fillSquare+0x138>)
 8000d16:	6819      	ldr	r1, [r3, #0]
 8000d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	18ca      	adds	r2, r1, r3
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	4413      	add	r3, r2
 8000d28:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000d2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f004 fbea 	bl	8005508 <memset>
            	col = col - 1 + (columnsToMemset * 8);
 8000d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d36:	1e5a      	subs	r2, r3, #1
 8000d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	4413      	add	r3, r2
 8000d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
            	//columnsToMemset = 0;
            	continue;
 8000d40:	e01c      	b.n	8000d7c <fillSquare+0x108>
            }
            // Calculate the byte offset within the buffer
            uint32_t byte_offset = (uint32_t)&currentBuffer[row][byteIndex] - SRAM_BASE;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <fillSquare+0x138>)
 8000d44:	6819      	ldr	r1, [r3, #0]
 8000d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d48:	4613      	mov	r3, r2
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	18ca      	adds	r2, r1, r3
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	4413      	add	r3, r2
 8000d56:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000d5a:	61fb      	str	r3, [r7, #28]

            // Calculate the bit_word_offset and bit_band_alias_address
            uint32_t bit_word_offset = (byte_offset << 5) + (bitIndex << 2); // bit_word_offset = (byte_offset) * 32 + (bitIndex * 4)
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	015b      	lsls	r3, r3, #5
 8000d60:	6a3a      	ldr	r2, [r7, #32]
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
            uint32_t bit_band_alias_address = SRAM_BB_BASE + bit_word_offset;
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 8000d6e:	617b      	str	r3, [r7, #20]
            *(volatile uint32_t *)bit_band_alias_address = (color ? 0 : 1);
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	f083 0301 	eor.w	r3, r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	601a      	str	r2, [r3, #0]
        for (col = start_position_x - 1; col < start_position_x + square_size; col++) {
 8000d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d7e:	3301      	adds	r3, #1
 8000d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4413      	add	r3, r2
 8000d88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	dbb3      	blt.n	8000cf6 <fillSquare+0x82>
    for (int row = start_position_y - 1; row < start_position_y + square_size; row++) {
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d90:	3301      	adds	r3, #1
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dba6      	blt.n	8000cee <fillSquare+0x7a>
        }
    }
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3740      	adds	r7, #64	; 0x40
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000184 	.word	0x20000184

08000db0 <drawLine_H>:
			}
		}
	}
}

void drawLine_H(int start_position_x, int start_position_y, int length, bool color) {
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	70fb      	strb	r3, [r7, #3]
	for (int col = start_position_x - 1; col < start_position_x + length; col++) {
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	e05d      	b.n	8000e82 <drawLine_H+0xd2>

		int byteIndex = col / 8;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	da00      	bge.n	8000dce <drawLine_H+0x1e>
 8000dcc:	3307      	adds	r3, #7
 8000dce:	10db      	asrs	r3, r3, #3
 8000dd0:	61bb      	str	r3, [r7, #24]
		int bitIndex = 7 - (col % 8);
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	425a      	negs	r2, r3
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	f002 0207 	and.w	r2, r2, #7
 8000dde:	bf58      	it	pl
 8000de0:	4253      	negpl	r3, r2
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	617b      	str	r3, [r7, #20]

		if (color) {
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d024      	beq.n	8000e38 <drawLine_H+0x88>
			// Set the bit to draw a pixel (assuming 0 is the color for drawing)
			currentBuffer[start_position_y - 1][byteIndex] &= ~(1 << bitIndex);
 8000dee:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <drawLine_H+0xec>)
 8000df0:	6819      	ldr	r1, [r3, #0]
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	4613      	mov	r3, r2
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	1a9b      	subs	r3, r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	3b1e      	subs	r3, #30
 8000dfe:	18ca      	adds	r2, r1, r3
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	4413      	add	r3, r2
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b25a      	sxtb	r2, r3
 8000e08:	2101      	movs	r1, #1
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	4013      	ands	r3, r2
 8000e18:	b258      	sxtb	r0, r3
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <drawLine_H+0xec>)
 8000e1c:	6819      	ldr	r1, [r3, #0]
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	4613      	mov	r3, r2
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	1a9b      	subs	r3, r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	3b1e      	subs	r3, #30
 8000e2a:	18ca      	adds	r2, r1, r3
 8000e2c:	b2c1      	uxtb	r1, r0
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4413      	add	r3, r2
 8000e32:	460a      	mov	r2, r1
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	e021      	b.n	8000e7c <drawLine_H+0xcc>

		} else {
			// Clear the bit to erase a pixel (assuming 1 is the color for erasing)
			currentBuffer[start_position_y - 1][byteIndex] |= (1 << bitIndex);
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <drawLine_H+0xec>)
 8000e3a:	6819      	ldr	r1, [r3, #0]
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	011b      	lsls	r3, r3, #4
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	3b1e      	subs	r3, #30
 8000e48:	18ca      	adds	r2, r1, r3
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b25a      	sxtb	r2, r3
 8000e52:	2101      	movs	r1, #1
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b258      	sxtb	r0, r3
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <drawLine_H+0xec>)
 8000e62:	6819      	ldr	r1, [r3, #0]
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	4613      	mov	r3, r2
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	3b1e      	subs	r3, #30
 8000e70:	18ca      	adds	r2, r1, r3
 8000e72:	b2c1      	uxtb	r1, r0
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	4413      	add	r3, r2
 8000e78:	460a      	mov	r2, r1
 8000e7a:	701a      	strb	r2, [r3, #0]
	for (int col = start_position_x - 1; col < start_position_x + length; col++) {
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4413      	add	r3, r2
 8000e88:	69fa      	ldr	r2, [r7, #28]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	db9b      	blt.n	8000dc6 <drawLine_H+0x16>
		}
	}
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	3724      	adds	r7, #36	; 0x24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	20000184 	.word	0x20000184

08000ea0 <drawLine_V>:

void drawLine_V(int start_position_x, int start_position_y, int length, bool color) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	70fb      	strb	r3, [r7, #3]
	for (int row = start_position_y - 1; row < start_position_y + length; row++) {
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	e063      	b.n	8000f7e <drawLine_V+0xde>
		if (row < 0 || row >= DISPLAY_HEIGHT) continue;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db5c      	blt.n	8000f76 <drawLine_V+0xd6>
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	2bef      	cmp	r3, #239	; 0xef
 8000ec0:	dc59      	bgt.n	8000f76 <drawLine_V+0xd6>

		int byteIndex = (start_position_x - 1) / 8;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	da00      	bge.n	8000ecc <drawLine_V+0x2c>
 8000eca:	3307      	adds	r3, #7
 8000ecc:	10db      	asrs	r3, r3, #3
 8000ece:	61bb      	str	r3, [r7, #24]
		int bitIndex = 7 - ((start_position_x - 1) % 8);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	425a      	negs	r2, r3
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	f002 0207 	and.w	r2, r2, #7
 8000ede:	bf58      	it	pl
 8000ee0:	4253      	negpl	r3, r2
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	617b      	str	r3, [r7, #20]

		if (color) {
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d022      	beq.n	8000f34 <drawLine_V+0x94>
			// Set the bit to draw a pixel (assuming 0 is the color for drawing)
			currentBuffer[row][byteIndex] &= ~(1 << bitIndex);
 8000eee:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <drawLine_V+0xf8>)
 8000ef0:	6819      	ldr	r1, [r3, #0]
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	1a9b      	subs	r3, r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	18ca      	adds	r2, r1, r3
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4413      	add	r3, r2
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b25a      	sxtb	r2, r3
 8000f06:	2101      	movs	r1, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	4013      	ands	r3, r2
 8000f16:	b258      	sxtb	r0, r3
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <drawLine_V+0xf8>)
 8000f1a:	6819      	ldr	r1, [r3, #0]
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	18ca      	adds	r2, r1, r3
 8000f28:	b2c1      	uxtb	r1, r0
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	460a      	mov	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]
 8000f32:	e021      	b.n	8000f78 <drawLine_V+0xd8>

		} else {
			// Clear the bit to erase a pixel (assuming 1 is the color for erasing)
			currentBuffer[row][byteIndex] |= (1 << bitIndex);
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <drawLine_V+0xf8>)
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	1a9b      	subs	r3, r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	18ca      	adds	r2, r1, r3
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	4413      	add	r3, r2
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b25a      	sxtb	r2, r3
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b258      	sxtb	r0, r3
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <drawLine_V+0xf8>)
 8000f5c:	6819      	ldr	r1, [r3, #0]
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	4613      	mov	r3, r2
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	1a9b      	subs	r3, r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	18ca      	adds	r2, r1, r3
 8000f6a:	b2c1      	uxtb	r1, r0
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	4413      	add	r3, r2
 8000f70:	460a      	mov	r2, r1
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e000      	b.n	8000f78 <drawLine_V+0xd8>
		if (row < 0 || row >= DISPLAY_HEIGHT) continue;
 8000f76:	bf00      	nop
	for (int row = start_position_y - 1; row < start_position_y + length; row++) {
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	db95      	blt.n	8000eb6 <drawLine_V+0x16>
		}
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3724      	adds	r7, #36	; 0x24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	20000184 	.word	0x20000184

08000f9c <setPixel_BB>:
		// Clear the bit to erase a pixel (assuming 1 is the color for erasing)
		currentBuffer[y][byteIndex] |= (1 << bitIndex);
	}
}

void setPixel_BB(int x, int y, bool color) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b08b      	sub	sp, #44	; 0x2c
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	71fb      	strb	r3, [r7, #7]
	int byteIndex = x >> 3; // byteIndex = x / 8
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	10db      	asrs	r3, r3, #3
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
	int bitIndex = 7 - (x & 7); // bitIndex = 7 - (x % 8)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	623b      	str	r3, [r7, #32]

	// Calculate the byte offset within the buffer
	uint32_t byte_offset = (uint32_t)&currentBuffer[y][byteIndex] - SRAM_BASE;
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <setPixel_BB+0x64>)
 8000fbc:	6819      	ldr	r1, [r3, #0]
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	1a9b      	subs	r3, r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	18ca      	adds	r2, r1, r3
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	4413      	add	r3, r2
 8000fce:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fd2:	61fb      	str	r3, [r7, #28]

	// Calculate the bit_word_offset and bit_band_alias_address
	uint32_t bit_word_offset = (byte_offset << 5) + (bitIndex << 2); // bit_word_offset = (byte_offset) * 32 + (bitIndex * 4)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	015b      	lsls	r3, r3, #5
 8000fd8:	6a3a      	ldr	r2, [r7, #32]
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
	uint32_t bit_band_alias_address = SRAM_BB_BASE + bit_word_offset;
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 8000fe6:	617b      	str	r3, [r7, #20]

	// Use bit-banding to set or clear the bit
	*(volatile uint32_t *)bit_band_alias_address = (color ? 0 : 1);
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f083 0301 	eor.w	r3, r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	601a      	str	r2, [r3, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	372c      	adds	r7, #44	; 0x2c
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	20000184 	.word	0x20000184

08001004 <drawChar>:

void drawChar(int x, int y, char c, bool color) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b092      	sub	sp, #72	; 0x48
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	4611      	mov	r1, r2
 8001010:	461a      	mov	r2, r3
 8001012:	460b      	mov	r3, r1
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	4613      	mov	r3, r2
 8001018:	71bb      	strb	r3, [r7, #6]
	// Get the index of the character in the font arrays
	int charIndex = c - 33; // Assuming '!' (char 33) is the first character in your font
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	3b21      	subs	r3, #33	; 0x21
 800101e:	637b      	str	r3, [r7, #52]	; 0x34

	// Get the character width and bitmap address
	int width = char_width[charIndex];
 8001020:	4a2c      	ldr	r2, [pc, #176]	; (80010d4 <drawChar+0xd0>)
 8001022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001024:	4413      	add	r3, r2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
	const char* bitmap = char_addr[charIndex];
 800102a:	4a2b      	ldr	r2, [pc, #172]	; (80010d8 <drawChar+0xd4>)
 800102c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Iterate over each vertical slice (column) in the character's bitmap
	for (int col = 0; col < width; col++) {
 8001034:	2300      	movs	r3, #0
 8001036:	647b      	str	r3, [r7, #68]	; 0x44
 8001038:	e043      	b.n	80010c2 <drawChar+0xbe>
		int displayX = x + col;  // X position is based on the column (width)
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800103e:	4413      	add	r3, r2
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
		int bitmapColOffset = col; // Pre-calculate column offset in the bitmap
 8001042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001044:	627b      	str	r3, [r7, #36]	; 0x24

		int prevRowDivisionResult = -1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	643b      	str	r3, [r7, #64]	; 0x40
		int prevRowDivisionResultTimesWidth = -1;
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c

		// Iterate over each row in the character's bitmap
		for (int row = 0; row < 48; row++) { // Assuming 48 pixels in height
 8001052:	2300      	movs	r3, #0
 8001054:	63bb      	str	r3, [r7, #56]	; 0x38
 8001056:	e02e      	b.n	80010b6 <drawChar+0xb2>
			int displayY = y + row;  // Y position is based on the row (height)
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800105c:	4413      	add	r3, r2
 800105e:	623b      	str	r3, [r7, #32]

			// Optimize division and multiplication
			int rowDivisionResult = row >> 3;
 8001060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001062:	10db      	asrs	r3, r3, #3
 8001064:	61fb      	str	r3, [r7, #28]
			if (rowDivisionResult != prevRowDivisionResult) {
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800106a:	429a      	cmp	r2, r3
 800106c:	d006      	beq.n	800107c <drawChar+0x78>
				prevRowDivisionResult = rowDivisionResult;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	643b      	str	r3, [r7, #64]	; 0x40
				prevRowDivisionResultTimesWidth = rowDivisionResult * width;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
			}

			// Calculate the position in the bitmap array and the bit index
			int bitmapIndex = bitmapColOffset + prevRowDivisionResultTimesWidth;
 800107c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800107e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001080:	4413      	add	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
			int bitIndex = row & 7;  // Bit index within the byte, assuming LSB to MSB ordering
 8001084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	617b      	str	r3, [r7, #20]

			// Check if the pixel should be drawn (based on the bitmap data)
			if (bitmap[bitmapIndex] & (1 << bitIndex)) {
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	fa42 f303 	asr.w	r3, r2, r3
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <drawChar+0xac>
				setPixel_BB(displayX, displayY, color); // Draw the pixel
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	461a      	mov	r2, r3
 80010a8:	6a39      	ldr	r1, [r7, #32]
 80010aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010ac:	f7ff ff76 	bl	8000f9c <setPixel_BB>
		for (int row = 0; row < 48; row++) { // Assuming 48 pixels in height
 80010b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010b2:	3301      	adds	r3, #1
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80010b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010b8:	2b2f      	cmp	r3, #47	; 0x2f
 80010ba:	ddcd      	ble.n	8001058 <drawChar+0x54>
	for (int col = 0; col < width; col++) {
 80010bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010be:	3301      	adds	r3, #1
 80010c0:	647b      	str	r3, [r7, #68]	; 0x44
 80010c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dbb7      	blt.n	800103a <drawChar+0x36>
			}
		}
	}
}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	3748      	adds	r7, #72	; 0x48
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	08009390 	.word	0x08009390
 80010d8:	20000008 	.word	0x20000008

080010dc <numToString>:
        x += char_width[*str - 33] + 1; // Move x to the next character position
        str++; // Next character
    }
}

void numToString(int x, int y, int number, char *format, bool color) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]
	char str[16];
	char *string_pointer = str;
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	char finalFormat[8];
	snprintf(finalFormat, sizeof(finalFormat), "%%%s", format);
 80010f0:	f107 0014 	add.w	r0, r7, #20
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	4a15      	ldr	r2, [pc, #84]	; (800114c <numToString+0x70>)
 80010f8:	2108      	movs	r1, #8
 80010fa:	f004 f9b1 	bl	8005460 <sniprintf>
	sprintf(str, finalFormat, number);
 80010fe:	f107 0114 	add.w	r1, r7, #20
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	f004 f9dd 	bl	80054c8 <siprintf>
	while (*string_pointer) {
 800110e:	e013      	b.n	8001138 <numToString+0x5c>
        drawChar(x, y, *string_pointer, color);
 8001110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f7ff ff72 	bl	8001004 <drawChar>
        x += char_width[*string_pointer - 33] + 1; // Move x to the next character position
 8001120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	3b21      	subs	r3, #33	; 0x21
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <numToString+0x74>)
 8001128:	5cd3      	ldrb	r3, [r2, r3]
 800112a:	3301      	adds	r3, #1
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
        string_pointer++; // Next character
 8001132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001134:	3301      	adds	r3, #1
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (*string_pointer) {
 8001138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1e7      	bne.n	8001110 <numToString+0x34>
    }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3730      	adds	r7, #48	; 0x30
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	08005e2c 	.word	0x08005e2c
 8001150:	08009390 	.word	0x08009390

08001154 <initDisplayBuffer>:
	    	currentBuffer[row][col] = ~currentBuffer[row][col];
	    }
	}
}

void initDisplayBuffer(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	//memset(frontBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
	memset(currentBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <initDisplayBuffer+0x18>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001160:	21ff      	movs	r1, #255	; 0xff
 8001162:	4618      	mov	r0, r3
 8001164:	f004 f9d0 	bl	8005508 <memset>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000184 	.word	0x20000184

08001170 <resetCurrentBufferLines>:

void initCurrentBuffer(void) {
	memset(currentBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
}

void resetCurrentBufferLines(uint8_t y_start, uint8_t y_end) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	460a      	mov	r2, r1
 800117a:	71fb      	strb	r3, [r7, #7]
 800117c:	4613      	mov	r3, r2
 800117e:	71bb      	strb	r3, [r7, #6]
	for (int i = y_start; i <= y_end; i++) {
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e00f      	b.n	80011a6 <resetCurrentBufferLines+0x36>
		memset(currentBuffer[i], 0xFF, sizeof(currentBuffer[i]));
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <resetCurrentBufferLines+0x48>)
 8001188:	6819      	ldr	r1, [r3, #0]
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	4613      	mov	r3, r2
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	1a9b      	subs	r3, r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	440b      	add	r3, r1
 8001196:	221e      	movs	r2, #30
 8001198:	21ff      	movs	r1, #255	; 0xff
 800119a:	4618      	mov	r0, r3
 800119c:	f004 f9b4 	bl	8005508 <memset>
	for (int i = y_start; i <= y_end; i++) {
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3301      	adds	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	79bb      	ldrb	r3, [r7, #6]
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	ddeb      	ble.n	8001186 <resetCurrentBufferLines+0x16>
	}
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000184 	.word	0x20000184

080011bc <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80011c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <LL_AHB2_GRP1_EnableClock>:
{
 80011de:	b480      	push	{r7}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4013      	ands	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800121e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4313      	orrs	r3, r2
 8001226:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001234:	68fb      	ldr	r3, [r7, #12]
}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001242:	b480      	push	{r7}
 8001244:	b085      	sub	sp, #20
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800124a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001250:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4313      	orrs	r3, r2
 8001258:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800125a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4013      	ands	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b096      	sub	sp, #88	; 0x58
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	2250      	movs	r2, #80	; 0x50
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f004 f937 	bl	8005508 <memset>
  if(hrtc->Instance==RTC)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_RTC_MspInit+0x54>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d115      	bne.n	80012d0 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012a8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f002 f961 	bl	800357c <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80012c0:	f7ff fbe0 	bl	8000a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012c4:	f7ff ff7a 	bl	80011bc <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80012c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012cc:	f7ff ffa0 	bl	8001210 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	3758      	adds	r7, #88	; 0x58
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40002800 	.word	0x40002800

080012dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <HAL_SPI_MspInit+0x5c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d117      	bne.n	800132e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001302:	f7ff ff9e 	bl	8001242 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2001      	movs	r0, #1
 8001308:	f7ff ff69 	bl	80011de <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800130c:	23a0      	movs	r3, #160	; 0xa0
 800130e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800131c:	2305      	movs	r3, #5
 800131e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f000 fb53 	bl	80019d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40013000 	.word	0x40013000

0800133c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b09c      	sub	sp, #112	; 0x70
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	2250      	movs	r2, #80	; 0x50
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f004 f8d3 	bl	8005508 <memset>
  if(huart->Instance==USART1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a16      	ldr	r2, [pc, #88]	; (80013c0 <HAL_UART_MspInit+0x84>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d124      	bne.n	80013b6 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800136c:	2301      	movs	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4618      	mov	r0, r3
 800137a:	f002 f8ff 	bl	800357c <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001384:	f7ff fb7e 	bl	8000a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001388:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800138c:	f7ff ff59 	bl	8001242 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	2002      	movs	r0, #2
 8001392:	f7ff ff24 	bl	80011de <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001396:	23c0      	movs	r3, #192	; 0xc0
 8001398:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139e:	2301      	movs	r3, #1
 80013a0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013a6:	2307      	movs	r3, #7
 80013a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013ae:	4619      	mov	r1, r3
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <HAL_UART_MspInit+0x88>)
 80013b2:	f000 fb0f 	bl	80019d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3770      	adds	r7, #112	; 0x70
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40013800 	.word	0x40013800
 80013c4:	48000400 	.word	0x48000400

080013c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b09c      	sub	sp, #112	; 0x70
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2250      	movs	r2, #80	; 0x50
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 f88d 	bl	8005508 <memset>
  if(hpcd->Instance==USB)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <HAL_PCD_MspInit+0xa8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d136      	bne.n	8001466 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80013fe:	2318      	movs	r3, #24
 8001400:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001406:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001408:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800140c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800140e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001412:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001418:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800141a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800141e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4618      	mov	r0, r3
 8001426:	f002 f8a9 	bl	800357c <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001430:	f7ff fb28 	bl	8000a84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff fed2 	bl	80011de <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800143a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800143e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800144c:	230a      	movs	r3, #10
 800144e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001454:	4619      	mov	r1, r3
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f000 fabb 	bl	80019d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800145e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001462:	f7ff fed5 	bl	8001210 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3770      	adds	r7, #112	; 0x70
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40006800 	.word	0x40006800

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c0:	f000 f928 	bl	8001714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <RTC_WKUP_IRQHandler+0x10>)
 80014ce:	f002 fe31 	bl	8004134 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000200 	.word	0x20000200

080014dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e4:	4a14      	ldr	r2, [pc, #80]	; (8001538 <_sbrk+0x5c>)
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <_sbrk+0x60>)
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <_sbrk+0x64>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <_sbrk+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	d207      	bcs.n	800151c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800150c:	f004 f804 	bl	8005518 <__errno>
 8001510:	4603      	mov	r3, r0
 8001512:	220c      	movs	r2, #12
 8001514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	e009      	b.n	8001530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <_sbrk+0x64>)
 800152c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20030000 	.word	0x20030000
 800153c:	00000400 	.word	0x00000400
 8001540:	20004020 	.word	0x20004020
 8001544:	20004170 	.word	0x20004170

08001548 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <SystemInit+0x98>)
 800154e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001552:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <SystemInit+0x98>)
 8001554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800155c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800156c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001570:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001574:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <SystemInit+0x9c>)
 8001582:	4013      	ands	r3, r2
 8001584:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001592:	f023 0305 	bic.w	r3, r3, #5
 8001596:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b2:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <SystemInit+0xa0>)
 80015b4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80015b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <SystemInit+0xa0>)
 80015bc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00
 80015e4:	faf6fefb 	.word	0xfaf6fefb
 80015e8:	22041000 	.word	0x22041000

080015ec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80015ec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f0:	3304      	adds	r3, #4

080015f2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80015f6:	d3f9      	bcc.n	80015ec <CopyDataInit>
  bx lr
 80015f8:	4770      	bx	lr

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80015fa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80015fc:	3004      	adds	r0, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80015fe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>
  bx lr
 8001602:	4770      	bx	lr

08001604 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001606:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001608:	f7ff ff9e 	bl	8001548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <LoopForever+0x6>)
 800160e:	490c      	ldr	r1, [pc, #48]	; (8001640 <LoopForever+0xa>)
 8001610:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <LoopForever+0xe>)
 8001612:	2300      	movs	r3, #0
 8001614:	f7ff ffed 	bl	80015f2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001618:	480b      	ldr	r0, [pc, #44]	; (8001648 <LoopForever+0x12>)
 800161a:	490c      	ldr	r1, [pc, #48]	; (800164c <LoopForever+0x16>)
 800161c:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <LoopForever+0x1a>)
 800161e:	2300      	movs	r3, #0
 8001620:	f7ff ffe7 	bl	80015f2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001624:	480b      	ldr	r0, [pc, #44]	; (8001654 <LoopForever+0x1e>)
 8001626:	490c      	ldr	r1, [pc, #48]	; (8001658 <LoopForever+0x22>)
 8001628:	2300      	movs	r3, #0
 800162a:	f7ff ffe8 	bl	80015fe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800162e:	f003 ff79 	bl	8005524 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001632:	f7fe ffd9 	bl	80005e8 <main>

08001636 <LoopForever>:

LoopForever:
  b LoopForever
 8001636:	e7fe      	b.n	8001636 <LoopForever>
  ldr   r0, =_estack
 8001638:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800163c:	20000008 	.word	0x20000008
 8001640:	200001e4 	.word	0x200001e4
 8001644:	080094fc 	.word	0x080094fc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001648:	20030000 	.word	0x20030000
 800164c:	20030000 	.word	0x20030000
 8001650:	080096d8 	.word	0x080096d8
  INIT_BSS _sbss, _ebss
 8001654:	200001e4 	.word	0x200001e4
 8001658:	20004170 	.word	0x20004170

0800165c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC1_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_Init+0x3c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_Init+0x3c>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001676:	2003      	movs	r0, #3
 8001678:	f000 f96c 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800167c:	2000      	movs	r0, #0
 800167e:	f000 f80f 	bl	80016a0 <HAL_InitTick>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	e001      	b.n	8001692 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800168e:	f7ff fdf1 	bl	8001274 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001692:	79fb      	ldrb	r3, [r7, #7]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	58004000 	.word	0x58004000

080016a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <HAL_InitTick+0x6c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d024      	beq.n	80016fe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016b4:	f001 fcc2 	bl	800303c <HAL_RCC_GetHCLKFreq>
 80016b8:	4602      	mov	r2, r0
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_InitTick+0x6c>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	4619      	mov	r1, r3
 80016c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f974 	bl	80019ba <HAL_SYSTICK_Config>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10f      	bne.n	80016f8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b0f      	cmp	r3, #15
 80016dc:	d809      	bhi.n	80016f2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016de:	2200      	movs	r2, #0
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	f04f 30ff 	mov.w	r0, #4294967295
 80016e6:	f000 f940 	bl	800196a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ea:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_InitTick+0x70>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e007      	b.n	8001702 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	e004      	b.n	8001702 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e001      	b.n	8001702 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000190 	.word	0x20000190
 8001710:	2000018c 	.word	0x2000018c

08001714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x20>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x24>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_IncTick+0x24>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000190 	.word	0x20000190
 8001738:	20004024 	.word	0x20004024

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20004024 	.word	0x20004024

08001754 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_GetTickPrio+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	2000018c 	.word	0x2000018c

0800176c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff ffe2 	bl	800173c <HAL_GetTick>
 8001778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d005      	beq.n	8001792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_Delay+0x44>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001792:	bf00      	nop
 8001794:	f7ff ffd2 	bl	800173c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d8f7      	bhi.n	8001794 <HAL_Delay+0x28>
  {
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000190 	.word	0x20000190

080017b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d0:	4013      	ands	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <__NVIC_GetPriorityGrouping+0x18>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	f003 0307 	and.w	r3, r3, #7
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	2b00      	cmp	r3, #0
 8001828:	db0b      	blt.n	8001842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f003 021f 	and.w	r2, r3, #31
 8001830:	4907      	ldr	r1, [pc, #28]	; (8001850 <__NVIC_EnableIRQ+0x38>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	2001      	movs	r0, #1
 800183a:	fa00 f202 	lsl.w	r2, r0, r2
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e100 	.word	0xe000e100

08001854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db0a      	blt.n	800187e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	490c      	ldr	r1, [pc, #48]	; (80018a0 <__NVIC_SetPriority+0x4c>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800187c:	e00a      	b.n	8001894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4908      	ldr	r1, [pc, #32]	; (80018a4 <__NVIC_SetPriority+0x50>)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3b04      	subs	r3, #4
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	440b      	add	r3, r1
 8001892:	761a      	strb	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f1c3 0307 	rsb	r3, r3, #7
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	bf28      	it	cs
 80018c6:	2304      	movcs	r3, #4
 80018c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d902      	bls.n	80018d8 <NVIC_EncodePriority+0x30>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b03      	subs	r3, #3
 80018d6:	e000      	b.n	80018da <NVIC_EncodePriority+0x32>
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	4313      	orrs	r3, r2
         );
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	; 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001920:	d301      	bcc.n	8001926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2301      	movs	r3, #1
 8001924:	e00f      	b.n	8001946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <SysTick_Config+0x40>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192e:	210f      	movs	r1, #15
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f7ff ff8e 	bl	8001854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SysTick_Config+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <SysTick_Config+0x40>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff29 	bl	80017b4 <__NVIC_SetPriorityGrouping>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff40 	bl	80017fc <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff90 	bl	80018a8 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5f 	bl	8001854 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff33 	bl	8001818 <__NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffa4 	bl	8001910 <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e2:	e14c      	b.n	8001c7e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2101      	movs	r1, #1
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 813e 	beq.w	8001c78 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d005      	beq.n	8001a14 <HAL_GPIO_Init+0x40>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d130      	bne.n	8001a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 0201 	and.w	r2, r3, #1
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d017      	beq.n	8001ab2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d123      	bne.n	8001b06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	08da      	lsrs	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3208      	adds	r2, #8
 8001b00:	6939      	ldr	r1, [r7, #16]
 8001b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0203 	and.w	r2, r3, #3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8098 	beq.w	8001c78 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b48:	4a54      	ldr	r2, [pc, #336]	; (8001c9c <HAL_GPIO_Init+0x2c8>)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	220f      	movs	r2, #15
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b72:	d019      	beq.n	8001ba8 <HAL_GPIO_Init+0x1d4>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <HAL_GPIO_Init+0x2cc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d013      	beq.n	8001ba4 <HAL_GPIO_Init+0x1d0>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00d      	beq.n	8001ba0 <HAL_GPIO_Init+0x1cc>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a48      	ldr	r2, [pc, #288]	; (8001ca8 <HAL_GPIO_Init+0x2d4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d007      	beq.n	8001b9c <HAL_GPIO_Init+0x1c8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a47      	ldr	r2, [pc, #284]	; (8001cac <HAL_GPIO_Init+0x2d8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d101      	bne.n	8001b98 <HAL_GPIO_Init+0x1c4>
 8001b94:	2304      	movs	r3, #4
 8001b96:	e008      	b.n	8001baa <HAL_GPIO_Init+0x1d6>
 8001b98:	2307      	movs	r3, #7
 8001b9a:	e006      	b.n	8001baa <HAL_GPIO_Init+0x1d6>
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e004      	b.n	8001baa <HAL_GPIO_Init+0x1d6>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e002      	b.n	8001baa <HAL_GPIO_Init+0x1d6>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_GPIO_Init+0x1d6>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	f002 0203 	and.w	r2, r2, #3
 8001bb0:	0092      	lsls	r2, r2, #2
 8001bb2:	4093      	lsls	r3, r2
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bba:	4938      	ldr	r1, [pc, #224]	; (8001c9c <HAL_GPIO_Init+0x2c8>)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bc8:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bec:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c16:	4a26      	ldr	r2, [pc, #152]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c42:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c70:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f47f aeab 	bne.w	80019e4 <HAL_GPIO_Init+0x10>
  }
}
 8001c8e:	bf00      	nop
 8001c90:	bf00      	nop
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	48000400 	.word	0x48000400
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	48000c00 	.word	0x48000c00
 8001cac:	48001000 	.word	0x48001000
 8001cb0:	58000800 	.word	0x58000800

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0c0      	b.n	8001e78 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fb5c 	bl	80013c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2203      	movs	r2, #3
 8001d14:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fb65 	bl	80053ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]
 8001d26:	e03e      	b.n	8001da6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	3311      	adds	r3, #17
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	3310      	adds	r3, #16
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3313      	adds	r3, #19
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	3320      	adds	r3, #32
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	3324      	adds	r3, #36	; 0x24
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	440b      	add	r3, r1
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	3301      	adds	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	791b      	ldrb	r3, [r3, #4]
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d3bb      	bcc.n	8001d28 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	e044      	b.n	8001e40 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	440b      	add	r3, r1
 8001dda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	791b      	ldrb	r3, [r3, #4]
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d3b5      	bcc.n	8001db6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3304      	adds	r3, #4
 8001e52:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e56:	f003 fae4 	bl	8005422 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7a9b      	ldrb	r3, [r3, #10]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d102      	bne.n	8001e76 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f805 	bl	8001e80 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	58000400 	.word	0x58000400

08001ef4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_PWREx_GetVoltageRange+0x18>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	58000400 	.word	0x58000400

08001f10 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f22:	d101      	bne.n	8001f28 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_RCC_HSE_Enable>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <LL_RCC_HSE_Disable>:
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_RCC_HSE_IsReady>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f82:	d101      	bne.n	8001f88 <LL_RCC_HSE_IsReady+0x18>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <LL_RCC_HSE_IsReady+0x1a>
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_RCC_HSI_Enable>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_RCC_HSI_Disable>:
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fc4:	6013      	str	r3, [r2, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_RCC_HSI_IsReady>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe2:	d101      	bne.n	8001fe8 <LL_RCC_HSI_IsReady+0x18>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <LL_RCC_HSI_IsReady+0x1a>
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_RCC_HSI48_Enable>:
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800202a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_RCC_HSI48_Disable>:
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002048:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800204c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_RCC_HSI48_IsReady>:
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b02      	cmp	r3, #2
 8002074:	d101      	bne.n	800207a <LL_RCC_HSI48_IsReady+0x18>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <LL_RCC_HSI48_IsReady+0x1a>
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_RCC_LSE_Enable>:
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800208a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_RCC_LSE_Disable>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_RCC_LSE_EnableBypass>:
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_RCC_LSE_DisableBypass>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020fc:	f023 0304 	bic.w	r3, r3, #4
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_RCC_LSE_IsReady>:
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b02      	cmp	r3, #2
 8002120:	d101      	bne.n	8002126 <LL_RCC_LSE_IsReady+0x18>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <LL_RCC_LSE_IsReady+0x1a>
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_RCC_LSI1_Enable>:
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_RCC_LSI1_Disable>:
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_RCC_LSI1_IsReady>:
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800217a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b02      	cmp	r3, #2
 8002188:	d101      	bne.n	800218e <LL_RCC_LSI1_IsReady+0x18>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <LL_RCC_LSI1_IsReady+0x1a>
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_RCC_LSI2_Enable>:
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_RCC_LSI2_Disable>:
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_RCC_LSI2_IsReady>:
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80021e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d101      	bne.n	80021f6 <LL_RCC_LSI2_IsReady+0x18>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <LL_RCC_LSI2_IsReady+0x1a>
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_RCC_LSI2_SetTrimming>:
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800220a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002212:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_RCC_MSI_Enable>:
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6013      	str	r3, [r2, #0]
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_RCC_MSI_Disable>:
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	6013      	str	r3, [r2, #0]
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_RCC_MSI_IsReady>:
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b02      	cmp	r3, #2
 800227c:	d101      	bne.n	8002282 <LL_RCC_MSI_IsReady+0x16>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_RCC_MSI_IsReady+0x18>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_RCC_MSI_SetRange>:
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_RCC_MSI_GetRange>:
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80022bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2bb0      	cmp	r3, #176	; 0xb0
 80022cc:	d901      	bls.n	80022d2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80022ce:	23b0      	movs	r3, #176	; 0xb0
 80022d0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80022d2:	687b      	ldr	r3, [r7, #4]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_RCC_SetSysClkSource>:
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f023 0203 	bic.w	r2, r3, #3
 800231c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_RCC_GetSysClkSource>:
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 030c 	and.w	r3, r3, #12
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <LL_RCC_SetAHBPrescaler>:
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800235c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800237a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002382:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_RCC_SetAHB4Prescaler>:
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80023a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023ae:	f023 020f 	bic.w	r2, r3, #15
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_RCC_SetAPB1Prescaler>:
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80023d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_RCC_SetAPB2Prescaler>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_RCC_GetAHBPrescaler>:
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_RCC_GetAHB4Prescaler>:
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_RCC_GetAPB1Prescaler>:
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_RCC_GetAPB2Prescaler>:
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800246c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800248e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002492:	6013      	str	r3, [r2, #0]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80024a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b0:	6013      	str	r3, [r2, #0]
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80024c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024ce:	d101      	bne.n	80024d4 <LL_RCC_PLL_IsReady+0x18>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <LL_RCC_PLL_IsReady+0x1a>
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80024e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80024fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800252e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0303 	and.w	r3, r3, #3
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002554:	d101      	bne.n	800255a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800257a:	d101      	bne.n	8002580 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002594:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d101      	bne.n	80025a6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80025b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025c4:	d101      	bne.n	80025ca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80025da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025e8:	d101      	bne.n	80025ee <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b08d      	sub	sp, #52	; 0x34
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e363      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 808d 	beq.w	8002736 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261c:	f7ff fe89 	bl	8002332 <LL_RCC_GetSysClkSource>
 8002620:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002622:	f7ff ff82 	bl	800252a <LL_RCC_PLL_GetMainSource>
 8002626:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_RCC_OscConfig+0x3e>
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d147      	bne.n	80026c4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	2b01      	cmp	r3, #1
 8002638:	d144      	bne.n	80026c4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e347      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800264a:	f7ff fe34 	bl	80022b6 <LL_RCC_MSI_GetRange>
 800264e:	4603      	mov	r3, r0
 8002650:	429c      	cmp	r4, r3
 8002652:	d914      	bls.n	800267e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fd2f 	bl	80030bc <RCC_SetFlashLatencyFromMSIRange>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e336      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fe0e 	bl	800228e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fe32 	bl	80022e0 <LL_RCC_MSI_SetCalibTrimming>
 800267c:	e013      	b.n	80026a6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fe03 	bl	800228e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fe27 	bl	80022e0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fd10 	bl	80030bc <RCC_SetFlashLatencyFromMSIRange>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e317      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80026a6:	f000 fcc9 	bl	800303c <HAL_RCC_GetHCLKFreq>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4aa4      	ldr	r2, [pc, #656]	; (8002940 <HAL_RCC_OscConfig+0x344>)
 80026ae:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026b0:	4ba4      	ldr	r3, [pc, #656]	; (8002944 <HAL_RCC_OscConfig+0x348>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fff3 	bl	80016a0 <HAL_InitTick>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d039      	beq.n	8002734 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e308      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01e      	beq.n	800270a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026cc:	f7ff fdb0 	bl	8002230 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026d0:	f7ff f834 	bl	800173c <HAL_GetTick>
 80026d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026d8:	f7ff f830 	bl	800173c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e2f5      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80026ea:	f7ff fdbf 	bl	800226c <LL_RCC_MSI_IsReady>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f1      	beq.n	80026d8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fdc8 	bl	800228e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fdec 	bl	80022e0 <LL_RCC_MSI_SetCalibTrimming>
 8002708:	e015      	b.n	8002736 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800270a:	f7ff fda0 	bl	800224e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800270e:	f7ff f815 	bl	800173c <HAL_GetTick>
 8002712:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002716:	f7ff f811 	bl	800173c <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e2d6      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002728:	f7ff fda0 	bl	800226c <LL_RCC_MSI_IsReady>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f1      	bne.n	8002716 <HAL_RCC_OscConfig+0x11a>
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002734:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d047      	beq.n	80027d2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002742:	f7ff fdf6 	bl	8002332 <LL_RCC_GetSysClkSource>
 8002746:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002748:	f7ff feef 	bl	800252a <LL_RCC_PLL_GetMainSource>
 800274c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d005      	beq.n	8002760 <HAL_RCC_OscConfig+0x164>
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d108      	bne.n	800276c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d105      	bne.n	800276c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d134      	bne.n	80027d2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e2b4      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002774:	d102      	bne.n	800277c <HAL_RCC_OscConfig+0x180>
 8002776:	f7ff fbdd 	bl	8001f34 <LL_RCC_HSE_Enable>
 800277a:	e001      	b.n	8002780 <HAL_RCC_OscConfig+0x184>
 800277c:	f7ff fbe9 	bl	8001f52 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d012      	beq.n	80027ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe ffd8 	bl	800173c <HAL_GetTick>
 800278c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002790:	f7fe ffd4 	bl	800173c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e299      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80027a2:	f7ff fbe5 	bl	8001f70 <LL_RCC_HSE_IsReady>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f1      	beq.n	8002790 <HAL_RCC_OscConfig+0x194>
 80027ac:	e011      	b.n	80027d2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7fe ffc5 	bl	800173c <HAL_GetTick>
 80027b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b6:	f7fe ffc1 	bl	800173c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b64      	cmp	r3, #100	; 0x64
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e286      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80027c8:	f7ff fbd2 	bl	8001f70 <LL_RCC_HSE_IsReady>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f1      	bne.n	80027b6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d04c      	beq.n	8002878 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027de:	f7ff fda8 	bl	8002332 <LL_RCC_GetSysClkSource>
 80027e2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e4:	f7ff fea1 	bl	800252a <LL_RCC_PLL_GetMainSource>
 80027e8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_OscConfig+0x200>
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2b0c      	cmp	r3, #12
 80027f4:	d10e      	bne.n	8002814 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d10b      	bne.n	8002814 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e266      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fbf1 	bl	8001ff4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002812:	e031      	b.n	8002878 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d019      	beq.n	8002850 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800281c:	f7ff fbba 	bl	8001f94 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe ff8c 	bl	800173c <HAL_GetTick>
 8002824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002828:	f7fe ff88 	bl	800173c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e24d      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800283a:	f7ff fbc9 	bl	8001fd0 <LL_RCC_HSI_IsReady>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f1      	beq.n	8002828 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fbd3 	bl	8001ff4 <LL_RCC_HSI_SetCalibTrimming>
 800284e:	e013      	b.n	8002878 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002850:	f7ff fbaf 	bl	8001fb2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe ff72 	bl	800173c <HAL_GetTick>
 8002858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285c:	f7fe ff6e 	bl	800173c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e233      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800286e:	f7ff fbaf 	bl	8001fd0 <LL_RCC_HSI_IsReady>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f1      	bne.n	800285c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80a3 	beq.w	80029d8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d076      	beq.n	8002988 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d046      	beq.n	8002934 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80028a6:	f7ff fc66 	bl	8002176 <LL_RCC_LSI1_IsReady>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d113      	bne.n	80028d8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80028b0:	f7ff fc3f 	bl	8002132 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028b4:	f7fe ff42 	bl	800173c <HAL_GetTick>
 80028b8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80028bc:	f7fe ff3e 	bl	800173c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e203      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80028ce:	f7ff fc52 	bl	8002176 <LL_RCC_LSI1_IsReady>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f1      	beq.n	80028bc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80028d8:	f7ff fc5f 	bl	800219a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe ff2e 	bl	800173c <HAL_GetTick>
 80028e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80028e4:	f7fe ff2a 	bl	800173c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e1ef      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80028f6:	f7ff fc72 	bl	80021de <LL_RCC_LSI2_IsReady>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f1      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fc7c 	bl	8002202 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800290a:	f7ff fc23 	bl	8002154 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fe ff15 	bl	800173c <HAL_GetTick>
 8002912:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002916:	f7fe ff11 	bl	800173c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e1d6      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002928:	f7ff fc25 	bl	8002176 <LL_RCC_LSI1_IsReady>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f1      	bne.n	8002916 <HAL_RCC_OscConfig+0x31a>
 8002932:	e051      	b.n	80029d8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002934:	f7ff fbfd 	bl	8002132 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe ff00 	bl	800173c <HAL_GetTick>
 800293c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800293e:	e00c      	b.n	800295a <HAL_RCC_OscConfig+0x35e>
 8002940:	20000188 	.word	0x20000188
 8002944:	2000018c 	.word	0x2000018c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002948:	f7fe fef8 	bl	800173c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e1bd      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800295a:	f7ff fc0c 	bl	8002176 <LL_RCC_LSI1_IsReady>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f1      	beq.n	8002948 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002964:	f7ff fc2a 	bl	80021bc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800296a:	f7fe fee7 	bl	800173c <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b03      	cmp	r3, #3
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e1ac      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800297c:	f7ff fc2f 	bl	80021de <LL_RCC_LSI2_IsReady>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f1      	bne.n	800296a <HAL_RCC_OscConfig+0x36e>
 8002986:	e027      	b.n	80029d8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002988:	f7ff fc18 	bl	80021bc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298c:	f7fe fed6 	bl	800173c <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002994:	f7fe fed2 	bl	800173c <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e197      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80029a6:	f7ff fc1a 	bl	80021de <LL_RCC_LSI2_IsReady>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f1      	bne.n	8002994 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80029b0:	f7ff fbd0 	bl	8002154 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe fec2 	bl	800173c <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029bc:	f7fe febe 	bl	800173c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e183      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80029ce:	f7ff fbd2 	bl	8002176 <LL_RCC_LSI1_IsReady>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f1      	bne.n	80029bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d05b      	beq.n	8002a9c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e4:	4ba7      	ldr	r3, [pc, #668]	; (8002c84 <HAL_RCC_OscConfig+0x688>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d114      	bne.n	8002a1a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80029f0:	f7ff fa70 	bl	8001ed4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f4:	f7fe fea2 	bl	800173c <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fc:	f7fe fe9e 	bl	800173c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e163      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a0e:	4b9d      	ldr	r3, [pc, #628]	; (8002c84 <HAL_RCC_OscConfig+0x688>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d102      	bne.n	8002a28 <HAL_RCC_OscConfig+0x42c>
 8002a22:	f7ff fb30 	bl	8002086 <LL_RCC_LSE_Enable>
 8002a26:	e00c      	b.n	8002a42 <HAL_RCC_OscConfig+0x446>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	d104      	bne.n	8002a3a <HAL_RCC_OscConfig+0x43e>
 8002a30:	f7ff fb4b 	bl	80020ca <LL_RCC_LSE_EnableBypass>
 8002a34:	f7ff fb27 	bl	8002086 <LL_RCC_LSE_Enable>
 8002a38:	e003      	b.n	8002a42 <HAL_RCC_OscConfig+0x446>
 8002a3a:	f7ff fb35 	bl	80020a8 <LL_RCC_LSE_Disable>
 8002a3e:	f7ff fb55 	bl	80020ec <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d014      	beq.n	8002a74 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fe77 	bl	800173c <HAL_GetTick>
 8002a4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe fe73 	bl	800173c <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e136      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a68:	f7ff fb51 	bl	800210e <LL_RCC_LSE_IsReady>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0ef      	beq.n	8002a52 <HAL_RCC_OscConfig+0x456>
 8002a72:	e013      	b.n	8002a9c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe fe62 	bl	800173c <HAL_GetTick>
 8002a78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fe5e 	bl	800173c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e121      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a92:	f7ff fb3c 	bl	800210e <LL_RCC_LSE_IsReady>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1ef      	bne.n	8002a7c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d02c      	beq.n	8002b02 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d014      	beq.n	8002ada <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ab0:	f7ff fab5 	bl	800201e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fe42 	bl	800173c <HAL_GetTick>
 8002ab8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002abc:	f7fe fe3e 	bl	800173c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e103      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002ace:	f7ff fac8 	bl	8002062 <LL_RCC_HSI48_IsReady>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f1      	beq.n	8002abc <HAL_RCC_OscConfig+0x4c0>
 8002ad8:	e013      	b.n	8002b02 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ada:	f7ff fab1 	bl	8002040 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fe fe2d 	bl	800173c <HAL_GetTick>
 8002ae2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae6:	f7fe fe29 	bl	800173c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e0ee      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002af8:	f7ff fab3 	bl	8002062 <LL_RCC_HSI48_IsReady>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f1      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80e4 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b0c:	f7ff fc11 	bl	8002332 <LL_RCC_GetSysClkSource>
 8002b10:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	f040 80b4 	bne.w	8002c8c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0203 	and.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d123      	bne.n	8002b7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d11c      	bne.n	8002b7a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d114      	bne.n	8002b7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d10d      	bne.n	8002b7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d106      	bne.n	8002b7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d05d      	beq.n	8002c36 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b0c      	cmp	r3, #12
 8002b7e:	d058      	beq.n	8002c32 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0a1      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b92:	f7ff fc84 	bl	800249e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b96:	f7fe fdd1 	bl	800173c <HAL_GetTick>
 8002b9a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7fe fdcd 	bl	800173c <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e092      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ef      	bne.n	8002b9e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	4b30      	ldr	r3, [pc, #192]	; (8002c88 <HAL_RCC_OscConfig+0x68c>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd6:	0212      	lsls	r2, r2, #8
 8002bd8:	4311      	orrs	r1, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002be4:	4311      	orrs	r1, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bea:	430a      	orrs	r2, r1
 8002bec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bf4:	f7ff fc44 	bl	8002480 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c08:	f7fe fd98 	bl	800173c <HAL_GetTick>
 8002c0c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe fd94 	bl	800173c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e059      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ef      	beq.n	8002c10 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c30:	e050      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e04f      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d147      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c44:	f7ff fc1c 	bl	8002480 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c58:	f7fe fd70 	bl	800173c <HAL_GetTick>
 8002c5c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fe fd6c 	bl	800173c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e031      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0ef      	beq.n	8002c60 <HAL_RCC_OscConfig+0x664>
 8002c80:	e028      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6d8>
 8002c82:	bf00      	nop
 8002c84:	58000400 	.word	0x58000400
 8002c88:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d01e      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	f7ff fc04 	bl	800249e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fe fd51 	bl	800173c <HAL_GetTick>
 8002c9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe fd4d 	bl	800173c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e012      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1ef      	bne.n	8002c9e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_OscConfig+0x6e4>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	60cb      	str	r3, [r1, #12]
 8002cce:	e001      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3734      	adds	r7, #52	; 0x34
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd90      	pop	{r4, r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	eefefffc 	.word	0xeefefffc

08002ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e12d      	b.n	8002f54 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b98      	ldr	r3, [pc, #608]	; (8002f5c <HAL_RCC_ClockConfig+0x278>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d91b      	bls.n	8002d3e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b95      	ldr	r3, [pc, #596]	; (8002f5c <HAL_RCC_ClockConfig+0x278>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 0207 	bic.w	r2, r3, #7
 8002d0e:	4993      	ldr	r1, [pc, #588]	; (8002f5c <HAL_RCC_ClockConfig+0x278>)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d16:	f7fe fd11 	bl	800173c <HAL_GetTick>
 8002d1a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d1e:	f7fe fd0d 	bl	800173c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e111      	b.n	8002f54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d30:	4b8a      	ldr	r3, [pc, #552]	; (8002f5c <HAL_RCC_ClockConfig+0x278>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d1ef      	bne.n	8002d1e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d016      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fafb 	bl	800234a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d54:	f7fe fcf2 	bl	800173c <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d5c:	f7fe fcee 	bl	800173c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0f2      	b.n	8002f54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d6e:	f7ff fbe8 	bl	8002542 <LL_RCC_IsActiveFlag_HPRE>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f1      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d016      	beq.n	8002db2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff faf2 	bl	8002372 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d8e:	f7fe fcd5 	bl	800173c <HAL_GetTick>
 8002d92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d96:	f7fe fcd1 	bl	800173c <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e0d5      	b.n	8002f54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002da8:	f7ff fbdd 	bl	8002566 <LL_RCC_IsActiveFlag_C2HPRE>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f1      	beq.n	8002d96 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d016      	beq.n	8002dec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff faeb 	bl	800239e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dc8:	f7fe fcb8 	bl	800173c <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dd0:	f7fe fcb4 	bl	800173c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0b8      	b.n	8002f54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002de2:	f7ff fbd3 	bl	800258c <LL_RCC_IsActiveFlag_SHDHPRE>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f1      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d016      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fae5 	bl	80023cc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e02:	f7fe fc9b 	bl	800173c <HAL_GetTick>
 8002e06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e0a:	f7fe fc97 	bl	800173c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e09b      	b.n	8002f54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e1c:	f7ff fbc9 	bl	80025b2 <LL_RCC_IsActiveFlag_PPRE1>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f1      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d017      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fadb 	bl	80023f4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e3e:	f7fe fc7d 	bl	800173c <HAL_GetTick>
 8002e42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e46:	f7fe fc79 	bl	800173c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e07d      	b.n	8002f54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e58:	f7ff fbbd 	bl	80025d6 <LL_RCC_IsActiveFlag_PPRE2>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f1      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d043      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d106      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002e76:	f7ff f87b 	bl	8001f70 <LL_RCC_HSE_IsReady>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d11e      	bne.n	8002ebe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e067      	b.n	8002f54 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002e8c:	f7ff fb16 	bl	80024bc <LL_RCC_PLL_IsReady>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d113      	bne.n	8002ebe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e05c      	b.n	8002f54 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002ea2:	f7ff f9e3 	bl	800226c <LL_RCC_MSI_IsReady>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d108      	bne.n	8002ebe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e051      	b.n	8002f54 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002eb0:	f7ff f88e 	bl	8001fd0 <LL_RCC_HSI_IsReady>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e04a      	b.n	8002f54 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fa21 	bl	800230a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec8:	f7fe fc38 	bl	800173c <HAL_GetTick>
 8002ecc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed0:	f7fe fc34 	bl	800173c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e036      	b.n	8002f54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	f7ff fa24 	bl	8002332 <LL_RCC_GetSysClkSource>
 8002eea:	4602      	mov	r2, r0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d1ec      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef6:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_ClockConfig+0x278>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d21b      	bcs.n	8002f3c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f04:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_RCC_ClockConfig+0x278>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 0207 	bic.w	r2, r3, #7
 8002f0c:	4913      	ldr	r1, [pc, #76]	; (8002f5c <HAL_RCC_ClockConfig+0x278>)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f14:	f7fe fc12 	bl	800173c <HAL_GetTick>
 8002f18:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f1c:	f7fe fc0e 	bl	800173c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e012      	b.n	8002f54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_ClockConfig+0x278>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d1ef      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f3c:	f000 f87e 	bl	800303c <HAL_RCC_GetHCLKFreq>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <HAL_RCC_ClockConfig+0x27c>)
 8002f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002f46:	f7fe fc05 	bl	8001754 <HAL_GetTickPrio>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe fba7 	bl	80016a0 <HAL_InitTick>
 8002f52:	4603      	mov	r3, r0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	58004000 	.word	0x58004000
 8002f60:	20000188 	.word	0x20000188

08002f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f6a:	f7ff f9e2 	bl	8002332 <LL_RCC_GetSysClkSource>
 8002f6e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f76:	f7ff f99e 	bl	80022b6 <LL_RCC_MSI_GetRange>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	4a2b      	ldr	r2, [pc, #172]	; (8003030 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	e04b      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d102      	bne.n	8002f98 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f92:	4b28      	ldr	r3, [pc, #160]	; (8003034 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	e045      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d10a      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f9e:	f7fe ffb7 	bl	8001f10 <LL_RCC_HSE_IsEnabledDiv2>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d102      	bne.n	8002fae <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002fa8:	4b22      	ldr	r3, [pc, #136]	; (8003034 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e03a      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002fae:	4b22      	ldr	r3, [pc, #136]	; (8003038 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e037      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002fb4:	f7ff fab9 	bl	800252a <LL_RCC_PLL_GetMainSource>
 8002fb8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d003      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x64>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d003      	beq.n	8002fce <HAL_RCC_GetSysClockFreq+0x6a>
 8002fc6:	e00d      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fca:	60bb      	str	r3, [r7, #8]
        break;
 8002fcc:	e015      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002fce:	f7fe ff9f 	bl	8001f10 <LL_RCC_HSE_IsEnabledDiv2>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d102      	bne.n	8002fde <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002fd8:	4b16      	ldr	r3, [pc, #88]	; (8003034 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fda:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002fdc:	e00d      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002fe0:	60bb      	str	r3, [r7, #8]
        break;
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002fe4:	f7ff f967 	bl	80022b6 <LL_RCC_MSI_GetRange>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff6:	60bb      	str	r3, [r7, #8]
        break;
 8002ff8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002ffa:	f7ff fa71 	bl	80024e0 <LL_RCC_PLL_GetN>
 8002ffe:	4602      	mov	r2, r0
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	fb03 f402 	mul.w	r4, r3, r2
 8003006:	f7ff fa84 	bl	8002512 <LL_RCC_PLL_GetDivider>
 800300a:	4603      	mov	r3, r0
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	3301      	adds	r3, #1
 8003010:	fbb4 f4f3 	udiv	r4, r4, r3
 8003014:	f7ff fa71 	bl	80024fa <LL_RCC_PLL_GetR>
 8003018:	4603      	mov	r3, r0
 800301a:	0f5b      	lsrs	r3, r3, #29
 800301c:	3301      	adds	r3, #1
 800301e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003022:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003024:	68fb      	ldr	r3, [r7, #12]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	bd90      	pop	{r4, r7, pc}
 800302e:	bf00      	nop
 8003030:	08009450 	.word	0x08009450
 8003034:	00f42400 	.word	0x00f42400
 8003038:	01e84800 	.word	0x01e84800

0800303c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800303c:	b598      	push	{r3, r4, r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003040:	f7ff ff90 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8003044:	4604      	mov	r4, r0
 8003046:	f7ff f9e9 	bl	800241c <LL_RCC_GetAHBPrescaler>
 800304a:	4603      	mov	r3, r0
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	4a03      	ldr	r2, [pc, #12]	; (8003060 <HAL_RCC_GetHCLKFreq+0x24>)
 8003054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003058:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd98      	pop	{r3, r4, r7, pc}
 8003060:	080093f0 	.word	0x080093f0

08003064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003064:	b598      	push	{r3, r4, r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003068:	f7ff ffe8 	bl	800303c <HAL_RCC_GetHCLKFreq>
 800306c:	4604      	mov	r4, r0
 800306e:	f7ff f9ef 	bl	8002450 <LL_RCC_GetAPB1Prescaler>
 8003072:	4603      	mov	r3, r0
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	4a04      	ldr	r2, [pc, #16]	; (800308c <HAL_RCC_GetPCLK1Freq+0x28>)
 800307c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd98      	pop	{r3, r4, r7, pc}
 800308c:	08009430 	.word	0x08009430

08003090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003090:	b598      	push	{r3, r4, r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003094:	f7ff ffd2 	bl	800303c <HAL_RCC_GetHCLKFreq>
 8003098:	4604      	mov	r4, r0
 800309a:	f7ff f9e5 	bl	8002468 <LL_RCC_GetAPB2Prescaler>
 800309e:	4603      	mov	r3, r0
 80030a0:	0adb      	lsrs	r3, r3, #11
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd98      	pop	{r3, r4, r7, pc}
 80030b8:	08009430 	.word	0x08009430

080030bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2bb0      	cmp	r3, #176	; 0xb0
 80030c8:	d903      	bls.n	80030d2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e007      	b.n	80030e2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	4a11      	ldr	r2, [pc, #68]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80030dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80030e2:	f7ff f9a7 	bl	8002434 <LL_RCC_GetAHB4Prescaler>
 80030e6:	4603      	mov	r3, r0
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80030f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	0c9c      	lsrs	r4, r3, #18
 8003106:	f7fe fef5 	bl	8001ef4 <HAL_PWREx_GetVoltageRange>
 800310a:	4603      	mov	r3, r0
 800310c:	4619      	mov	r1, r3
 800310e:	4620      	mov	r0, r4
 8003110:	f000 f80c 	bl	800312c <RCC_SetFlashLatency>
 8003114:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	bd90      	pop	{r4, r7, pc}
 800311e:	bf00      	nop
 8003120:	08009450 	.word	0x08009450
 8003124:	080093f0 	.word	0x080093f0
 8003128:	431bde83 	.word	0x431bde83

0800312c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b093      	sub	sp, #76	; 0x4c
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003136:	4b37      	ldr	r3, [pc, #220]	; (8003214 <RCC_SetFlashLatency+0xe8>)
 8003138:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800313c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800313e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003142:	4a35      	ldr	r2, [pc, #212]	; (8003218 <RCC_SetFlashLatency+0xec>)
 8003144:	f107 031c 	add.w	r3, r7, #28
 8003148:	ca07      	ldmia	r2, {r0, r1, r2}
 800314a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800314e:	4b33      	ldr	r3, [pc, #204]	; (800321c <RCC_SetFlashLatency+0xf0>)
 8003150:	f107 040c 	add.w	r4, r7, #12
 8003154:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003156:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800315a:	2300      	movs	r3, #0
 800315c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003164:	d11a      	bne.n	800319c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003166:	2300      	movs	r3, #0
 8003168:	643b      	str	r3, [r7, #64]	; 0x40
 800316a:	e013      	b.n	8003194 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800316c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	3348      	adds	r3, #72	; 0x48
 8003172:	443b      	add	r3, r7
 8003174:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	429a      	cmp	r2, r3
 800317c:	d807      	bhi.n	800318e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800317e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	3348      	adds	r3, #72	; 0x48
 8003184:	443b      	add	r3, r7
 8003186:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800318a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800318c:	e020      	b.n	80031d0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800318e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003190:	3301      	adds	r3, #1
 8003192:	643b      	str	r3, [r7, #64]	; 0x40
 8003194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003196:	2b03      	cmp	r3, #3
 8003198:	d9e8      	bls.n	800316c <RCC_SetFlashLatency+0x40>
 800319a:	e019      	b.n	80031d0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800319c:	2300      	movs	r3, #0
 800319e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a0:	e013      	b.n	80031ca <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80031a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	3348      	adds	r3, #72	; 0x48
 80031a8:	443b      	add	r3, r7
 80031aa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d807      	bhi.n	80031c4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80031b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	3348      	adds	r3, #72	; 0x48
 80031ba:	443b      	add	r3, r7
 80031bc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80031c0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80031c2:	e005      	b.n	80031d0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80031c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c6:	3301      	adds	r3, #1
 80031c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d9e8      	bls.n	80031a2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80031d0:	4b13      	ldr	r3, [pc, #76]	; (8003220 <RCC_SetFlashLatency+0xf4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f023 0207 	bic.w	r2, r3, #7
 80031d8:	4911      	ldr	r1, [pc, #68]	; (8003220 <RCC_SetFlashLatency+0xf4>)
 80031da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031e0:	f7fe faac 	bl	800173c <HAL_GetTick>
 80031e4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80031e6:	e008      	b.n	80031fa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80031e8:	f7fe faa8 	bl	800173c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e007      	b.n	800320a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <RCC_SetFlashLatency+0xf4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003204:	429a      	cmp	r2, r3
 8003206:	d1ef      	bne.n	80031e8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	374c      	adds	r7, #76	; 0x4c
 800320e:	46bd      	mov	sp, r7
 8003210:	bd90      	pop	{r4, r7, pc}
 8003212:	bf00      	nop
 8003214:	08005e34 	.word	0x08005e34
 8003218:	08005e44 	.word	0x08005e44
 800321c:	08005e50 	.word	0x08005e50
 8003220:	58004000 	.word	0x58004000

08003224 <LL_RCC_LSE_IsEnabled>:
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <LL_RCC_LSE_IsEnabled+0x18>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <LL_RCC_LSE_IsEnabled+0x1a>
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_RCC_LSE_IsReady>:
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800324c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b02      	cmp	r3, #2
 800325a:	d101      	bne.n	8003260 <LL_RCC_LSE_IsReady+0x18>
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <LL_RCC_LSE_IsReady+0x1a>
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_RCC_MSI_EnablePLLMode>:
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800327a:	f043 0304 	orr.w	r3, r3, #4
 800327e:	6013      	str	r3, [r2, #0]
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <LL_RCC_SetRFWKPClockSource>:
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800329a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800329e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <LL_RCC_SetSMPSClockSource>:
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80032be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f023 0203 	bic.w	r2, r3, #3
 80032c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LL_RCC_SetSMPSPrescaler>:
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80032e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <LL_RCC_SetUSARTClockSource>:
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f023 0203 	bic.w	r2, r3, #3
 800331a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <LL_RCC_SetLPUARTClockSource>:
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800333a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <LL_RCC_SetI2CClockSource>:
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003376:	43db      	mvns	r3, r3
 8003378:	401a      	ands	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_RCC_SetLPTIMClockSource>:
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80033a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	0c1b      	lsrs	r3, r3, #16
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	43db      	mvns	r3, r3
 80033b0:	401a      	ands	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_RCC_SetSAIClockSource>:
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80033d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <LL_RCC_SetRNGClockSource>:
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003408:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800340c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <LL_RCC_SetCLK48ClockSource>:
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800342c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003438:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <LL_RCC_SetUSBClockSource>:
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ffe3 	bl	8003424 <LL_RCC_SetCLK48ClockSource>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <LL_RCC_SetADCClockSource>:
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800346e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800347a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <LL_RCC_SetRTCClockSource>:
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800349a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <LL_RCC_GetRTCClockSource>:
{
 80034be:	b480      	push	{r7}
 80034c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80034c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <LL_RCC_ForceBackupDomainReset>:
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_RCC_ReleaseBackupDomainReset>:
{
 80034fa:	b480      	push	{r7}
 80034fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800350a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003512:	bf00      	nop
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <LL_RCC_PLLSAI1_Enable>:
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800352a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800352e:	6013      	str	r3, [r2, #0]
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <LL_RCC_PLLSAI1_Disable>:
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800353e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003548:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800354c:	6013      	str	r3, [r2, #0]
}
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_RCC_PLLSAI1_IsReady>:
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800355c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800356a:	d101      	bne.n	8003570 <LL_RCC_PLLSAI1_IsReady+0x18>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003584:	2300      	movs	r3, #0
 8003586:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003588:	2300      	movs	r3, #0
 800358a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003594:	2b00      	cmp	r3, #0
 8003596:	d034      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035a0:	d021      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80035a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035a6:	d81b      	bhi.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ac:	d01d      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80035ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b2:	d815      	bhi.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00b      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80035b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035bc:	d110      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80035be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80035ce:	e00d      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3304      	adds	r3, #4
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 f94d 	bl	8003874 <RCCEx_PLLSAI1_ConfigNP>
 80035da:	4603      	mov	r3, r0
 80035dc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80035de:	e005      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	77fb      	strb	r3, [r7, #31]
        break;
 80035e4:	e002      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80035e6:	bf00      	nop
 80035e8:	e000      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80035ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ec:	7ffb      	ldrb	r3, [r7, #31]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d105      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fee8 	bl	80033cc <LL_RCC_SetSAIClockSource>
 80035fc:	e001      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fe:	7ffb      	ldrb	r3, [r7, #31]
 8003600:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360a:	2b00      	cmp	r3, #0
 800360c:	d046      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800360e:	f7ff ff56 	bl	80034be <LL_RCC_GetRTCClockSource>
 8003612:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	429a      	cmp	r2, r3
 800361c:	d03c      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800361e:	f7fe fc59 	bl	8001ed4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d105      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff ff30 	bl	8003492 <LL_RCC_SetRTCClockSource>
 8003632:	e02e      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800363e:	f7ff ff4b 	bl	80034d8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003642:	f7ff ff5a 	bl	80034fa <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800365e:	f7ff fde1 	bl	8003224 <LL_RCC_LSE_IsEnabled>
 8003662:	4603      	mov	r3, r0
 8003664:	2b01      	cmp	r3, #1
 8003666:	d114      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003668:	f7fe f868 	bl	800173c <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800366e:	e00b      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003670:	f7fe f864 	bl	800173c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d902      	bls.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	77fb      	strb	r3, [r7, #31]
              break;
 8003686:	e004      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003688:	f7ff fdde 	bl	8003248 <LL_RCC_LSE_IsReady>
 800368c:	4603      	mov	r3, r0
 800368e:	2b01      	cmp	r3, #1
 8003690:	d1ee      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003692:	7ffb      	ldrb	r3, [r7, #31]
 8003694:	77bb      	strb	r3, [r7, #30]
 8003696:	e001      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	7ffb      	ldrb	r3, [r7, #31]
 800369a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fe2a 	bl	8003306 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d004      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fe35 	bl	8003332 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d004      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fe5d 	bl	8003398 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d004      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fe52 	bl	8003398 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d004      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff fe2a 	bl	800335e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d004      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fe1f 	bl	800335e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d022      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fe8d 	bl	8003450 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800373e:	d107      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800374a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800374e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003754:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003758:	d10b      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3304      	adds	r3, #4
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f8e3 	bl	800392a <RCCEx_PLLSAI1_ConfigNQ>
 8003764:	4603      	mov	r3, r0
 8003766:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003768:	7ffb      	ldrb	r3, [r7, #31]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800376e:	7ffb      	ldrb	r3, [r7, #31]
 8003770:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377a:	2b00      	cmp	r3, #0
 800377c:	d02b      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003786:	d008      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003790:	d003      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	2b00      	cmp	r3, #0
 8003798:	d105      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fe2a 	bl	80033f8 <LL_RCC_SetRNGClockSource>
 80037a4:	e00a      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x240>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	2000      	movs	r0, #0
 80037b2:	f7ff fe21 	bl	80033f8 <LL_RCC_SetRNGClockSource>
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff fe34 	bl	8003424 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80037c4:	d107      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80037c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037d4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d022      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fe3d 	bl	8003466 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037f4:	d107      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003804:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800380e:	d10b      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f8e3 	bl	80039e0 <RCCEx_PLLSAI1_ConfigNR>
 800381a:	4603      	mov	r3, r0
 800381c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800381e:	7ffb      	ldrb	r3, [r7, #31]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003824:	7ffb      	ldrb	r3, [r7, #31]
 8003826:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fd26 	bl	800328a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fd45 	bl	80032de <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fd2c 	bl	80032b6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800385e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3720      	adds	r7, #32
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800386c:	f7ff fcfe 	bl	800326c <LL_RCC_MSI_EnablePLLMode>
}
 8003870:	bf00      	nop
 8003872:	bd80      	pop	{r7, pc}

08003874 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003880:	f7ff fe5b 	bl	800353a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003884:	f7fd ff5a 	bl	800173c <HAL_GetTick>
 8003888:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800388a:	e009      	b.n	80038a0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800388c:	f7fd ff56 	bl	800173c <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d902      	bls.n	80038a0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	73fb      	strb	r3, [r7, #15]
      break;
 800389e:	e004      	b.n	80038aa <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038a0:	f7ff fe5a 	bl	8003558 <LL_RCC_PLLSAI1_IsReady>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d137      	bne.n	8003920 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80038b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c4:	4313      	orrs	r3, r2
 80038c6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80038c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038da:	4313      	orrs	r3, r2
 80038dc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80038de:	f7ff fe1d 	bl	800351c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e2:	f7fd ff2b 	bl	800173c <HAL_GetTick>
 80038e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038e8:	e009      	b.n	80038fe <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ea:	f7fd ff27 	bl	800173c <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d902      	bls.n	80038fe <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	73fb      	strb	r3, [r7, #15]
        break;
 80038fc:	e004      	b.n	8003908 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038fe:	f7ff fe2b 	bl	8003558 <LL_RCC_PLLSAI1_IsReady>
 8003902:	4603      	mov	r3, r0
 8003904:	2b01      	cmp	r3, #1
 8003906:	d1f0      	bne.n	80038ea <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d108      	bne.n	8003920 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800390e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800391c:	4313      	orrs	r3, r2
 800391e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003936:	f7ff fe00 	bl	800353a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800393a:	f7fd feff 	bl	800173c <HAL_GetTick>
 800393e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003940:	e009      	b.n	8003956 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003942:	f7fd fefb 	bl	800173c <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d902      	bls.n	8003956 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	73fb      	strb	r3, [r7, #15]
      break;
 8003954:	e004      	b.n	8003960 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003956:	f7ff fdff 	bl	8003558 <LL_RCC_PLLSAI1_IsReady>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f0      	bne.n	8003942 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d137      	bne.n	80039d6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800397a:	4313      	orrs	r3, r2
 800397c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800397e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003990:	4313      	orrs	r3, r2
 8003992:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003994:	f7ff fdc2 	bl	800351c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003998:	f7fd fed0 	bl	800173c <HAL_GetTick>
 800399c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800399e:	e009      	b.n	80039b4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039a0:	f7fd fecc 	bl	800173c <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d902      	bls.n	80039b4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	73fb      	strb	r3, [r7, #15]
        break;
 80039b2:	e004      	b.n	80039be <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039b4:	f7ff fdd0 	bl	8003558 <LL_RCC_PLLSAI1_IsReady>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d1f0      	bne.n	80039a0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d108      	bne.n	80039d6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80039c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d2:	4313      	orrs	r3, r2
 80039d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80039ec:	f7ff fda5 	bl	800353a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039f0:	f7fd fea4 	bl	800173c <HAL_GetTick>
 80039f4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039f6:	e009      	b.n	8003a0c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039f8:	f7fd fea0 	bl	800173c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d902      	bls.n	8003a0c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	73fb      	strb	r3, [r7, #15]
      break;
 8003a0a:	e004      	b.n	8003a16 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a0c:	f7ff fda4 	bl	8003558 <LL_RCC_PLLSAI1_IsReady>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d137      	bne.n	8003a8c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a30:	4313      	orrs	r3, r2
 8003a32:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a46:	4313      	orrs	r3, r2
 8003a48:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a4a:	f7ff fd67 	bl	800351c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4e:	f7fd fe75 	bl	800173c <HAL_GetTick>
 8003a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a54:	e009      	b.n	8003a6a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a56:	f7fd fe71 	bl	800173c <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d902      	bls.n	8003a6a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	73fb      	strb	r3, [r7, #15]
        break;
 8003a68:	e004      	b.n	8003a74 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a6a:	f7ff fd75 	bl	8003558 <LL_RCC_PLLSAI1_IsReady>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d1f0      	bne.n	8003a56 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d108      	bne.n	8003a8c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e09f      	b.n	8003bea <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd fbe0 	bl	8001284 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003acc:	4b49      	ldr	r3, [pc, #292]	; (8003bf4 <HAL_RTC_Init+0x15c>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d07e      	beq.n	8003bd6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	22ca      	movs	r2, #202	; 0xca
 8003ade:	625a      	str	r2, [r3, #36]	; 0x24
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2253      	movs	r2, #83	; 0x53
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fa1d 	bl	8003f28 <RTC_EnterInitMode>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	22ff      	movs	r2, #255	; 0xff
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2204      	movs	r2, #4
 8003b00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
 8003b08:	e067      	b.n	8003bda <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6899      	ldr	r1, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	68d2      	ldr	r2, [r2, #12]
 8003b44:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6919      	ldr	r1, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	041a      	lsls	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b68:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0203 	bic.w	r2, r2, #3
 8003b78:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d113      	bne.n	8003bc8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f99b 	bl	8003edc <HAL_RTC_WaitForSynchro>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00d      	beq.n	8003bc8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	22ff      	movs	r2, #255	; 0xff
 8003bb2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e010      	b.n	8003bea <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	22ff      	movs	r2, #255	; 0xff
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	73fb      	strb	r3, [r7, #15]
 8003bd4:	e001      	b.n	8003bda <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d103      	bne.n	8003be8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40002800 	.word	0x40002800

08003bf8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_RTC_SetTime+0x1a>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e0b2      	b.n	8003d78 <HAL_RTC_SetTime+0x180>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d126      	bne.n	8003c76 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 f99b 	bl	8003f7c <RTC_ByteToBcd2>
 8003c46:	4603      	mov	r3, r0
 8003c48:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	785b      	ldrb	r3, [r3, #1]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f994 	bl	8003f7c <RTC_ByteToBcd2>
 8003c54:	4603      	mov	r3, r0
 8003c56:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003c58:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	789b      	ldrb	r3, [r3, #2]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 f98c 	bl	8003f7c <RTC_ByteToBcd2>
 8003c64:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003c66:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	78db      	ldrb	r3, [r3, #3]
 8003c6e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	e018      	b.n	8003ca8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2200      	movs	r2, #0
 8003c88:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	785b      	ldrb	r3, [r3, #1]
 8003c94:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003c96:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003c9c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	78db      	ldrb	r3, [r3, #3]
 8003ca2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	22ca      	movs	r2, #202	; 0xca
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2253      	movs	r2, #83	; 0x53
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f935 	bl	8003f28 <RTC_EnterInitMode>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	22ff      	movs	r2, #255	; 0xff
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2204      	movs	r2, #4
 8003cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e04b      	b.n	8003d78 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003cea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003cee:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cfe:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6899      	ldr	r1, [r3, #8]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d26:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d113      	bne.n	8003d5e <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f8d0 	bl	8003edc <HAL_RTC_WaitForSynchro>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00d      	beq.n	8003d5e <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	22ff      	movs	r2, #255	; 0xff
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e00c      	b.n	8003d78 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	22ff      	movs	r2, #255	; 0xff
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003d76:	2300      	movs	r3, #0
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd90      	pop	{r4, r7, pc}

08003d80 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_RTC_SetDate+0x1a>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e09c      	b.n	8003ed4 <HAL_RTC_SetDate+0x154>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2202      	movs	r2, #2
 8003da6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10e      	bne.n	8003dce <HAL_RTC_SetDate+0x4e>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	785b      	ldrb	r3, [r3, #1]
 8003dc0:	f023 0310 	bic.w	r3, r3, #16
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	330a      	adds	r3, #10
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d11c      	bne.n	8003e0e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	78db      	ldrb	r3, [r3, #3]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 f8cf 	bl	8003f7c <RTC_ByteToBcd2>
 8003dde:	4603      	mov	r3, r0
 8003de0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	785b      	ldrb	r3, [r3, #1]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f8c8 	bl	8003f7c <RTC_ByteToBcd2>
 8003dec:	4603      	mov	r3, r0
 8003dee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003df0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	789b      	ldrb	r3, [r3, #2]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 f8c0 	bl	8003f7c <RTC_ByteToBcd2>
 8003dfc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003dfe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	e00e      	b.n	8003e2c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	78db      	ldrb	r3, [r3, #3]
 8003e12:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	785b      	ldrb	r3, [r3, #1]
 8003e18:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003e1a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003e20:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	22ca      	movs	r2, #202	; 0xca
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2253      	movs	r2, #83	; 0x53
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f873 	bl	8003f28 <RTC_EnterInitMode>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00d      	beq.n	8003e64 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	22ff      	movs	r2, #255	; 0xff
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2204      	movs	r2, #4
 8003e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e037      	b.n	8003ed4 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e6e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e72:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e82:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d113      	bne.n	8003eba <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f822 	bl	8003edc <HAL_RTC_WaitForSynchro>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00d      	beq.n	8003eba <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	22ff      	movs	r2, #255	; 0xff
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e00c      	b.n	8003ed4 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	22ff      	movs	r2, #255	; 0xff
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
  }
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd90      	pop	{r4, r7, pc}

08003edc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ef2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003ef4:	f7fd fc22 	bl	800173c <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003efa:	e009      	b.n	8003f10 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003efc:	f7fd fc1e 	bl	800173c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f0a:	d901      	bls.n	8003f10 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e007      	b.n	8003f20 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0ee      	beq.n	8003efc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d119      	bne.n	8003f72 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f04f 32ff 	mov.w	r2, #4294967295
 8003f46:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003f48:	f7fd fbf8 	bl	800173c <HAL_GetTick>
 8003f4c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f4e:	e009      	b.n	8003f64 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003f50:	f7fd fbf4 	bl	800173c <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f5e:	d901      	bls.n	8003f64 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e007      	b.n	8003f74 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0ee      	beq.n	8003f50 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8003f8e:	e005      	b.n	8003f9c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3301      	adds	r3, #1
 8003f94:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003f96:	7afb      	ldrb	r3, [r7, #11]
 8003f98:	3b0a      	subs	r3, #10
 8003f9a:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8003f9c:	7afb      	ldrb	r3, [r7, #11]
 8003f9e:	2b09      	cmp	r3, #9
 8003fa0:	d8f6      	bhi.n	8003f90 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	7afb      	ldrb	r3, [r7, #11]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	b2db      	uxtb	r3, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e0a8      	b.n	8004128 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	22ca      	movs	r2, #202	; 0xca
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2253      	movs	r2, #83	; 0x53
 8003ff4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d020      	beq.n	8004046 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8004004:	f7fd fb9a 	bl	800173c <HAL_GetTick>
 8004008:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800400a:	e015      	b.n	8004038 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800400c:	f7fd fb96 	bl	800173c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800401a:	d90d      	bls.n	8004038 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	22ff      	movs	r2, #255	; 0xff
 8004022:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2203      	movs	r2, #3
 8004028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e077      	b.n	8004128 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e2      	bne.n	800400c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004054:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004066:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004068:	f7fd fb68 	bl	800173c <HAL_GetTick>
 800406c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800406e:	e015      	b.n	800409c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004070:	f7fd fb64 	bl	800173c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800407e:	d90d      	bls.n	800409c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	22ff      	movs	r2, #255	; 0xff
 8004086:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2203      	movs	r2, #3
 800408c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e045      	b.n	8004128 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0e2      	beq.n	8004070 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0207 	bic.w	r2, r2, #7
 80040c0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6899      	ldr	r1, [r3, #8]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80040d2:	4b17      	ldr	r3, [pc, #92]	; (8004130 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80040d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80040da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80040e2:	4b13      	ldr	r3, [pc, #76]	; (8004130 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a12      	ldr	r2, [pc, #72]	; (8004130 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80040e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040ec:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040fc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800410c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	22ff      	movs	r2, #255	; 0xff
 8004114:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	58000800 	.word	0x58000800

08004134 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc fa16 	bl	800057c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	b2da      	uxtb	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004160:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8004164:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004168:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	58000800 	.word	0x58000800

08004180 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e095      	b.n	80042be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2b00      	cmp	r3, #0
 8004198:	d108      	bne.n	80041ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a2:	d009      	beq.n	80041b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	61da      	str	r2, [r3, #28]
 80041aa:	e005      	b.n	80041b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fd f882 	bl	80012dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041f8:	d902      	bls.n	8004200 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	e002      	b.n	8004206 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004204:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800420e:	d007      	beq.n	8004220 <HAL_SPI_Init+0xa0>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004218:	d002      	beq.n	8004220 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	ea42 0103 	orr.w	r1, r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	f003 0204 	and.w	r2, r3, #4
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800429c:	ea42 0103 	orr.w	r1, r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b088      	sub	sp, #32
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	4613      	mov	r3, r2
 80042d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_SPI_Transmit+0x22>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e15f      	b.n	80045a8 <HAL_SPI_Transmit+0x2e2>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042f0:	f7fd fa24 	bl	800173c <HAL_GetTick>
 80042f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d002      	beq.n	800430c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004306:	2302      	movs	r3, #2
 8004308:	77fb      	strb	r3, [r7, #31]
    goto error;
 800430a:	e148      	b.n	800459e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_SPI_Transmit+0x52>
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800431c:	e13f      	b.n	800459e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2203      	movs	r2, #3
 8004322:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	88fa      	ldrh	r2, [r7, #6]
 8004336:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004368:	d10f      	bne.n	800438a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004378:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004388:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d007      	beq.n	80043a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b0:	d94f      	bls.n	8004452 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <HAL_SPI_Transmit+0xfa>
 80043ba:	8afb      	ldrh	r3, [r7, #22]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d142      	bne.n	8004446 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	881a      	ldrh	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	1c9a      	adds	r2, r3, #2
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043e4:	e02f      	b.n	8004446 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d112      	bne.n	800441a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	881a      	ldrh	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	1c9a      	adds	r2, r3, #2
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004418:	e015      	b.n	8004446 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800441a:	f7fd f98f 	bl	800173c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d803      	bhi.n	8004432 <HAL_SPI_Transmit+0x16c>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004430:	d102      	bne.n	8004438 <HAL_SPI_Transmit+0x172>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d106      	bne.n	8004446 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004444:	e0ab      	b.n	800459e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1ca      	bne.n	80043e6 <HAL_SPI_Transmit+0x120>
 8004450:	e080      	b.n	8004554 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <HAL_SPI_Transmit+0x19a>
 800445a:	8afb      	ldrh	r3, [r7, #22]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d174      	bne.n	800454a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d912      	bls.n	8004490 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	881a      	ldrh	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	1c9a      	adds	r2, r3, #2
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b02      	subs	r3, #2
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800448e:	e05c      	b.n	800454a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80044b6:	e048      	b.n	800454a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d12b      	bne.n	800451e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d912      	bls.n	80044f6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	881a      	ldrh	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	1c9a      	adds	r2, r3, #2
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b02      	subs	r3, #2
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044f4:	e029      	b.n	800454a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	7812      	ldrb	r2, [r2, #0]
 8004502:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800451c:	e015      	b.n	800454a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800451e:	f7fd f90d 	bl	800173c <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d803      	bhi.n	8004536 <HAL_SPI_Transmit+0x270>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004534:	d102      	bne.n	800453c <HAL_SPI_Transmit+0x276>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004548:	e029      	b.n	800459e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1b1      	bne.n	80044b8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	6839      	ldr	r1, [r7, #0]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f947 	bl	80047ec <SPI_EndRxTxTransaction>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10a      	bne.n	8004588 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004572:	2300      	movs	r3, #0
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e003      	b.n	800459e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3720      	adds	r7, #32
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045c0:	f7fd f8bc 	bl	800173c <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	4413      	add	r3, r2
 80045ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045d0:	f7fd f8b4 	bl	800173c <HAL_GetTick>
 80045d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045d6:	4b39      	ldr	r3, [pc, #228]	; (80046bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	015b      	lsls	r3, r3, #5
 80045dc:	0d1b      	lsrs	r3, r3, #20
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	fb02 f303 	mul.w	r3, r2, r3
 80045e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045e6:	e054      	b.n	8004692 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d050      	beq.n	8004692 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045f0:	f7fd f8a4 	bl	800173c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d902      	bls.n	8004606 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d13d      	bne.n	8004682 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004614:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461e:	d111      	bne.n	8004644 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004628:	d004      	beq.n	8004634 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004632:	d107      	bne.n	8004644 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004642:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464c:	d10f      	bne.n	800466e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800466c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e017      	b.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	3b01      	subs	r3, #1
 8004690:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4013      	ands	r3, r2
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	429a      	cmp	r2, r3
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d19b      	bne.n	80045e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000188 	.word	0x20000188

080046c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	; 0x28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046d2:	f7fd f833 	bl	800173c <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	4413      	add	r3, r2
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80046e2:	f7fd f82b 	bl	800173c <HAL_GetTick>
 80046e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	330c      	adds	r3, #12
 80046ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046f0:	4b3d      	ldr	r3, [pc, #244]	; (80047e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	00da      	lsls	r2, r3, #3
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	0d1b      	lsrs	r3, r3, #20
 8004700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004708:	e060      	b.n	80047cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004710:	d107      	bne.n	8004722 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d104      	bne.n	8004722 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004720:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d050      	beq.n	80047cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800472a:	f7fd f807 	bl	800173c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004736:	429a      	cmp	r2, r3
 8004738:	d902      	bls.n	8004740 <SPI_WaitFifoStateUntilTimeout+0x80>
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	2b00      	cmp	r3, #0
 800473e:	d13d      	bne.n	80047bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800474e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004758:	d111      	bne.n	800477e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004762:	d004      	beq.n	800476e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476c:	d107      	bne.n	800477e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004786:	d10f      	bne.n	80047a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e010      	b.n	80047de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4013      	ands	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d196      	bne.n	800470a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3728      	adds	r7, #40	; 0x28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000188 	.word	0x20000188

080047ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2200      	movs	r2, #0
 8004800:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7ff ff5b 	bl	80046c0 <SPI_WaitFifoStateUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e027      	b.n	8004870 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2200      	movs	r2, #0
 8004828:	2180      	movs	r1, #128	; 0x80
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7ff fec0 	bl	80045b0 <SPI_WaitFlagStateUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483a:	f043 0220 	orr.w	r2, r3, #32
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e014      	b.n	8004870 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2200      	movs	r2, #0
 800484e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff ff34 	bl	80046c0 <SPI_WaitFifoStateUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004862:	f043 0220 	orr.w	r2, r3, #32
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e000      	b.n	8004870 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <LL_RCC_GetUSARTClockSource>:
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004884:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4013      	ands	r3, r2
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <LL_RCC_GetLPUARTClockSource>:
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80048a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4013      	ands	r3, r2
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e042      	b.n	8004950 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d106      	bne.n	80048e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7fc fd2d 	bl	800133c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2224      	movs	r2, #36	; 0x24
 80048e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0201 	bic.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fa50 	bl	8004da8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f825 	bl	8004958 <UART_SetConfig>
 800490e:	4603      	mov	r3, r0
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e01b      	b.n	8004950 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 facf 	bl	8004eec <UART_CheckIdleState>
 800494e:	4603      	mov	r3, r0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800495c:	b08c      	sub	sp, #48	; 0x30
 800495e:	af00      	add	r7, sp, #0
 8004960:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	431a      	orrs	r2, r3
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	431a      	orrs	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	4313      	orrs	r3, r2
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4baf      	ldr	r3, [pc, #700]	; (8004c44 <UART_SetConfig+0x2ec>)
 8004988:	4013      	ands	r3, r2
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004990:	430b      	orrs	r3, r1
 8004992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4aa4      	ldr	r2, [pc, #656]	; (8004c48 <UART_SetConfig+0x2f0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c0:	4313      	orrs	r3, r2
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80049ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	6812      	ldr	r2, [r2, #0]
 80049d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049d8:	430b      	orrs	r3, r1
 80049da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	f023 010f 	bic.w	r1, r3, #15
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a95      	ldr	r2, [pc, #596]	; (8004c4c <UART_SetConfig+0x2f4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d125      	bne.n	8004a48 <UART_SetConfig+0xf0>
 80049fc:	2003      	movs	r0, #3
 80049fe:	f7ff ff3b 	bl	8004878 <LL_RCC_GetUSARTClockSource>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d81b      	bhi.n	8004a40 <UART_SetConfig+0xe8>
 8004a08:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <UART_SetConfig+0xb8>)
 8004a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0e:	bf00      	nop
 8004a10:	08004a21 	.word	0x08004a21
 8004a14:	08004a31 	.word	0x08004a31
 8004a18:	08004a29 	.word	0x08004a29
 8004a1c:	08004a39 	.word	0x08004a39
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a26:	e042      	b.n	8004aae <UART_SetConfig+0x156>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a2e:	e03e      	b.n	8004aae <UART_SetConfig+0x156>
 8004a30:	2304      	movs	r3, #4
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a36:	e03a      	b.n	8004aae <UART_SetConfig+0x156>
 8004a38:	2308      	movs	r3, #8
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a3e:	e036      	b.n	8004aae <UART_SetConfig+0x156>
 8004a40:	2310      	movs	r3, #16
 8004a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a46:	e032      	b.n	8004aae <UART_SetConfig+0x156>
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a7e      	ldr	r2, [pc, #504]	; (8004c48 <UART_SetConfig+0x2f0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d12a      	bne.n	8004aa8 <UART_SetConfig+0x150>
 8004a52:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004a56:	f7ff ff1f 	bl	8004898 <LL_RCC_GetLPUARTClockSource>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a60:	d01a      	beq.n	8004a98 <UART_SetConfig+0x140>
 8004a62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a66:	d81b      	bhi.n	8004aa0 <UART_SetConfig+0x148>
 8004a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a6c:	d00c      	beq.n	8004a88 <UART_SetConfig+0x130>
 8004a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a72:	d815      	bhi.n	8004aa0 <UART_SetConfig+0x148>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <UART_SetConfig+0x128>
 8004a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7c:	d008      	beq.n	8004a90 <UART_SetConfig+0x138>
 8004a7e:	e00f      	b.n	8004aa0 <UART_SetConfig+0x148>
 8004a80:	2300      	movs	r3, #0
 8004a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a86:	e012      	b.n	8004aae <UART_SetConfig+0x156>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a8e:	e00e      	b.n	8004aae <UART_SetConfig+0x156>
 8004a90:	2304      	movs	r3, #4
 8004a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a96:	e00a      	b.n	8004aae <UART_SetConfig+0x156>
 8004a98:	2308      	movs	r3, #8
 8004a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a9e:	e006      	b.n	8004aae <UART_SetConfig+0x156>
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa6:	e002      	b.n	8004aae <UART_SetConfig+0x156>
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a65      	ldr	r2, [pc, #404]	; (8004c48 <UART_SetConfig+0x2f0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	f040 8097 	bne.w	8004be8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d823      	bhi.n	8004b0a <UART_SetConfig+0x1b2>
 8004ac2:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <UART_SetConfig+0x170>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004aed 	.word	0x08004aed
 8004acc:	08004b0b 	.word	0x08004b0b
 8004ad0:	08004af5 	.word	0x08004af5
 8004ad4:	08004b0b 	.word	0x08004b0b
 8004ad8:	08004afb 	.word	0x08004afb
 8004adc:	08004b0b 	.word	0x08004b0b
 8004ae0:	08004b0b 	.word	0x08004b0b
 8004ae4:	08004b0b 	.word	0x08004b0b
 8004ae8:	08004b03 	.word	0x08004b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aec:	f7fe faba 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8004af0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004af2:	e010      	b.n	8004b16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af4:	4b56      	ldr	r3, [pc, #344]	; (8004c50 <UART_SetConfig+0x2f8>)
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004af8:	e00d      	b.n	8004b16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afa:	f7fe fa33 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8004afe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b00:	e009      	b.n	8004b16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b08:	e005      	b.n	8004b16 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 812b 	beq.w	8004d74 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	4a4c      	ldr	r2, [pc, #304]	; (8004c54 <UART_SetConfig+0x2fc>)
 8004b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	4413      	add	r3, r2
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d305      	bcc.n	8004b4e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d903      	bls.n	8004b56 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b54:	e10e      	b.n	8004d74 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	2200      	movs	r2, #0
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	60fa      	str	r2, [r7, #12]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	4a3c      	ldr	r2, [pc, #240]	; (8004c54 <UART_SetConfig+0x2fc>)
 8004b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	603b      	str	r3, [r7, #0]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b78:	f7fb fb52 	bl	8000220 <__aeabi_uldivmod>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	020b      	lsls	r3, r1, #8
 8004b8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b92:	0202      	lsls	r2, r0, #8
 8004b94:	6979      	ldr	r1, [r7, #20]
 8004b96:	6849      	ldr	r1, [r1, #4]
 8004b98:	0849      	lsrs	r1, r1, #1
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	460c      	mov	r4, r1
 8004b9e:	4605      	mov	r5, r0
 8004ba0:	eb12 0804 	adds.w	r8, r2, r4
 8004ba4:	eb43 0905 	adc.w	r9, r3, r5
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	469a      	mov	sl, r3
 8004bb0:	4693      	mov	fp, r2
 8004bb2:	4652      	mov	r2, sl
 8004bb4:	465b      	mov	r3, fp
 8004bb6:	4640      	mov	r0, r8
 8004bb8:	4649      	mov	r1, r9
 8004bba:	f7fb fb31 	bl	8000220 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bcc:	d308      	bcc.n	8004be0 <UART_SetConfig+0x288>
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd4:	d204      	bcs.n	8004be0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6a3a      	ldr	r2, [r7, #32]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	e0c9      	b.n	8004d74 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004be6:	e0c5      	b.n	8004d74 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf0:	d16d      	bne.n	8004cce <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004bf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	2b07      	cmp	r3, #7
 8004bfa:	d82d      	bhi.n	8004c58 <UART_SetConfig+0x300>
 8004bfc:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <UART_SetConfig+0x2ac>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c25 	.word	0x08004c25
 8004c08:	08004c2d 	.word	0x08004c2d
 8004c0c:	08004c59 	.word	0x08004c59
 8004c10:	08004c33 	.word	0x08004c33
 8004c14:	08004c59 	.word	0x08004c59
 8004c18:	08004c59 	.word	0x08004c59
 8004c1c:	08004c59 	.word	0x08004c59
 8004c20:	08004c3b 	.word	0x08004c3b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c24:	f7fe fa34 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 8004c28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c2a:	e01b      	b.n	8004c64 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c2c:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <UART_SetConfig+0x2f8>)
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c30:	e018      	b.n	8004c64 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c32:	f7fe f997 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8004c36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c38:	e014      	b.n	8004c64 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c40:	e010      	b.n	8004c64 <UART_SetConfig+0x30c>
 8004c42:	bf00      	nop
 8004c44:	cfff69f3 	.word	0xcfff69f3
 8004c48:	40008000 	.word	0x40008000
 8004c4c:	40013800 	.word	0x40013800
 8004c50:	00f42400 	.word	0x00f42400
 8004c54:	08009490 	.word	0x08009490
      default:
        pclk = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 8084 	beq.w	8004d74 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	4a4b      	ldr	r2, [pc, #300]	; (8004da0 <UART_SetConfig+0x448>)
 8004c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c76:	461a      	mov	r2, r3
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c7e:	005a      	lsls	r2, r3, #1
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	085b      	lsrs	r3, r3, #1
 8004c86:	441a      	add	r2, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c90:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	2b0f      	cmp	r3, #15
 8004c96:	d916      	bls.n	8004cc6 <UART_SetConfig+0x36e>
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9e:	d212      	bcs.n	8004cc6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f023 030f 	bic.w	r3, r3, #15
 8004ca8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	085b      	lsrs	r3, r3, #1
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	8bfb      	ldrh	r3, [r7, #30]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	8bfa      	ldrh	r2, [r7, #30]
 8004cc2:	60da      	str	r2, [r3, #12]
 8004cc4:	e056      	b.n	8004d74 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ccc:	e052      	b.n	8004d74 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	2b07      	cmp	r3, #7
 8004cd6:	d822      	bhi.n	8004d1e <UART_SetConfig+0x3c6>
 8004cd8:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <UART_SetConfig+0x388>)
 8004cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cde:	bf00      	nop
 8004ce0:	08004d01 	.word	0x08004d01
 8004ce4:	08004d09 	.word	0x08004d09
 8004ce8:	08004d1f 	.word	0x08004d1f
 8004cec:	08004d0f 	.word	0x08004d0f
 8004cf0:	08004d1f 	.word	0x08004d1f
 8004cf4:	08004d1f 	.word	0x08004d1f
 8004cf8:	08004d1f 	.word	0x08004d1f
 8004cfc:	08004d17 	.word	0x08004d17
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d00:	f7fe f9c6 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 8004d04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d06:	e010      	b.n	8004d2a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d08:	4b26      	ldr	r3, [pc, #152]	; (8004da4 <UART_SetConfig+0x44c>)
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d0c:	e00d      	b.n	8004d2a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d0e:	f7fe f929 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8004d12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d14:	e009      	b.n	8004d2a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d1c:	e005      	b.n	8004d2a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d28:	bf00      	nop
    }

    if (pclk != 0U)
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d021      	beq.n	8004d74 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	4a1a      	ldr	r2, [pc, #104]	; (8004da0 <UART_SetConfig+0x448>)
 8004d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	085b      	lsrs	r3, r3, #1
 8004d48:	441a      	add	r2, r3
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	2b0f      	cmp	r3, #15
 8004d58:	d909      	bls.n	8004d6e <UART_SetConfig+0x416>
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d60:	d205      	bcs.n	8004d6e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60da      	str	r2, [r3, #12]
 8004d6c:	e002      	b.n	8004d74 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2200      	movs	r2, #0
 8004d88:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d90:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3730      	adds	r7, #48	; 0x30
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9e:	bf00      	nop
 8004da0:	08009490 	.word	0x08009490
 8004da4:	00f42400 	.word	0x00f42400

08004da8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01a      	beq.n	8004ebe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea6:	d10a      	bne.n	8004ebe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	605a      	str	r2, [r3, #4]
  }
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b098      	sub	sp, #96	; 0x60
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004efc:	f7fc fc1e 	bl	800173c <HAL_GetTick>
 8004f00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d12f      	bne.n	8004f70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f88e 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d022      	beq.n	8004f70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f3e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f48:	647b      	str	r3, [r7, #68]	; 0x44
 8004f4a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e6      	bne.n	8004f2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e063      	b.n	8005038 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d149      	bne.n	8005012 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f86:	2200      	movs	r2, #0
 8004f88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f857 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d03c      	beq.n	8005012 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8004fb8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e6      	bne.n	8004f98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3308      	adds	r3, #8
 8004fd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fea:	61fa      	str	r2, [r7, #28]
 8004fec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	69b9      	ldr	r1, [r7, #24]
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1e5      	bne.n	8004fca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e012      	b.n	8005038 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3758      	adds	r7, #88	; 0x58
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005050:	e04f      	b.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005058:	d04b      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800505a:	f7fc fb6f 	bl	800173c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	429a      	cmp	r2, r3
 8005068:	d302      	bcc.n	8005070 <UART_WaitOnFlagUntilTimeout+0x30>
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e04e      	b.n	8005112 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d037      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b80      	cmp	r3, #128	; 0x80
 8005086:	d034      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b40      	cmp	r3, #64	; 0x40
 800508c:	d031      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b08      	cmp	r3, #8
 800509a:	d110      	bne.n	80050be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2208      	movs	r2, #8
 80050a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f838 	bl	800511a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2208      	movs	r2, #8
 80050ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e029      	b.n	8005112 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050cc:	d111      	bne.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f81e 	bl	800511a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e00f      	b.n	8005112 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69da      	ldr	r2, [r3, #28]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4013      	ands	r3, r2
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	429a      	cmp	r2, r3
 8005100:	bf0c      	ite	eq
 8005102:	2301      	moveq	r3, #1
 8005104:	2300      	movne	r3, #0
 8005106:	b2db      	uxtb	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	429a      	cmp	r2, r3
 800510e:	d0a0      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800511a:	b480      	push	{r7}
 800511c:	b095      	sub	sp, #84	; 0x54
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005140:	643b      	str	r3, [r7, #64]	; 0x40
 8005142:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e6      	bne.n	8005122 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3308      	adds	r3, #8
 800515a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	61fb      	str	r3, [r7, #28]
   return(result);
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800516a:	f023 0301 	bic.w	r3, r3, #1
 800516e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3308      	adds	r3, #8
 8005176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005178:	62fa      	str	r2, [r7, #44]	; 0x2c
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800517e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e3      	bne.n	8005154 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d118      	bne.n	80051c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f023 0310 	bic.w	r3, r3, #16
 80051a8:	647b      	str	r3, [r7, #68]	; 0x44
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	6979      	ldr	r1, [r7, #20]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	613b      	str	r3, [r7, #16]
   return(result);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e6      	bne.n	8005194 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80051da:	bf00      	nop
 80051dc:	3754      	adds	r7, #84	; 0x54
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b085      	sub	sp, #20
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_UARTEx_DisableFifoMode+0x16>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e027      	b.n	800524c <HAL_UARTEx_DisableFifoMode+0x66>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2224      	movs	r2, #36	; 0x24
 8005208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800522a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800526c:	2302      	movs	r3, #2
 800526e:	e02d      	b.n	80052cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2224      	movs	r2, #36	; 0x24
 800527c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f84f 	bl	8005350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e02d      	b.n	8005348 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2224      	movs	r2, #36	; 0x24
 80052f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0201 	bic.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f811 	bl	8005350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800535c:	2b00      	cmp	r3, #0
 800535e:	d108      	bne.n	8005372 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005370:	e031      	b.n	80053d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005372:	2308      	movs	r3, #8
 8005374:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005376:	2308      	movs	r3, #8
 8005378:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	0e5b      	lsrs	r3, r3, #25
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	0f5b      	lsrs	r3, r3, #29
 8005392:	b2db      	uxtb	r3, r3
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800539a:	7bbb      	ldrb	r3, [r7, #14]
 800539c:	7b3a      	ldrb	r2, [r7, #12]
 800539e:	4911      	ldr	r1, [pc, #68]	; (80053e4 <UARTEx_SetNbDataToProcess+0x94>)
 80053a0:	5c8a      	ldrb	r2, [r1, r2]
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053a6:	7b3a      	ldrb	r2, [r7, #12]
 80053a8:	490f      	ldr	r1, [pc, #60]	; (80053e8 <UARTEx_SetNbDataToProcess+0x98>)
 80053aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	7b7a      	ldrb	r2, [r7, #13]
 80053bc:	4909      	ldr	r1, [pc, #36]	; (80053e4 <UARTEx_SetNbDataToProcess+0x94>)
 80053be:	5c8a      	ldrb	r2, [r1, r2]
 80053c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053c4:	7b7a      	ldrb	r2, [r7, #13]
 80053c6:	4908      	ldr	r1, [pc, #32]	; (80053e8 <UARTEx_SetNbDataToProcess+0x98>)
 80053c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	080094a8 	.word	0x080094a8
 80053e8:	080094b0 	.word	0x080094b0

080053ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053f4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80053f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	b29b      	uxth	r3, r3
 8005406:	43db      	mvns	r3, r3
 8005408:	b29b      	uxth	r3, r3
 800540a:	4013      	ands	r3, r2
 800540c:	b29a      	uxth	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	1d3b      	adds	r3, r7, #4
 800542c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <sniprintf>:
 8005460:	b40c      	push	{r2, r3}
 8005462:	b530      	push	{r4, r5, lr}
 8005464:	4b17      	ldr	r3, [pc, #92]	; (80054c4 <sniprintf+0x64>)
 8005466:	1e0c      	subs	r4, r1, #0
 8005468:	681d      	ldr	r5, [r3, #0]
 800546a:	b09d      	sub	sp, #116	; 0x74
 800546c:	da08      	bge.n	8005480 <sniprintf+0x20>
 800546e:	238b      	movs	r3, #139	; 0x8b
 8005470:	602b      	str	r3, [r5, #0]
 8005472:	f04f 30ff 	mov.w	r0, #4294967295
 8005476:	b01d      	add	sp, #116	; 0x74
 8005478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800547c:	b002      	add	sp, #8
 800547e:	4770      	bx	lr
 8005480:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005484:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005488:	bf14      	ite	ne
 800548a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800548e:	4623      	moveq	r3, r4
 8005490:	9304      	str	r3, [sp, #16]
 8005492:	9307      	str	r3, [sp, #28]
 8005494:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005498:	9002      	str	r0, [sp, #8]
 800549a:	9006      	str	r0, [sp, #24]
 800549c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80054a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054a2:	ab21      	add	r3, sp, #132	; 0x84
 80054a4:	a902      	add	r1, sp, #8
 80054a6:	4628      	mov	r0, r5
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	f000 f9c1 	bl	8005830 <_svfiprintf_r>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	bfbc      	itt	lt
 80054b2:	238b      	movlt	r3, #139	; 0x8b
 80054b4:	602b      	strlt	r3, [r5, #0]
 80054b6:	2c00      	cmp	r4, #0
 80054b8:	d0dd      	beq.n	8005476 <sniprintf+0x16>
 80054ba:	9b02      	ldr	r3, [sp, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	e7d9      	b.n	8005476 <sniprintf+0x16>
 80054c2:	bf00      	nop
 80054c4:	200001e0 	.word	0x200001e0

080054c8 <siprintf>:
 80054c8:	b40e      	push	{r1, r2, r3}
 80054ca:	b500      	push	{lr}
 80054cc:	b09c      	sub	sp, #112	; 0x70
 80054ce:	ab1d      	add	r3, sp, #116	; 0x74
 80054d0:	9002      	str	r0, [sp, #8]
 80054d2:	9006      	str	r0, [sp, #24]
 80054d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054d8:	4809      	ldr	r0, [pc, #36]	; (8005500 <siprintf+0x38>)
 80054da:	9107      	str	r1, [sp, #28]
 80054dc:	9104      	str	r1, [sp, #16]
 80054de:	4909      	ldr	r1, [pc, #36]	; (8005504 <siprintf+0x3c>)
 80054e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e4:	9105      	str	r1, [sp, #20]
 80054e6:	6800      	ldr	r0, [r0, #0]
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	a902      	add	r1, sp, #8
 80054ec:	f000 f9a0 	bl	8005830 <_svfiprintf_r>
 80054f0:	9b02      	ldr	r3, [sp, #8]
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	b01c      	add	sp, #112	; 0x70
 80054f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054fc:	b003      	add	sp, #12
 80054fe:	4770      	bx	lr
 8005500:	200001e0 	.word	0x200001e0
 8005504:	ffff0208 	.word	0xffff0208

08005508 <memset>:
 8005508:	4402      	add	r2, r0
 800550a:	4603      	mov	r3, r0
 800550c:	4293      	cmp	r3, r2
 800550e:	d100      	bne.n	8005512 <memset+0xa>
 8005510:	4770      	bx	lr
 8005512:	f803 1b01 	strb.w	r1, [r3], #1
 8005516:	e7f9      	b.n	800550c <memset+0x4>

08005518 <__errno>:
 8005518:	4b01      	ldr	r3, [pc, #4]	; (8005520 <__errno+0x8>)
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	200001e0 	.word	0x200001e0

08005524 <__libc_init_array>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	4d0d      	ldr	r5, [pc, #52]	; (800555c <__libc_init_array+0x38>)
 8005528:	4c0d      	ldr	r4, [pc, #52]	; (8005560 <__libc_init_array+0x3c>)
 800552a:	1b64      	subs	r4, r4, r5
 800552c:	10a4      	asrs	r4, r4, #2
 800552e:	2600      	movs	r6, #0
 8005530:	42a6      	cmp	r6, r4
 8005532:	d109      	bne.n	8005548 <__libc_init_array+0x24>
 8005534:	4d0b      	ldr	r5, [pc, #44]	; (8005564 <__libc_init_array+0x40>)
 8005536:	4c0c      	ldr	r4, [pc, #48]	; (8005568 <__libc_init_array+0x44>)
 8005538:	f000 fc6a 	bl	8005e10 <_init>
 800553c:	1b64      	subs	r4, r4, r5
 800553e:	10a4      	asrs	r4, r4, #2
 8005540:	2600      	movs	r6, #0
 8005542:	42a6      	cmp	r6, r4
 8005544:	d105      	bne.n	8005552 <__libc_init_array+0x2e>
 8005546:	bd70      	pop	{r4, r5, r6, pc}
 8005548:	f855 3b04 	ldr.w	r3, [r5], #4
 800554c:	4798      	blx	r3
 800554e:	3601      	adds	r6, #1
 8005550:	e7ee      	b.n	8005530 <__libc_init_array+0xc>
 8005552:	f855 3b04 	ldr.w	r3, [r5], #4
 8005556:	4798      	blx	r3
 8005558:	3601      	adds	r6, #1
 800555a:	e7f2      	b.n	8005542 <__libc_init_array+0x1e>
 800555c:	080094f4 	.word	0x080094f4
 8005560:	080094f4 	.word	0x080094f4
 8005564:	080094f4 	.word	0x080094f4
 8005568:	080094f8 	.word	0x080094f8

0800556c <__retarget_lock_acquire_recursive>:
 800556c:	4770      	bx	lr

0800556e <__retarget_lock_release_recursive>:
 800556e:	4770      	bx	lr

08005570 <memcpy>:
 8005570:	440a      	add	r2, r1
 8005572:	4291      	cmp	r1, r2
 8005574:	f100 33ff 	add.w	r3, r0, #4294967295
 8005578:	d100      	bne.n	800557c <memcpy+0xc>
 800557a:	4770      	bx	lr
 800557c:	b510      	push	{r4, lr}
 800557e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005582:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005586:	4291      	cmp	r1, r2
 8005588:	d1f9      	bne.n	800557e <memcpy+0xe>
 800558a:	bd10      	pop	{r4, pc}

0800558c <_free_r>:
 800558c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800558e:	2900      	cmp	r1, #0
 8005590:	d044      	beq.n	800561c <_free_r+0x90>
 8005592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005596:	9001      	str	r0, [sp, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f1a1 0404 	sub.w	r4, r1, #4
 800559e:	bfb8      	it	lt
 80055a0:	18e4      	addlt	r4, r4, r3
 80055a2:	f000 f8df 	bl	8005764 <__malloc_lock>
 80055a6:	4a1e      	ldr	r2, [pc, #120]	; (8005620 <_free_r+0x94>)
 80055a8:	9801      	ldr	r0, [sp, #4]
 80055aa:	6813      	ldr	r3, [r2, #0]
 80055ac:	b933      	cbnz	r3, 80055bc <_free_r+0x30>
 80055ae:	6063      	str	r3, [r4, #4]
 80055b0:	6014      	str	r4, [r2, #0]
 80055b2:	b003      	add	sp, #12
 80055b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055b8:	f000 b8da 	b.w	8005770 <__malloc_unlock>
 80055bc:	42a3      	cmp	r3, r4
 80055be:	d908      	bls.n	80055d2 <_free_r+0x46>
 80055c0:	6825      	ldr	r5, [r4, #0]
 80055c2:	1961      	adds	r1, r4, r5
 80055c4:	428b      	cmp	r3, r1
 80055c6:	bf01      	itttt	eq
 80055c8:	6819      	ldreq	r1, [r3, #0]
 80055ca:	685b      	ldreq	r3, [r3, #4]
 80055cc:	1949      	addeq	r1, r1, r5
 80055ce:	6021      	streq	r1, [r4, #0]
 80055d0:	e7ed      	b.n	80055ae <_free_r+0x22>
 80055d2:	461a      	mov	r2, r3
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	b10b      	cbz	r3, 80055dc <_free_r+0x50>
 80055d8:	42a3      	cmp	r3, r4
 80055da:	d9fa      	bls.n	80055d2 <_free_r+0x46>
 80055dc:	6811      	ldr	r1, [r2, #0]
 80055de:	1855      	adds	r5, r2, r1
 80055e0:	42a5      	cmp	r5, r4
 80055e2:	d10b      	bne.n	80055fc <_free_r+0x70>
 80055e4:	6824      	ldr	r4, [r4, #0]
 80055e6:	4421      	add	r1, r4
 80055e8:	1854      	adds	r4, r2, r1
 80055ea:	42a3      	cmp	r3, r4
 80055ec:	6011      	str	r1, [r2, #0]
 80055ee:	d1e0      	bne.n	80055b2 <_free_r+0x26>
 80055f0:	681c      	ldr	r4, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	6053      	str	r3, [r2, #4]
 80055f6:	440c      	add	r4, r1
 80055f8:	6014      	str	r4, [r2, #0]
 80055fa:	e7da      	b.n	80055b2 <_free_r+0x26>
 80055fc:	d902      	bls.n	8005604 <_free_r+0x78>
 80055fe:	230c      	movs	r3, #12
 8005600:	6003      	str	r3, [r0, #0]
 8005602:	e7d6      	b.n	80055b2 <_free_r+0x26>
 8005604:	6825      	ldr	r5, [r4, #0]
 8005606:	1961      	adds	r1, r4, r5
 8005608:	428b      	cmp	r3, r1
 800560a:	bf04      	itt	eq
 800560c:	6819      	ldreq	r1, [r3, #0]
 800560e:	685b      	ldreq	r3, [r3, #4]
 8005610:	6063      	str	r3, [r4, #4]
 8005612:	bf04      	itt	eq
 8005614:	1949      	addeq	r1, r1, r5
 8005616:	6021      	streq	r1, [r4, #0]
 8005618:	6054      	str	r4, [r2, #4]
 800561a:	e7ca      	b.n	80055b2 <_free_r+0x26>
 800561c:	b003      	add	sp, #12
 800561e:	bd30      	pop	{r4, r5, pc}
 8005620:	20004168 	.word	0x20004168

08005624 <sbrk_aligned>:
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	4e0e      	ldr	r6, [pc, #56]	; (8005660 <sbrk_aligned+0x3c>)
 8005628:	460c      	mov	r4, r1
 800562a:	6831      	ldr	r1, [r6, #0]
 800562c:	4605      	mov	r5, r0
 800562e:	b911      	cbnz	r1, 8005636 <sbrk_aligned+0x12>
 8005630:	f000 fba6 	bl	8005d80 <_sbrk_r>
 8005634:	6030      	str	r0, [r6, #0]
 8005636:	4621      	mov	r1, r4
 8005638:	4628      	mov	r0, r5
 800563a:	f000 fba1 	bl	8005d80 <_sbrk_r>
 800563e:	1c43      	adds	r3, r0, #1
 8005640:	d00a      	beq.n	8005658 <sbrk_aligned+0x34>
 8005642:	1cc4      	adds	r4, r0, #3
 8005644:	f024 0403 	bic.w	r4, r4, #3
 8005648:	42a0      	cmp	r0, r4
 800564a:	d007      	beq.n	800565c <sbrk_aligned+0x38>
 800564c:	1a21      	subs	r1, r4, r0
 800564e:	4628      	mov	r0, r5
 8005650:	f000 fb96 	bl	8005d80 <_sbrk_r>
 8005654:	3001      	adds	r0, #1
 8005656:	d101      	bne.n	800565c <sbrk_aligned+0x38>
 8005658:	f04f 34ff 	mov.w	r4, #4294967295
 800565c:	4620      	mov	r0, r4
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	2000416c 	.word	0x2000416c

08005664 <_malloc_r>:
 8005664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005668:	1ccd      	adds	r5, r1, #3
 800566a:	f025 0503 	bic.w	r5, r5, #3
 800566e:	3508      	adds	r5, #8
 8005670:	2d0c      	cmp	r5, #12
 8005672:	bf38      	it	cc
 8005674:	250c      	movcc	r5, #12
 8005676:	2d00      	cmp	r5, #0
 8005678:	4607      	mov	r7, r0
 800567a:	db01      	blt.n	8005680 <_malloc_r+0x1c>
 800567c:	42a9      	cmp	r1, r5
 800567e:	d905      	bls.n	800568c <_malloc_r+0x28>
 8005680:	230c      	movs	r3, #12
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	2600      	movs	r6, #0
 8005686:	4630      	mov	r0, r6
 8005688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800568c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005760 <_malloc_r+0xfc>
 8005690:	f000 f868 	bl	8005764 <__malloc_lock>
 8005694:	f8d8 3000 	ldr.w	r3, [r8]
 8005698:	461c      	mov	r4, r3
 800569a:	bb5c      	cbnz	r4, 80056f4 <_malloc_r+0x90>
 800569c:	4629      	mov	r1, r5
 800569e:	4638      	mov	r0, r7
 80056a0:	f7ff ffc0 	bl	8005624 <sbrk_aligned>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	4604      	mov	r4, r0
 80056a8:	d155      	bne.n	8005756 <_malloc_r+0xf2>
 80056aa:	f8d8 4000 	ldr.w	r4, [r8]
 80056ae:	4626      	mov	r6, r4
 80056b0:	2e00      	cmp	r6, #0
 80056b2:	d145      	bne.n	8005740 <_malloc_r+0xdc>
 80056b4:	2c00      	cmp	r4, #0
 80056b6:	d048      	beq.n	800574a <_malloc_r+0xe6>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	4631      	mov	r1, r6
 80056bc:	4638      	mov	r0, r7
 80056be:	eb04 0903 	add.w	r9, r4, r3
 80056c2:	f000 fb5d 	bl	8005d80 <_sbrk_r>
 80056c6:	4581      	cmp	r9, r0
 80056c8:	d13f      	bne.n	800574a <_malloc_r+0xe6>
 80056ca:	6821      	ldr	r1, [r4, #0]
 80056cc:	1a6d      	subs	r5, r5, r1
 80056ce:	4629      	mov	r1, r5
 80056d0:	4638      	mov	r0, r7
 80056d2:	f7ff ffa7 	bl	8005624 <sbrk_aligned>
 80056d6:	3001      	adds	r0, #1
 80056d8:	d037      	beq.n	800574a <_malloc_r+0xe6>
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	442b      	add	r3, r5
 80056de:	6023      	str	r3, [r4, #0]
 80056e0:	f8d8 3000 	ldr.w	r3, [r8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d038      	beq.n	800575a <_malloc_r+0xf6>
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	42a2      	cmp	r2, r4
 80056ec:	d12b      	bne.n	8005746 <_malloc_r+0xe2>
 80056ee:	2200      	movs	r2, #0
 80056f0:	605a      	str	r2, [r3, #4]
 80056f2:	e00f      	b.n	8005714 <_malloc_r+0xb0>
 80056f4:	6822      	ldr	r2, [r4, #0]
 80056f6:	1b52      	subs	r2, r2, r5
 80056f8:	d41f      	bmi.n	800573a <_malloc_r+0xd6>
 80056fa:	2a0b      	cmp	r2, #11
 80056fc:	d917      	bls.n	800572e <_malloc_r+0xca>
 80056fe:	1961      	adds	r1, r4, r5
 8005700:	42a3      	cmp	r3, r4
 8005702:	6025      	str	r5, [r4, #0]
 8005704:	bf18      	it	ne
 8005706:	6059      	strne	r1, [r3, #4]
 8005708:	6863      	ldr	r3, [r4, #4]
 800570a:	bf08      	it	eq
 800570c:	f8c8 1000 	streq.w	r1, [r8]
 8005710:	5162      	str	r2, [r4, r5]
 8005712:	604b      	str	r3, [r1, #4]
 8005714:	4638      	mov	r0, r7
 8005716:	f104 060b 	add.w	r6, r4, #11
 800571a:	f000 f829 	bl	8005770 <__malloc_unlock>
 800571e:	f026 0607 	bic.w	r6, r6, #7
 8005722:	1d23      	adds	r3, r4, #4
 8005724:	1af2      	subs	r2, r6, r3
 8005726:	d0ae      	beq.n	8005686 <_malloc_r+0x22>
 8005728:	1b9b      	subs	r3, r3, r6
 800572a:	50a3      	str	r3, [r4, r2]
 800572c:	e7ab      	b.n	8005686 <_malloc_r+0x22>
 800572e:	42a3      	cmp	r3, r4
 8005730:	6862      	ldr	r2, [r4, #4]
 8005732:	d1dd      	bne.n	80056f0 <_malloc_r+0x8c>
 8005734:	f8c8 2000 	str.w	r2, [r8]
 8005738:	e7ec      	b.n	8005714 <_malloc_r+0xb0>
 800573a:	4623      	mov	r3, r4
 800573c:	6864      	ldr	r4, [r4, #4]
 800573e:	e7ac      	b.n	800569a <_malloc_r+0x36>
 8005740:	4634      	mov	r4, r6
 8005742:	6876      	ldr	r6, [r6, #4]
 8005744:	e7b4      	b.n	80056b0 <_malloc_r+0x4c>
 8005746:	4613      	mov	r3, r2
 8005748:	e7cc      	b.n	80056e4 <_malloc_r+0x80>
 800574a:	230c      	movs	r3, #12
 800574c:	603b      	str	r3, [r7, #0]
 800574e:	4638      	mov	r0, r7
 8005750:	f000 f80e 	bl	8005770 <__malloc_unlock>
 8005754:	e797      	b.n	8005686 <_malloc_r+0x22>
 8005756:	6025      	str	r5, [r4, #0]
 8005758:	e7dc      	b.n	8005714 <_malloc_r+0xb0>
 800575a:	605b      	str	r3, [r3, #4]
 800575c:	deff      	udf	#255	; 0xff
 800575e:	bf00      	nop
 8005760:	20004168 	.word	0x20004168

08005764 <__malloc_lock>:
 8005764:	4801      	ldr	r0, [pc, #4]	; (800576c <__malloc_lock+0x8>)
 8005766:	f7ff bf01 	b.w	800556c <__retarget_lock_acquire_recursive>
 800576a:	bf00      	nop
 800576c:	20004164 	.word	0x20004164

08005770 <__malloc_unlock>:
 8005770:	4801      	ldr	r0, [pc, #4]	; (8005778 <__malloc_unlock+0x8>)
 8005772:	f7ff befc 	b.w	800556e <__retarget_lock_release_recursive>
 8005776:	bf00      	nop
 8005778:	20004164 	.word	0x20004164

0800577c <__ssputs_r>:
 800577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005780:	688e      	ldr	r6, [r1, #8]
 8005782:	461f      	mov	r7, r3
 8005784:	42be      	cmp	r6, r7
 8005786:	680b      	ldr	r3, [r1, #0]
 8005788:	4682      	mov	sl, r0
 800578a:	460c      	mov	r4, r1
 800578c:	4690      	mov	r8, r2
 800578e:	d82c      	bhi.n	80057ea <__ssputs_r+0x6e>
 8005790:	898a      	ldrh	r2, [r1, #12]
 8005792:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005796:	d026      	beq.n	80057e6 <__ssputs_r+0x6a>
 8005798:	6965      	ldr	r5, [r4, #20]
 800579a:	6909      	ldr	r1, [r1, #16]
 800579c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057a0:	eba3 0901 	sub.w	r9, r3, r1
 80057a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057a8:	1c7b      	adds	r3, r7, #1
 80057aa:	444b      	add	r3, r9
 80057ac:	106d      	asrs	r5, r5, #1
 80057ae:	429d      	cmp	r5, r3
 80057b0:	bf38      	it	cc
 80057b2:	461d      	movcc	r5, r3
 80057b4:	0553      	lsls	r3, r2, #21
 80057b6:	d527      	bpl.n	8005808 <__ssputs_r+0x8c>
 80057b8:	4629      	mov	r1, r5
 80057ba:	f7ff ff53 	bl	8005664 <_malloc_r>
 80057be:	4606      	mov	r6, r0
 80057c0:	b360      	cbz	r0, 800581c <__ssputs_r+0xa0>
 80057c2:	6921      	ldr	r1, [r4, #16]
 80057c4:	464a      	mov	r2, r9
 80057c6:	f7ff fed3 	bl	8005570 <memcpy>
 80057ca:	89a3      	ldrh	r3, [r4, #12]
 80057cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d4:	81a3      	strh	r3, [r4, #12]
 80057d6:	6126      	str	r6, [r4, #16]
 80057d8:	6165      	str	r5, [r4, #20]
 80057da:	444e      	add	r6, r9
 80057dc:	eba5 0509 	sub.w	r5, r5, r9
 80057e0:	6026      	str	r6, [r4, #0]
 80057e2:	60a5      	str	r5, [r4, #8]
 80057e4:	463e      	mov	r6, r7
 80057e6:	42be      	cmp	r6, r7
 80057e8:	d900      	bls.n	80057ec <__ssputs_r+0x70>
 80057ea:	463e      	mov	r6, r7
 80057ec:	6820      	ldr	r0, [r4, #0]
 80057ee:	4632      	mov	r2, r6
 80057f0:	4641      	mov	r1, r8
 80057f2:	f000 faab 	bl	8005d4c <memmove>
 80057f6:	68a3      	ldr	r3, [r4, #8]
 80057f8:	1b9b      	subs	r3, r3, r6
 80057fa:	60a3      	str	r3, [r4, #8]
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	4433      	add	r3, r6
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	2000      	movs	r0, #0
 8005804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005808:	462a      	mov	r2, r5
 800580a:	f000 fac9 	bl	8005da0 <_realloc_r>
 800580e:	4606      	mov	r6, r0
 8005810:	2800      	cmp	r0, #0
 8005812:	d1e0      	bne.n	80057d6 <__ssputs_r+0x5a>
 8005814:	6921      	ldr	r1, [r4, #16]
 8005816:	4650      	mov	r0, sl
 8005818:	f7ff feb8 	bl	800558c <_free_r>
 800581c:	230c      	movs	r3, #12
 800581e:	f8ca 3000 	str.w	r3, [sl]
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005828:	81a3      	strh	r3, [r4, #12]
 800582a:	f04f 30ff 	mov.w	r0, #4294967295
 800582e:	e7e9      	b.n	8005804 <__ssputs_r+0x88>

08005830 <_svfiprintf_r>:
 8005830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	4698      	mov	r8, r3
 8005836:	898b      	ldrh	r3, [r1, #12]
 8005838:	061b      	lsls	r3, r3, #24
 800583a:	b09d      	sub	sp, #116	; 0x74
 800583c:	4607      	mov	r7, r0
 800583e:	460d      	mov	r5, r1
 8005840:	4614      	mov	r4, r2
 8005842:	d50e      	bpl.n	8005862 <_svfiprintf_r+0x32>
 8005844:	690b      	ldr	r3, [r1, #16]
 8005846:	b963      	cbnz	r3, 8005862 <_svfiprintf_r+0x32>
 8005848:	2140      	movs	r1, #64	; 0x40
 800584a:	f7ff ff0b 	bl	8005664 <_malloc_r>
 800584e:	6028      	str	r0, [r5, #0]
 8005850:	6128      	str	r0, [r5, #16]
 8005852:	b920      	cbnz	r0, 800585e <_svfiprintf_r+0x2e>
 8005854:	230c      	movs	r3, #12
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	f04f 30ff 	mov.w	r0, #4294967295
 800585c:	e0d0      	b.n	8005a00 <_svfiprintf_r+0x1d0>
 800585e:	2340      	movs	r3, #64	; 0x40
 8005860:	616b      	str	r3, [r5, #20]
 8005862:	2300      	movs	r3, #0
 8005864:	9309      	str	r3, [sp, #36]	; 0x24
 8005866:	2320      	movs	r3, #32
 8005868:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800586c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005870:	2330      	movs	r3, #48	; 0x30
 8005872:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a18 <_svfiprintf_r+0x1e8>
 8005876:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800587a:	f04f 0901 	mov.w	r9, #1
 800587e:	4623      	mov	r3, r4
 8005880:	469a      	mov	sl, r3
 8005882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005886:	b10a      	cbz	r2, 800588c <_svfiprintf_r+0x5c>
 8005888:	2a25      	cmp	r2, #37	; 0x25
 800588a:	d1f9      	bne.n	8005880 <_svfiprintf_r+0x50>
 800588c:	ebba 0b04 	subs.w	fp, sl, r4
 8005890:	d00b      	beq.n	80058aa <_svfiprintf_r+0x7a>
 8005892:	465b      	mov	r3, fp
 8005894:	4622      	mov	r2, r4
 8005896:	4629      	mov	r1, r5
 8005898:	4638      	mov	r0, r7
 800589a:	f7ff ff6f 	bl	800577c <__ssputs_r>
 800589e:	3001      	adds	r0, #1
 80058a0:	f000 80a9 	beq.w	80059f6 <_svfiprintf_r+0x1c6>
 80058a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058a6:	445a      	add	r2, fp
 80058a8:	9209      	str	r2, [sp, #36]	; 0x24
 80058aa:	f89a 3000 	ldrb.w	r3, [sl]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 80a1 	beq.w	80059f6 <_svfiprintf_r+0x1c6>
 80058b4:	2300      	movs	r3, #0
 80058b6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058be:	f10a 0a01 	add.w	sl, sl, #1
 80058c2:	9304      	str	r3, [sp, #16]
 80058c4:	9307      	str	r3, [sp, #28]
 80058c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058ca:	931a      	str	r3, [sp, #104]	; 0x68
 80058cc:	4654      	mov	r4, sl
 80058ce:	2205      	movs	r2, #5
 80058d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058d4:	4850      	ldr	r0, [pc, #320]	; (8005a18 <_svfiprintf_r+0x1e8>)
 80058d6:	f7fa fc53 	bl	8000180 <memchr>
 80058da:	9a04      	ldr	r2, [sp, #16]
 80058dc:	b9d8      	cbnz	r0, 8005916 <_svfiprintf_r+0xe6>
 80058de:	06d0      	lsls	r0, r2, #27
 80058e0:	bf44      	itt	mi
 80058e2:	2320      	movmi	r3, #32
 80058e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058e8:	0711      	lsls	r1, r2, #28
 80058ea:	bf44      	itt	mi
 80058ec:	232b      	movmi	r3, #43	; 0x2b
 80058ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058f2:	f89a 3000 	ldrb.w	r3, [sl]
 80058f6:	2b2a      	cmp	r3, #42	; 0x2a
 80058f8:	d015      	beq.n	8005926 <_svfiprintf_r+0xf6>
 80058fa:	9a07      	ldr	r2, [sp, #28]
 80058fc:	4654      	mov	r4, sl
 80058fe:	2000      	movs	r0, #0
 8005900:	f04f 0c0a 	mov.w	ip, #10
 8005904:	4621      	mov	r1, r4
 8005906:	f811 3b01 	ldrb.w	r3, [r1], #1
 800590a:	3b30      	subs	r3, #48	; 0x30
 800590c:	2b09      	cmp	r3, #9
 800590e:	d94d      	bls.n	80059ac <_svfiprintf_r+0x17c>
 8005910:	b1b0      	cbz	r0, 8005940 <_svfiprintf_r+0x110>
 8005912:	9207      	str	r2, [sp, #28]
 8005914:	e014      	b.n	8005940 <_svfiprintf_r+0x110>
 8005916:	eba0 0308 	sub.w	r3, r0, r8
 800591a:	fa09 f303 	lsl.w	r3, r9, r3
 800591e:	4313      	orrs	r3, r2
 8005920:	9304      	str	r3, [sp, #16]
 8005922:	46a2      	mov	sl, r4
 8005924:	e7d2      	b.n	80058cc <_svfiprintf_r+0x9c>
 8005926:	9b03      	ldr	r3, [sp, #12]
 8005928:	1d19      	adds	r1, r3, #4
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	9103      	str	r1, [sp, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	bfbb      	ittet	lt
 8005932:	425b      	neglt	r3, r3
 8005934:	f042 0202 	orrlt.w	r2, r2, #2
 8005938:	9307      	strge	r3, [sp, #28]
 800593a:	9307      	strlt	r3, [sp, #28]
 800593c:	bfb8      	it	lt
 800593e:	9204      	strlt	r2, [sp, #16]
 8005940:	7823      	ldrb	r3, [r4, #0]
 8005942:	2b2e      	cmp	r3, #46	; 0x2e
 8005944:	d10c      	bne.n	8005960 <_svfiprintf_r+0x130>
 8005946:	7863      	ldrb	r3, [r4, #1]
 8005948:	2b2a      	cmp	r3, #42	; 0x2a
 800594a:	d134      	bne.n	80059b6 <_svfiprintf_r+0x186>
 800594c:	9b03      	ldr	r3, [sp, #12]
 800594e:	1d1a      	adds	r2, r3, #4
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	9203      	str	r2, [sp, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	bfb8      	it	lt
 8005958:	f04f 33ff 	movlt.w	r3, #4294967295
 800595c:	3402      	adds	r4, #2
 800595e:	9305      	str	r3, [sp, #20]
 8005960:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005a28 <_svfiprintf_r+0x1f8>
 8005964:	7821      	ldrb	r1, [r4, #0]
 8005966:	2203      	movs	r2, #3
 8005968:	4650      	mov	r0, sl
 800596a:	f7fa fc09 	bl	8000180 <memchr>
 800596e:	b138      	cbz	r0, 8005980 <_svfiprintf_r+0x150>
 8005970:	9b04      	ldr	r3, [sp, #16]
 8005972:	eba0 000a 	sub.w	r0, r0, sl
 8005976:	2240      	movs	r2, #64	; 0x40
 8005978:	4082      	lsls	r2, r0
 800597a:	4313      	orrs	r3, r2
 800597c:	3401      	adds	r4, #1
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005984:	4825      	ldr	r0, [pc, #148]	; (8005a1c <_svfiprintf_r+0x1ec>)
 8005986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800598a:	2206      	movs	r2, #6
 800598c:	f7fa fbf8 	bl	8000180 <memchr>
 8005990:	2800      	cmp	r0, #0
 8005992:	d038      	beq.n	8005a06 <_svfiprintf_r+0x1d6>
 8005994:	4b22      	ldr	r3, [pc, #136]	; (8005a20 <_svfiprintf_r+0x1f0>)
 8005996:	bb1b      	cbnz	r3, 80059e0 <_svfiprintf_r+0x1b0>
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	3307      	adds	r3, #7
 800599c:	f023 0307 	bic.w	r3, r3, #7
 80059a0:	3308      	adds	r3, #8
 80059a2:	9303      	str	r3, [sp, #12]
 80059a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a6:	4433      	add	r3, r6
 80059a8:	9309      	str	r3, [sp, #36]	; 0x24
 80059aa:	e768      	b.n	800587e <_svfiprintf_r+0x4e>
 80059ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80059b0:	460c      	mov	r4, r1
 80059b2:	2001      	movs	r0, #1
 80059b4:	e7a6      	b.n	8005904 <_svfiprintf_r+0xd4>
 80059b6:	2300      	movs	r3, #0
 80059b8:	3401      	adds	r4, #1
 80059ba:	9305      	str	r3, [sp, #20]
 80059bc:	4619      	mov	r1, r3
 80059be:	f04f 0c0a 	mov.w	ip, #10
 80059c2:	4620      	mov	r0, r4
 80059c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059c8:	3a30      	subs	r2, #48	; 0x30
 80059ca:	2a09      	cmp	r2, #9
 80059cc:	d903      	bls.n	80059d6 <_svfiprintf_r+0x1a6>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0c6      	beq.n	8005960 <_svfiprintf_r+0x130>
 80059d2:	9105      	str	r1, [sp, #20]
 80059d4:	e7c4      	b.n	8005960 <_svfiprintf_r+0x130>
 80059d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80059da:	4604      	mov	r4, r0
 80059dc:	2301      	movs	r3, #1
 80059de:	e7f0      	b.n	80059c2 <_svfiprintf_r+0x192>
 80059e0:	ab03      	add	r3, sp, #12
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	462a      	mov	r2, r5
 80059e6:	4b0f      	ldr	r3, [pc, #60]	; (8005a24 <_svfiprintf_r+0x1f4>)
 80059e8:	a904      	add	r1, sp, #16
 80059ea:	4638      	mov	r0, r7
 80059ec:	f3af 8000 	nop.w
 80059f0:	1c42      	adds	r2, r0, #1
 80059f2:	4606      	mov	r6, r0
 80059f4:	d1d6      	bne.n	80059a4 <_svfiprintf_r+0x174>
 80059f6:	89ab      	ldrh	r3, [r5, #12]
 80059f8:	065b      	lsls	r3, r3, #25
 80059fa:	f53f af2d 	bmi.w	8005858 <_svfiprintf_r+0x28>
 80059fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a00:	b01d      	add	sp, #116	; 0x74
 8005a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a06:	ab03      	add	r3, sp, #12
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	462a      	mov	r2, r5
 8005a0c:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <_svfiprintf_r+0x1f4>)
 8005a0e:	a904      	add	r1, sp, #16
 8005a10:	4638      	mov	r0, r7
 8005a12:	f000 f879 	bl	8005b08 <_printf_i>
 8005a16:	e7eb      	b.n	80059f0 <_svfiprintf_r+0x1c0>
 8005a18:	080094b8 	.word	0x080094b8
 8005a1c:	080094c2 	.word	0x080094c2
 8005a20:	00000000 	.word	0x00000000
 8005a24:	0800577d 	.word	0x0800577d
 8005a28:	080094be 	.word	0x080094be

08005a2c <_printf_common>:
 8005a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a30:	4616      	mov	r6, r2
 8005a32:	4699      	mov	r9, r3
 8005a34:	688a      	ldr	r2, [r1, #8]
 8005a36:	690b      	ldr	r3, [r1, #16]
 8005a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	bfb8      	it	lt
 8005a40:	4613      	movlt	r3, r2
 8005a42:	6033      	str	r3, [r6, #0]
 8005a44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a48:	4607      	mov	r7, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	b10a      	cbz	r2, 8005a52 <_printf_common+0x26>
 8005a4e:	3301      	adds	r3, #1
 8005a50:	6033      	str	r3, [r6, #0]
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	0699      	lsls	r1, r3, #26
 8005a56:	bf42      	ittt	mi
 8005a58:	6833      	ldrmi	r3, [r6, #0]
 8005a5a:	3302      	addmi	r3, #2
 8005a5c:	6033      	strmi	r3, [r6, #0]
 8005a5e:	6825      	ldr	r5, [r4, #0]
 8005a60:	f015 0506 	ands.w	r5, r5, #6
 8005a64:	d106      	bne.n	8005a74 <_printf_common+0x48>
 8005a66:	f104 0a19 	add.w	sl, r4, #25
 8005a6a:	68e3      	ldr	r3, [r4, #12]
 8005a6c:	6832      	ldr	r2, [r6, #0]
 8005a6e:	1a9b      	subs	r3, r3, r2
 8005a70:	42ab      	cmp	r3, r5
 8005a72:	dc26      	bgt.n	8005ac2 <_printf_common+0x96>
 8005a74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a78:	1e13      	subs	r3, r2, #0
 8005a7a:	6822      	ldr	r2, [r4, #0]
 8005a7c:	bf18      	it	ne
 8005a7e:	2301      	movne	r3, #1
 8005a80:	0692      	lsls	r2, r2, #26
 8005a82:	d42b      	bmi.n	8005adc <_printf_common+0xb0>
 8005a84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a88:	4649      	mov	r1, r9
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	47c0      	blx	r8
 8005a8e:	3001      	adds	r0, #1
 8005a90:	d01e      	beq.n	8005ad0 <_printf_common+0xa4>
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	6922      	ldr	r2, [r4, #16]
 8005a96:	f003 0306 	and.w	r3, r3, #6
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	bf02      	ittt	eq
 8005a9e:	68e5      	ldreq	r5, [r4, #12]
 8005aa0:	6833      	ldreq	r3, [r6, #0]
 8005aa2:	1aed      	subeq	r5, r5, r3
 8005aa4:	68a3      	ldr	r3, [r4, #8]
 8005aa6:	bf0c      	ite	eq
 8005aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aac:	2500      	movne	r5, #0
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	bfc4      	itt	gt
 8005ab2:	1a9b      	subgt	r3, r3, r2
 8005ab4:	18ed      	addgt	r5, r5, r3
 8005ab6:	2600      	movs	r6, #0
 8005ab8:	341a      	adds	r4, #26
 8005aba:	42b5      	cmp	r5, r6
 8005abc:	d11a      	bne.n	8005af4 <_printf_common+0xc8>
 8005abe:	2000      	movs	r0, #0
 8005ac0:	e008      	b.n	8005ad4 <_printf_common+0xa8>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4652      	mov	r2, sl
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4638      	mov	r0, r7
 8005aca:	47c0      	blx	r8
 8005acc:	3001      	adds	r0, #1
 8005ace:	d103      	bne.n	8005ad8 <_printf_common+0xac>
 8005ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad8:	3501      	adds	r5, #1
 8005ada:	e7c6      	b.n	8005a6a <_printf_common+0x3e>
 8005adc:	18e1      	adds	r1, r4, r3
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	2030      	movs	r0, #48	; 0x30
 8005ae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ae6:	4422      	add	r2, r4
 8005ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005aec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005af0:	3302      	adds	r3, #2
 8005af2:	e7c7      	b.n	8005a84 <_printf_common+0x58>
 8005af4:	2301      	movs	r3, #1
 8005af6:	4622      	mov	r2, r4
 8005af8:	4649      	mov	r1, r9
 8005afa:	4638      	mov	r0, r7
 8005afc:	47c0      	blx	r8
 8005afe:	3001      	adds	r0, #1
 8005b00:	d0e6      	beq.n	8005ad0 <_printf_common+0xa4>
 8005b02:	3601      	adds	r6, #1
 8005b04:	e7d9      	b.n	8005aba <_printf_common+0x8e>
	...

08005b08 <_printf_i>:
 8005b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b0c:	7e0f      	ldrb	r7, [r1, #24]
 8005b0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b10:	2f78      	cmp	r7, #120	; 0x78
 8005b12:	4691      	mov	r9, r2
 8005b14:	4680      	mov	r8, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	469a      	mov	sl, r3
 8005b1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b1e:	d807      	bhi.n	8005b30 <_printf_i+0x28>
 8005b20:	2f62      	cmp	r7, #98	; 0x62
 8005b22:	d80a      	bhi.n	8005b3a <_printf_i+0x32>
 8005b24:	2f00      	cmp	r7, #0
 8005b26:	f000 80d4 	beq.w	8005cd2 <_printf_i+0x1ca>
 8005b2a:	2f58      	cmp	r7, #88	; 0x58
 8005b2c:	f000 80c0 	beq.w	8005cb0 <_printf_i+0x1a8>
 8005b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b38:	e03a      	b.n	8005bb0 <_printf_i+0xa8>
 8005b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b3e:	2b15      	cmp	r3, #21
 8005b40:	d8f6      	bhi.n	8005b30 <_printf_i+0x28>
 8005b42:	a101      	add	r1, pc, #4	; (adr r1, 8005b48 <_printf_i+0x40>)
 8005b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b48:	08005ba1 	.word	0x08005ba1
 8005b4c:	08005bb5 	.word	0x08005bb5
 8005b50:	08005b31 	.word	0x08005b31
 8005b54:	08005b31 	.word	0x08005b31
 8005b58:	08005b31 	.word	0x08005b31
 8005b5c:	08005b31 	.word	0x08005b31
 8005b60:	08005bb5 	.word	0x08005bb5
 8005b64:	08005b31 	.word	0x08005b31
 8005b68:	08005b31 	.word	0x08005b31
 8005b6c:	08005b31 	.word	0x08005b31
 8005b70:	08005b31 	.word	0x08005b31
 8005b74:	08005cb9 	.word	0x08005cb9
 8005b78:	08005be1 	.word	0x08005be1
 8005b7c:	08005c73 	.word	0x08005c73
 8005b80:	08005b31 	.word	0x08005b31
 8005b84:	08005b31 	.word	0x08005b31
 8005b88:	08005cdb 	.word	0x08005cdb
 8005b8c:	08005b31 	.word	0x08005b31
 8005b90:	08005be1 	.word	0x08005be1
 8005b94:	08005b31 	.word	0x08005b31
 8005b98:	08005b31 	.word	0x08005b31
 8005b9c:	08005c7b 	.word	0x08005c7b
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	1d1a      	adds	r2, r3, #4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	602a      	str	r2, [r5, #0]
 8005ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e09f      	b.n	8005cf4 <_printf_i+0x1ec>
 8005bb4:	6820      	ldr	r0, [r4, #0]
 8005bb6:	682b      	ldr	r3, [r5, #0]
 8005bb8:	0607      	lsls	r7, r0, #24
 8005bba:	f103 0104 	add.w	r1, r3, #4
 8005bbe:	6029      	str	r1, [r5, #0]
 8005bc0:	d501      	bpl.n	8005bc6 <_printf_i+0xbe>
 8005bc2:	681e      	ldr	r6, [r3, #0]
 8005bc4:	e003      	b.n	8005bce <_printf_i+0xc6>
 8005bc6:	0646      	lsls	r6, r0, #25
 8005bc8:	d5fb      	bpl.n	8005bc2 <_printf_i+0xba>
 8005bca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005bce:	2e00      	cmp	r6, #0
 8005bd0:	da03      	bge.n	8005bda <_printf_i+0xd2>
 8005bd2:	232d      	movs	r3, #45	; 0x2d
 8005bd4:	4276      	negs	r6, r6
 8005bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bda:	485a      	ldr	r0, [pc, #360]	; (8005d44 <_printf_i+0x23c>)
 8005bdc:	230a      	movs	r3, #10
 8005bde:	e012      	b.n	8005c06 <_printf_i+0xfe>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	6820      	ldr	r0, [r4, #0]
 8005be4:	1d19      	adds	r1, r3, #4
 8005be6:	6029      	str	r1, [r5, #0]
 8005be8:	0605      	lsls	r5, r0, #24
 8005bea:	d501      	bpl.n	8005bf0 <_printf_i+0xe8>
 8005bec:	681e      	ldr	r6, [r3, #0]
 8005bee:	e002      	b.n	8005bf6 <_printf_i+0xee>
 8005bf0:	0641      	lsls	r1, r0, #25
 8005bf2:	d5fb      	bpl.n	8005bec <_printf_i+0xe4>
 8005bf4:	881e      	ldrh	r6, [r3, #0]
 8005bf6:	4853      	ldr	r0, [pc, #332]	; (8005d44 <_printf_i+0x23c>)
 8005bf8:	2f6f      	cmp	r7, #111	; 0x6f
 8005bfa:	bf0c      	ite	eq
 8005bfc:	2308      	moveq	r3, #8
 8005bfe:	230a      	movne	r3, #10
 8005c00:	2100      	movs	r1, #0
 8005c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c06:	6865      	ldr	r5, [r4, #4]
 8005c08:	60a5      	str	r5, [r4, #8]
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	bfa2      	ittt	ge
 8005c0e:	6821      	ldrge	r1, [r4, #0]
 8005c10:	f021 0104 	bicge.w	r1, r1, #4
 8005c14:	6021      	strge	r1, [r4, #0]
 8005c16:	b90e      	cbnz	r6, 8005c1c <_printf_i+0x114>
 8005c18:	2d00      	cmp	r5, #0
 8005c1a:	d04b      	beq.n	8005cb4 <_printf_i+0x1ac>
 8005c1c:	4615      	mov	r5, r2
 8005c1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c22:	fb03 6711 	mls	r7, r3, r1, r6
 8005c26:	5dc7      	ldrb	r7, [r0, r7]
 8005c28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c2c:	4637      	mov	r7, r6
 8005c2e:	42bb      	cmp	r3, r7
 8005c30:	460e      	mov	r6, r1
 8005c32:	d9f4      	bls.n	8005c1e <_printf_i+0x116>
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d10b      	bne.n	8005c50 <_printf_i+0x148>
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	07de      	lsls	r6, r3, #31
 8005c3c:	d508      	bpl.n	8005c50 <_printf_i+0x148>
 8005c3e:	6923      	ldr	r3, [r4, #16]
 8005c40:	6861      	ldr	r1, [r4, #4]
 8005c42:	4299      	cmp	r1, r3
 8005c44:	bfde      	ittt	le
 8005c46:	2330      	movle	r3, #48	; 0x30
 8005c48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c50:	1b52      	subs	r2, r2, r5
 8005c52:	6122      	str	r2, [r4, #16]
 8005c54:	f8cd a000 	str.w	sl, [sp]
 8005c58:	464b      	mov	r3, r9
 8005c5a:	aa03      	add	r2, sp, #12
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	4640      	mov	r0, r8
 8005c60:	f7ff fee4 	bl	8005a2c <_printf_common>
 8005c64:	3001      	adds	r0, #1
 8005c66:	d14a      	bne.n	8005cfe <_printf_i+0x1f6>
 8005c68:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6c:	b004      	add	sp, #16
 8005c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	f043 0320 	orr.w	r3, r3, #32
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	4833      	ldr	r0, [pc, #204]	; (8005d48 <_printf_i+0x240>)
 8005c7c:	2778      	movs	r7, #120	; 0x78
 8005c7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	6829      	ldr	r1, [r5, #0]
 8005c86:	061f      	lsls	r7, r3, #24
 8005c88:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c8c:	d402      	bmi.n	8005c94 <_printf_i+0x18c>
 8005c8e:	065f      	lsls	r7, r3, #25
 8005c90:	bf48      	it	mi
 8005c92:	b2b6      	uxthmi	r6, r6
 8005c94:	07df      	lsls	r7, r3, #31
 8005c96:	bf48      	it	mi
 8005c98:	f043 0320 	orrmi.w	r3, r3, #32
 8005c9c:	6029      	str	r1, [r5, #0]
 8005c9e:	bf48      	it	mi
 8005ca0:	6023      	strmi	r3, [r4, #0]
 8005ca2:	b91e      	cbnz	r6, 8005cac <_printf_i+0x1a4>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	f023 0320 	bic.w	r3, r3, #32
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	2310      	movs	r3, #16
 8005cae:	e7a7      	b.n	8005c00 <_printf_i+0xf8>
 8005cb0:	4824      	ldr	r0, [pc, #144]	; (8005d44 <_printf_i+0x23c>)
 8005cb2:	e7e4      	b.n	8005c7e <_printf_i+0x176>
 8005cb4:	4615      	mov	r5, r2
 8005cb6:	e7bd      	b.n	8005c34 <_printf_i+0x12c>
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	6826      	ldr	r6, [r4, #0]
 8005cbc:	6961      	ldr	r1, [r4, #20]
 8005cbe:	1d18      	adds	r0, r3, #4
 8005cc0:	6028      	str	r0, [r5, #0]
 8005cc2:	0635      	lsls	r5, r6, #24
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	d501      	bpl.n	8005ccc <_printf_i+0x1c4>
 8005cc8:	6019      	str	r1, [r3, #0]
 8005cca:	e002      	b.n	8005cd2 <_printf_i+0x1ca>
 8005ccc:	0670      	lsls	r0, r6, #25
 8005cce:	d5fb      	bpl.n	8005cc8 <_printf_i+0x1c0>
 8005cd0:	8019      	strh	r1, [r3, #0]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	6123      	str	r3, [r4, #16]
 8005cd6:	4615      	mov	r5, r2
 8005cd8:	e7bc      	b.n	8005c54 <_printf_i+0x14c>
 8005cda:	682b      	ldr	r3, [r5, #0]
 8005cdc:	1d1a      	adds	r2, r3, #4
 8005cde:	602a      	str	r2, [r5, #0]
 8005ce0:	681d      	ldr	r5, [r3, #0]
 8005ce2:	6862      	ldr	r2, [r4, #4]
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f7fa fa4a 	bl	8000180 <memchr>
 8005cec:	b108      	cbz	r0, 8005cf2 <_printf_i+0x1ea>
 8005cee:	1b40      	subs	r0, r0, r5
 8005cf0:	6060      	str	r0, [r4, #4]
 8005cf2:	6863      	ldr	r3, [r4, #4]
 8005cf4:	6123      	str	r3, [r4, #16]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cfc:	e7aa      	b.n	8005c54 <_printf_i+0x14c>
 8005cfe:	6923      	ldr	r3, [r4, #16]
 8005d00:	462a      	mov	r2, r5
 8005d02:	4649      	mov	r1, r9
 8005d04:	4640      	mov	r0, r8
 8005d06:	47d0      	blx	sl
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d0ad      	beq.n	8005c68 <_printf_i+0x160>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	079b      	lsls	r3, r3, #30
 8005d10:	d413      	bmi.n	8005d3a <_printf_i+0x232>
 8005d12:	68e0      	ldr	r0, [r4, #12]
 8005d14:	9b03      	ldr	r3, [sp, #12]
 8005d16:	4298      	cmp	r0, r3
 8005d18:	bfb8      	it	lt
 8005d1a:	4618      	movlt	r0, r3
 8005d1c:	e7a6      	b.n	8005c6c <_printf_i+0x164>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4632      	mov	r2, r6
 8005d22:	4649      	mov	r1, r9
 8005d24:	4640      	mov	r0, r8
 8005d26:	47d0      	blx	sl
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d09d      	beq.n	8005c68 <_printf_i+0x160>
 8005d2c:	3501      	adds	r5, #1
 8005d2e:	68e3      	ldr	r3, [r4, #12]
 8005d30:	9903      	ldr	r1, [sp, #12]
 8005d32:	1a5b      	subs	r3, r3, r1
 8005d34:	42ab      	cmp	r3, r5
 8005d36:	dcf2      	bgt.n	8005d1e <_printf_i+0x216>
 8005d38:	e7eb      	b.n	8005d12 <_printf_i+0x20a>
 8005d3a:	2500      	movs	r5, #0
 8005d3c:	f104 0619 	add.w	r6, r4, #25
 8005d40:	e7f5      	b.n	8005d2e <_printf_i+0x226>
 8005d42:	bf00      	nop
 8005d44:	080094c9 	.word	0x080094c9
 8005d48:	080094da 	.word	0x080094da

08005d4c <memmove>:
 8005d4c:	4288      	cmp	r0, r1
 8005d4e:	b510      	push	{r4, lr}
 8005d50:	eb01 0402 	add.w	r4, r1, r2
 8005d54:	d902      	bls.n	8005d5c <memmove+0x10>
 8005d56:	4284      	cmp	r4, r0
 8005d58:	4623      	mov	r3, r4
 8005d5a:	d807      	bhi.n	8005d6c <memmove+0x20>
 8005d5c:	1e43      	subs	r3, r0, #1
 8005d5e:	42a1      	cmp	r1, r4
 8005d60:	d008      	beq.n	8005d74 <memmove+0x28>
 8005d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d6a:	e7f8      	b.n	8005d5e <memmove+0x12>
 8005d6c:	4402      	add	r2, r0
 8005d6e:	4601      	mov	r1, r0
 8005d70:	428a      	cmp	r2, r1
 8005d72:	d100      	bne.n	8005d76 <memmove+0x2a>
 8005d74:	bd10      	pop	{r4, pc}
 8005d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d7e:	e7f7      	b.n	8005d70 <memmove+0x24>

08005d80 <_sbrk_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4d06      	ldr	r5, [pc, #24]	; (8005d9c <_sbrk_r+0x1c>)
 8005d84:	2300      	movs	r3, #0
 8005d86:	4604      	mov	r4, r0
 8005d88:	4608      	mov	r0, r1
 8005d8a:	602b      	str	r3, [r5, #0]
 8005d8c:	f7fb fba6 	bl	80014dc <_sbrk>
 8005d90:	1c43      	adds	r3, r0, #1
 8005d92:	d102      	bne.n	8005d9a <_sbrk_r+0x1a>
 8005d94:	682b      	ldr	r3, [r5, #0]
 8005d96:	b103      	cbz	r3, 8005d9a <_sbrk_r+0x1a>
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	bd38      	pop	{r3, r4, r5, pc}
 8005d9c:	20004160 	.word	0x20004160

08005da0 <_realloc_r>:
 8005da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da4:	4680      	mov	r8, r0
 8005da6:	4614      	mov	r4, r2
 8005da8:	460e      	mov	r6, r1
 8005daa:	b921      	cbnz	r1, 8005db6 <_realloc_r+0x16>
 8005dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005db0:	4611      	mov	r1, r2
 8005db2:	f7ff bc57 	b.w	8005664 <_malloc_r>
 8005db6:	b92a      	cbnz	r2, 8005dc4 <_realloc_r+0x24>
 8005db8:	f7ff fbe8 	bl	800558c <_free_r>
 8005dbc:	4625      	mov	r5, r4
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dc4:	f000 f81b 	bl	8005dfe <_malloc_usable_size_r>
 8005dc8:	4284      	cmp	r4, r0
 8005dca:	4607      	mov	r7, r0
 8005dcc:	d802      	bhi.n	8005dd4 <_realloc_r+0x34>
 8005dce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dd2:	d812      	bhi.n	8005dfa <_realloc_r+0x5a>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	f7ff fc44 	bl	8005664 <_malloc_r>
 8005ddc:	4605      	mov	r5, r0
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d0ed      	beq.n	8005dbe <_realloc_r+0x1e>
 8005de2:	42bc      	cmp	r4, r7
 8005de4:	4622      	mov	r2, r4
 8005de6:	4631      	mov	r1, r6
 8005de8:	bf28      	it	cs
 8005dea:	463a      	movcs	r2, r7
 8005dec:	f7ff fbc0 	bl	8005570 <memcpy>
 8005df0:	4631      	mov	r1, r6
 8005df2:	4640      	mov	r0, r8
 8005df4:	f7ff fbca 	bl	800558c <_free_r>
 8005df8:	e7e1      	b.n	8005dbe <_realloc_r+0x1e>
 8005dfa:	4635      	mov	r5, r6
 8005dfc:	e7df      	b.n	8005dbe <_realloc_r+0x1e>

08005dfe <_malloc_usable_size_r>:
 8005dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e02:	1f18      	subs	r0, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	bfbc      	itt	lt
 8005e08:	580b      	ldrlt	r3, [r1, r0]
 8005e0a:	18c0      	addlt	r0, r0, r3
 8005e0c:	4770      	bx	lr
	...

08005e10 <_init>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	bf00      	nop
 8005e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e16:	bc08      	pop	{r3}
 8005e18:	469e      	mov	lr, r3
 8005e1a:	4770      	bx	lr

08005e1c <_fini>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	bf00      	nop
 8005e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e22:	bc08      	pop	{r3}
 8005e24:	469e      	mov	lr, r3
 8005e26:	4770      	bx	lr
