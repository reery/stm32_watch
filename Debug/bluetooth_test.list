
bluetooth_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ff8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d88  08005134  08005134  00015134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005ebc  08005ebc  00015ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005ec4  08005ec4  00015ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005ec8  08005ec8  00015ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000050  20000008  08005ecc  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003e44  20000058  08005f1c  00020058  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20003e9c  08005f1c  00023e9c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001a594  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000347b  00000000  00000000  0003a65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001990  00000000  00000000  0003dae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001395  00000000  00000000  0003f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000237e9  00000000  00000000  00040805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018bc9  00000000  00000000  00063fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e3839  00000000  00000000  0007cbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006c00  00000000  00000000  001603f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  00166ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000058 	.word	0x20000058
 8000158:	00000000 	.word	0x00000000
 800015c:	0800511c 	.word	0x0800511c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000005c 	.word	0x2000005c
 8000178:	0800511c 	.word	0x0800511c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b970 	b.w	8000474 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	460f      	mov	r7, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d965      	bls.n	800028e <__udivmoddi4+0xe2>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b143      	cbz	r3, 80001da <__udivmoddi4+0x2e>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	409f      	lsls	r7, r3
 80001d2:	fa20 f202 	lsr.w	r2, r0, r2
 80001d6:	4317      	orrs	r7, r2
 80001d8:	409c      	lsls	r4, r3
 80001da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001de:	fa1f f58c 	uxth.w	r5, ip
 80001e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f0:	fb01 f005 	mul.w	r0, r1, r5
 80001f4:	4290      	cmp	r0, r2
 80001f6:	d90a      	bls.n	800020e <__udivmoddi4+0x62>
 80001f8:	eb1c 0202 	adds.w	r2, ip, r2
 80001fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000200:	f080 811c 	bcs.w	800043c <__udivmoddi4+0x290>
 8000204:	4290      	cmp	r0, r2
 8000206:	f240 8119 	bls.w	800043c <__udivmoddi4+0x290>
 800020a:	3902      	subs	r1, #2
 800020c:	4462      	add	r2, ip
 800020e:	1a12      	subs	r2, r2, r0
 8000210:	b2a4      	uxth	r4, r4
 8000212:	fbb2 f0fe 	udiv	r0, r2, lr
 8000216:	fb0e 2210 	mls	r2, lr, r0, r2
 800021a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021e:	fb00 f505 	mul.w	r5, r0, r5
 8000222:	42a5      	cmp	r5, r4
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x90>
 8000226:	eb1c 0404 	adds.w	r4, ip, r4
 800022a:	f100 32ff 	add.w	r2, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x294>
 8000232:	42a5      	cmp	r5, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x294>
 8000238:	4464      	add	r4, ip
 800023a:	3802      	subs	r0, #2
 800023c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000240:	1b64      	subs	r4, r4, r5
 8000242:	2100      	movs	r1, #0
 8000244:	b11e      	cbz	r6, 800024e <__udivmoddi4+0xa2>
 8000246:	40dc      	lsrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	e9c6 4300 	strd	r4, r3, [r6]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d908      	bls.n	8000268 <__udivmoddi4+0xbc>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ed 	beq.w	8000436 <__udivmoddi4+0x28a>
 800025c:	2100      	movs	r1, #0
 800025e:	e9c6 0500 	strd	r0, r5, [r6]
 8000262:	4608      	mov	r0, r1
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	fab3 f183 	clz	r1, r3
 800026c:	2900      	cmp	r1, #0
 800026e:	d149      	bne.n	8000304 <__udivmoddi4+0x158>
 8000270:	42ab      	cmp	r3, r5
 8000272:	d302      	bcc.n	800027a <__udivmoddi4+0xce>
 8000274:	4282      	cmp	r2, r0
 8000276:	f200 80f8 	bhi.w	800046a <__udivmoddi4+0x2be>
 800027a:	1a84      	subs	r4, r0, r2
 800027c:	eb65 0203 	sbc.w	r2, r5, r3
 8000280:	2001      	movs	r0, #1
 8000282:	4617      	mov	r7, r2
 8000284:	2e00      	cmp	r6, #0
 8000286:	d0e2      	beq.n	800024e <__udivmoddi4+0xa2>
 8000288:	e9c6 4700 	strd	r4, r7, [r6]
 800028c:	e7df      	b.n	800024e <__udivmoddi4+0xa2>
 800028e:	b902      	cbnz	r2, 8000292 <__udivmoddi4+0xe6>
 8000290:	deff      	udf	#255	; 0xff
 8000292:	fab2 f382 	clz	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x210>
 800029c:	1a8a      	subs	r2, r1, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f fe8c 	uxth.w	lr, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002ac:	fb07 2015 	mls	r0, r7, r5, r2
 80002b0:	0c22      	lsrs	r2, r4, #16
 80002b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b6:	fb0e f005 	mul.w	r0, lr, r5
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 80cb 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002ce:	4645      	mov	r5, r8
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	fb0e fe00 	mul.w	lr, lr, r0
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 80bb 	bhi.w	800046e <__udivmoddi4+0x2c2>
 80002f8:	4610      	mov	r0, r2
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000302:	e79f      	b.n	8000244 <__udivmoddi4+0x98>
 8000304:	f1c1 0720 	rsb	r7, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 fc07 	lsr.w	ip, r2, r7
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa05 f401 	lsl.w	r4, r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	40fd      	lsrs	r5, r7
 800031c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fbb5 f8f9 	udiv	r8, r5, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 5518 	mls	r5, r9, r8, r5
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	fa00 f001 	lsl.w	r0, r0, r1
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f108 3aff 	add.w	sl, r8, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	4464      	add	r4, ip
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	b29d      	uxth	r5, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f103 35ff 	add.w	r5, r3, #4294967295
 800037c:	d26c      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 800037e:	45a6      	cmp	lr, r4
 8000380:	d96a      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000382:	3b02      	subs	r3, #2
 8000384:	4464      	add	r4, ip
 8000386:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038a:	fba3 9502 	umull	r9, r5, r3, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	42ac      	cmp	r4, r5
 8000394:	46c8      	mov	r8, r9
 8000396:	46ae      	mov	lr, r5
 8000398:	d356      	bcc.n	8000448 <__udivmoddi4+0x29c>
 800039a:	d053      	beq.n	8000444 <__udivmoddi4+0x298>
 800039c:	b156      	cbz	r6, 80003b4 <__udivmoddi4+0x208>
 800039e:	ebb0 0208 	subs.w	r2, r0, r8
 80003a2:	eb64 040e 	sbc.w	r4, r4, lr
 80003a6:	fa04 f707 	lsl.w	r7, r4, r7
 80003aa:	40ca      	lsrs	r2, r1
 80003ac:	40cc      	lsrs	r4, r1
 80003ae:	4317      	orrs	r7, r2
 80003b0:	e9c6 7400 	strd	r7, r4, [r6]
 80003b4:	4618      	mov	r0, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	f1c3 0120 	rsb	r1, r3, #32
 80003c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c4:	fa20 f201 	lsr.w	r2, r0, r1
 80003c8:	fa25 f101 	lsr.w	r1, r5, r1
 80003cc:	409d      	lsls	r5, r3
 80003ce:	432a      	orrs	r2, r5
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003dc:	fb07 1510 	mls	r5, r7, r0, r1
 80003e0:	0c11      	lsrs	r1, r2, #16
 80003e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e6:	fb00 f50e 	mul.w	r5, r0, lr
 80003ea:	428d      	cmp	r5, r1
 80003ec:	fa04 f403 	lsl.w	r4, r4, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x258>
 80003f2:	eb1c 0101 	adds.w	r1, ip, r1
 80003f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fa:	d22f      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	428d      	cmp	r5, r1
 80003fe:	d92d      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000400:	3802      	subs	r0, #2
 8000402:	4461      	add	r1, ip
 8000404:	1b49      	subs	r1, r1, r5
 8000406:	b292      	uxth	r2, r2
 8000408:	fbb1 f5f7 	udiv	r5, r1, r7
 800040c:	fb07 1115 	mls	r1, r7, r5, r1
 8000410:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000414:	fb05 f10e 	mul.w	r1, r5, lr
 8000418:	4291      	cmp	r1, r2
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x282>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f105 38ff 	add.w	r8, r5, #4294967295
 8000424:	d216      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	4291      	cmp	r1, r2
 8000428:	d914      	bls.n	8000454 <__udivmoddi4+0x2a8>
 800042a:	3d02      	subs	r5, #2
 800042c:	4462      	add	r2, ip
 800042e:	1a52      	subs	r2, r2, r1
 8000430:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000434:	e738      	b.n	80002a8 <__udivmoddi4+0xfc>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e708      	b.n	800024e <__udivmoddi4+0xa2>
 800043c:	4639      	mov	r1, r7
 800043e:	e6e6      	b.n	800020e <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x90>
 8000444:	4548      	cmp	r0, r9
 8000446:	d2a9      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000448:	ebb9 0802 	subs.w	r8, r9, r2
 800044c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000450:	3b01      	subs	r3, #1
 8000452:	e7a3      	b.n	800039c <__udivmoddi4+0x1f0>
 8000454:	4645      	mov	r5, r8
 8000456:	e7ea      	b.n	800042e <__udivmoddi4+0x282>
 8000458:	462b      	mov	r3, r5
 800045a:	e794      	b.n	8000386 <__udivmoddi4+0x1da>
 800045c:	4640      	mov	r0, r8
 800045e:	e7d1      	b.n	8000404 <__udivmoddi4+0x258>
 8000460:	46d0      	mov	r8, sl
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3d02      	subs	r5, #2
 8000466:	4462      	add	r2, ip
 8000468:	e732      	b.n	80002d0 <__udivmoddi4+0x124>
 800046a:	4608      	mov	r0, r1
 800046c:	e70a      	b.n	8000284 <__udivmoddi4+0xd8>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	e742      	b.n	80002fa <__udivmoddi4+0x14e>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000488:	f023 0218 	bic.w	r2, r3, #24
 800048c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c8:	68fb      	ldr	r3, [r7, #12]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
	...

080004d8 <HAL_RTCEx_WakeUpTimerEventCallback>:
static void MX_RTC_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af02      	add	r7, sp, #8
 80004de:	6078      	str	r0, [r7, #4]
	updateDisplay(40, 134);
	uint32_t stopTime = HAL_GetTick() - startTime;
	numToString(30, 136, stopTime, "lu", 1);
	updateDisplay(136, 185);*/

	setFont(&k2d_extrabold_64);
 80004e0:	480a      	ldr	r0, [pc, #40]	; (800050c <HAL_RTCEx_WakeUpTimerEventCallback+0x34>)
 80004e2:	f000 fe97 	bl	8001214 <setFont>
	//drawPolygon(50, 50, 120, 30, 200, 50, 100, 80, 1);
	//drawThickLine(50, 50, 120, 120, 10, 1);
	drawRectangle(80, 50, 100, 50, 10, 1);
 80004e6:	2301      	movs	r3, #1
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	230a      	movs	r3, #10
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2332      	movs	r3, #50	; 0x32
 80004f0:	2264      	movs	r2, #100	; 0x64
 80004f2:	2132      	movs	r1, #50	; 0x32
 80004f4:	2050      	movs	r0, #80	; 0x50
 80004f6:	f000 fb4f 	bl	8000b98 <drawRectangle>
	updateDisplay(28, 130);
 80004fa:	2182      	movs	r1, #130	; 0x82
 80004fc:	201c      	movs	r0, #28
 80004fe:	f000 fac9 	bl	8000a94 <updateDisplay>
	//updateDisplay(28, 130);
	numToString(30, 140, startTime, "lu", 1);
	//updateDisplay(140, 190);
	invertDisplayBuffer();
	sendToDisplay();*/
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000040 	.word	0x20000040

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08e      	sub	sp, #56	; 0x38
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fec7 	bl	80012a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f82b 	bl	8000574 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800051e:	f000 f89f 	bl	8000660 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9e3 	bl	80008ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000526:	f000 f96b 	bl	8000800 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800052a:	f000 f9b7 	bl	800089c <MX_USB_PCD_Init>
  MX_SPI1_Init();
 800052e:	f000 f929 	bl	8000784 <MX_SPI1_Init>
  MX_RTC_Init();
 8000532:	f000 f8bf 	bl	80006b4 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000536:	f000 f8b0 	bl	800069a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  init_display();
 800053a:	f000 fa59 	bl	80009f0 <init_display>
  initDisplayBuffer();
 800053e:	f000 fc53 	bl	8000de8 <initDisplayBuffer>
  clearDisplay();
 8000542:	f000 fa37 	bl	80009b4 <clearDisplay>

  //uint32_t startTime = 0;
  //startTime = HAL_GetTick();
  char str[12];
  uint32_t startTime1 = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	637b      	str	r3, [r7, #52]	; 0x34
  char str1[12];
  char str2[12];
  int vcom_bit = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t counterValue = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	62fb      	str	r3, [r7, #44]	; 0x2c
  int counter = 1024;
 8000552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000556:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GREEN_LED_ON();
 8000558:	2201      	movs	r2, #1
 800055a:	2101      	movs	r1, #1
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <main+0x60>)
 800055e:	f001 f9cd 	bl	80018fc <HAL_GPIO_WritePin>
	  BLUE_LED_OFF();
 8000562:	2200      	movs	r2, #0
 8000564:	2120      	movs	r1, #32
 8000566:	4802      	ldr	r0, [pc, #8]	; (8000570 <main+0x60>)
 8000568:	f001 f9c8 	bl	80018fc <HAL_GPIO_WritePin>
	  GREEN_LED_ON();
 800056c:	e7f4      	b.n	8000558 <main+0x48>
 800056e:	bf00      	nop
 8000570:	48000400 	.word	0x48000400

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b09a      	sub	sp, #104	; 0x68
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2248      	movs	r2, #72	; 0x48
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f004 fd8f 	bl	80050a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]
 8000596:	615a      	str	r2, [r3, #20]
 8000598:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800059a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005a8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80005aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	f023 0303 	bic.w	r3, r3, #3
 80005b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005be:	f001 faad 	bl	8001b1c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff ff58 	bl	8000478 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	4b24      	ldr	r3, [pc, #144]	; (800065c <SystemClock_Config+0xe8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005d0:	4a22      	ldr	r2, [pc, #136]	; (800065c <SystemClock_Config+0xe8>)
 80005d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b20      	ldr	r3, [pc, #128]	; (800065c <SystemClock_Config+0xe8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80005e4:	2327      	movs	r3, #39	; 0x27
 80005e6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ee:	2301      	movs	r3, #1
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2340      	movs	r3, #64	; 0x40
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000600:	2300      	movs	r3, #0
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000604:	2360      	movs	r3, #96	; 0x60
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fe17 	bl	8002244 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800061c:	f000 f9c4 	bl	80009a8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000620:	236f      	movs	r3, #111	; 0x6f
 8000622:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000624:	2302      	movs	r3, #2
 8000626:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2101      	movs	r1, #1
 8000640:	4618      	mov	r0, r3
 8000642:	f002 f973 	bl	800292c <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800064c:	f000 f9ac 	bl	80009a8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000650:	f002 ff2e 	bl	80034b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000654:	bf00      	nop
 8000656:	3768      	adds	r7, #104	; 0x68
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	58000400 	.word	0x58000400

08000660 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2250      	movs	r2, #80	; 0x50
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f004 fd1a 	bl	80050a6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000676:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800067c:	2300      	movs	r3, #0
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fd9e 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800068e:	f000 f98b 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
  /* RTC_WKUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 1, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2101      	movs	r1, #1
 80006a2:	2003      	movs	r0, #3
 80006a4:	f000 ff85 	bl	80015b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80006a8:	2003      	movs	r0, #3
 80006aa:	f000 ff9c 	bl	80015e6 <HAL_NVIC_EnableIRQ>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006c8:	2300      	movs	r3, #0
 80006ca:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006cc:	4b2b      	ldr	r3, [pc, #172]	; (800077c <MX_RTC_Init+0xc8>)
 80006ce:	4a2c      	ldr	r2, [pc, #176]	; (8000780 <MX_RTC_Init+0xcc>)
 80006d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006d2:	4b2a      	ldr	r3, [pc, #168]	; (800077c <MX_RTC_Init+0xc8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <MX_RTC_Init+0xc8>)
 80006da:	227f      	movs	r2, #127	; 0x7f
 80006dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006de:	4b27      	ldr	r3, [pc, #156]	; (800077c <MX_RTC_Init+0xc8>)
 80006e0:	22ff      	movs	r2, #255	; 0xff
 80006e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <MX_RTC_Init+0xc8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_RTC_Init+0xc8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_RTC_Init+0xc8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_RTC_Init+0xc8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006fc:	481f      	ldr	r0, [pc, #124]	; (800077c <MX_RTC_Init+0xc8>)
 80006fe:	f002 ffef 	bl	80036e0 <HAL_RTC_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000708:	f000 f94e 	bl	80009a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 800070c:	2322      	movs	r3, #34	; 0x22
 800070e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x15;
 8000710:	2315      	movs	r3, #21
 8000712:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000714:	2300      	movs	r3, #0
 8000716:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2201      	movs	r2, #1
 8000728:	4619      	mov	r1, r3
 800072a:	4814      	ldr	r0, [pc, #80]	; (800077c <MX_RTC_Init+0xc8>)
 800072c:	f003 f888 	bl	8003840 <HAL_RTC_SetTime>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000736:	f000 f937 	bl	80009a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800073a:	2303      	movs	r3, #3
 800073c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800073e:	2301      	movs	r3, #1
 8000740:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 8000742:	2331      	movs	r3, #49	; 0x31
 8000744:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8000746:	2324      	movs	r3, #36	; 0x24
 8000748:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	2201      	movs	r2, #1
 800074e:	4619      	mov	r1, r3
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <MX_RTC_Init+0xc8>)
 8000752:	f003 f939 	bl	80039c8 <HAL_RTC_SetDate>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 800075c:	f000 f924 	bl	80009a8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000760:	2204      	movs	r2, #4
 8000762:	2100      	movs	r1, #0
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_RTC_Init+0xc8>)
 8000766:	f003 fa4d 	bl	8003c04 <HAL_RTCEx_SetWakeUpTimer_IT>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 8000770:	f000 f91a 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000074 	.word	0x20000074
 8000780:	40002800 	.word	0x40002800

08000784 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_SPI1_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <MX_SPI1_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_SPI1_Init+0x74>)
 8000790:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000794:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_SPI1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_SPI1_Init+0x74>)
 800079e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007ba:	2210      	movs	r2, #16
 80007bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007d2:	2207      	movs	r2, #7
 80007d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007e4:	f003 faf0 	bl	8003dc8 <HAL_SPI_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007ee:	f000 f8db 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000098 	.word	0x20000098
 80007fc:	40013000 	.word	0x40013000

08000800 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000806:	4a24      	ldr	r2, [pc, #144]	; (8000898 <MX_USART1_UART_Init+0x98>)
 8000808:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <MX_USART1_UART_Init+0x94>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000818:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081a:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_USART1_UART_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000828:	220c      	movs	r2, #12
 800082a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_USART1_UART_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_USART1_UART_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084a:	4812      	ldr	r0, [pc, #72]	; (8000894 <MX_USART1_UART_Init+0x94>)
 800084c:	f003 fe58 	bl	8004500 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000856:	f000 f8a7 	bl	80009a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <MX_USART1_UART_Init+0x94>)
 800085e:	f004 fb1f 	bl	8004ea0 <HAL_UARTEx_SetTxFifoThreshold>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000868:	f000 f89e 	bl	80009a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086c:	2100      	movs	r1, #0
 800086e:	4809      	ldr	r0, [pc, #36]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000870:	f004 fb54 	bl	8004f1c <HAL_UARTEx_SetRxFifoThreshold>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800087a:	f000 f895 	bl	80009a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000880:	f004 fad5 	bl	8004e2e <HAL_UARTEx_DisableFifoMode>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800088a:	f000 f88d 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000fc 	.word	0x200000fc
 8000898:	40013800 	.word	0x40013800

0800089c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_USB_PCD_Init+0x48>)
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <MX_USB_PCD_Init+0x4c>)
 80008a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USB_PCD_Init+0x48>)
 80008a8:	2208      	movs	r2, #8
 80008aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <MX_USB_PCD_Init+0x48>)
 80008ae:	2202      	movs	r2, #2
 80008b0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USB_PCD_Init+0x48>)
 80008b4:	2202      	movs	r2, #2
 80008b6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_USB_PCD_Init+0x48>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USB_PCD_Init+0x48>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_USB_PCD_Init+0x48>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USB_PCD_Init+0x48>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_USB_PCD_Init+0x48>)
 80008d2:	f001 f82b 	bl	800192c <HAL_PCD_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80008dc:	f000 f864 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000190 	.word	0x20000190
 80008e8:	40006800 	.word	0x40006800

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000900:	2004      	movs	r0, #4
 8000902:	f7ff fdcf 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff fdcc 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090c:	2002      	movs	r0, #2
 800090e:	f7ff fdc9 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2008      	movs	r0, #8
 8000914:	f7ff fdc6 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800091e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000922:	f000 ffeb 	bl	80018fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2123      	movs	r1, #35	; 0x23
 800092a:	481c      	ldr	r0, [pc, #112]	; (800099c <MX_GPIO_Init+0xb0>)
 800092c:	f000 ffe6 	bl	80018fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8000930:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000934:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4619      	mov	r1, r3
 8000946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094a:	f000 fe67 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094e:	2310      	movs	r3, #16
 8000950:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	4619      	mov	r1, r3
 800095e:	4810      	ldr	r0, [pc, #64]	; (80009a0 <MX_GPIO_Init+0xb4>)
 8000960:	f000 fe5c 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000964:	2323      	movs	r3, #35	; 0x23
 8000966:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	4619      	mov	r1, r3
 8000978:	4808      	ldr	r0, [pc, #32]	; (800099c <MX_GPIO_Init+0xb0>)
 800097a:	f000 fe4f 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800097e:	2303      	movs	r3, #3
 8000980:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4619      	mov	r1, r3
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_GPIO_Init+0xb8>)
 8000990:	f000 fe44 	bl	800161c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000994:	bf00      	nop
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	48000400 	.word	0x48000400
 80009a0:	48000800 	.word	0x48000800
 80009a4:	48000c00 	.word	0x48000c00

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <clearDisplay>:
uint8_t (*currentBuffer)[DISPLAY_WIDTH / 8] = backBuffer;
uint8_t sendToDisplayBuffer[TOTAL_DATA_SIZE];
Font* currentFont = NULL;


void clearDisplay(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	SCS_HIGH();
 80009b8:	2201      	movs	r2, #1
 80009ba:	2110      	movs	r1, #16
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c0:	f000 ff9c 	bl	80018fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &clear_command, 1, HAL_MAX_DELAY);
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
 80009c8:	2201      	movs	r2, #1
 80009ca:	4907      	ldr	r1, [pc, #28]	; (80009e8 <clearDisplay+0x34>)
 80009cc:	4807      	ldr	r0, [pc, #28]	; (80009ec <clearDisplay+0x38>)
 80009ce:	f003 fa9e 	bl	8003f0e <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, &dummy_8bit, 1, HAL_MAX_DELAY);
	SCS_LOW();
 80009d2:	2200      	movs	r2, #0
 80009d4:	2110      	movs	r1, #16
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009da:	f000 ff8f 	bl	80018fc <HAL_GPIO_WritePin>
	toggle_vcom();
 80009de:	f000 f82d 	bl	8000a3c <toggle_vcom>
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000098 	.word	0x20000098

080009f0 <init_display>:

void init_display(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	// Step 1
	HAL_Delay(10);
 80009f4:	200a      	movs	r0, #10
 80009f6:	f000 fcdd 	bl	80013b4 <HAL_Delay>
	DISP_LOW();
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f000 ff7a 	bl	80018fc <HAL_GPIO_WritePin>
	SCS_LOW();
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f000 ff74 	bl	80018fc <HAL_GPIO_WritePin>
	EXTCOMIN_LOW();
 8000a14:	2200      	movs	r2, #0
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f000 ff6e 	bl	80018fc <HAL_GPIO_WritePin>
	// Step 2
	clearDisplay();
 8000a20:	f7ff ffc8 	bl	80009b4 <clearDisplay>
	HAL_Delay(50);
 8000a24:	2032      	movs	r0, #50	; 0x32
 8000a26:	f000 fcc5 	bl	80013b4 <HAL_Delay>
	// Step 3
	DISP_HIGH();
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a34:	f000 ff62 	bl	80018fc <HAL_GPIO_WritePin>
	// Step 4
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <toggle_vcom>:

unsigned int toggle_vcom(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
	vcom_bit ^= 0x40;
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <toggle_vcom+0x50>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <toggle_vcom+0x50>)
 8000a4e:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[2] = {vcom_bit, 0x00};
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <toggle_vcom+0x50>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	713b      	strb	r3, [r7, #4]
 8000a56:	2300      	movs	r3, #0
 8000a58:	717b      	strb	r3, [r7, #5]
	SCS_HIGH();
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2110      	movs	r1, #16
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f000 ff4b 	bl	80018fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY);
 8000a66:	1d39      	adds	r1, r7, #4
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	4808      	ldr	r0, [pc, #32]	; (8000a90 <toggle_vcom+0x54>)
 8000a70:	f003 fa4d 	bl	8003f0e <HAL_SPI_Transmit>
	SCS_LOW();
 8000a74:	2200      	movs	r2, #0
 8000a76:	2110      	movs	r1, #16
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f000 ff3e 	bl	80018fc <HAL_GPIO_WritePin>
	return vcom_bit;
 8000a80:	4b02      	ldr	r3, [pc, #8]	; (8000a8c <toggle_vcom+0x50>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000000a 	.word	0x2000000a
 8000a90:	20000098 	.word	0x20000098

08000a94 <updateDisplay>:

	int vcom_bit = toggle_vcom();
	return vcom_bit;
}

unsigned int updateDisplay(uint8_t y_start, uint8_t y_end) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	71bb      	strb	r3, [r7, #6]
	uint8_t* sendBufferPtr = sendToDisplayBuffer;
 8000aa4:	4b35      	ldr	r3, [pc, #212]	; (8000b7c <updateDisplay+0xe8>)
 8000aa6:	61fb      	str	r3, [r7, #28]
	*sendBufferPtr++ = write_mode;
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	61fa      	str	r2, [r7, #28]
 8000aae:	4a34      	ldr	r2, [pc, #208]	; (8000b80 <updateDisplay+0xec>)
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	701a      	strb	r2, [r3, #0]

	// 1 ms for the loop
	for (uint8_t line = y_start - 1; line <= y_end; line++) {
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	76fb      	strb	r3, [r7, #27]
 8000aba:	e027      	b.n	8000b0c <updateDisplay+0x78>
	    // Send line address inverted
	    uint8_t line_address = (uint8_t)(__RBIT((uint8_t)(line)) >> 24);
 8000abc:	7efb      	ldrb	r3, [r7, #27]
 8000abe:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	fa93 f3a3 	rbit	r3, r3
 8000ac6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	0e1b      	lsrs	r3, r3, #24
 8000acc:	74fb      	strb	r3, [r7, #19]
	    *sendBufferPtr++ = line_address;
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	61fa      	str	r2, [r7, #28]
 8000ad4:	7cfa      	ldrb	r2, [r7, #19]
 8000ad6:	701a      	strb	r2, [r3, #0]

	    // Add pixel data from displayBuffer -> to improve this all the gfx code could modify only the bufferPtr/sendToDisplayBuffer
	    memcpy(sendBufferPtr, currentBuffer[line - 1], DISPLAY_WIDTH / 8);
 8000ad8:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <updateDisplay+0xf0>)
 8000ada:	6819      	ldr	r1, [r3, #0]
 8000adc:	7efa      	ldrb	r2, [r7, #27]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	011b      	lsls	r3, r3, #4
 8000ae2:	1a9b      	subs	r3, r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	3b1e      	subs	r3, #30
 8000ae8:	440b      	add	r3, r1
 8000aea:	221e      	movs	r2, #30
 8000aec:	4619      	mov	r1, r3
 8000aee:	69f8      	ldr	r0, [r7, #28]
 8000af0:	f004 fb06 	bl	8005100 <memcpy>
	    sendBufferPtr += DISPLAY_WIDTH / 8;
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	331e      	adds	r3, #30
 8000af8:	61fb      	str	r3, [r7, #28]

	    // Send 8 dummy bits after each line's pixel data
	    *sendBufferPtr++ = dummy_8bit;
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	61fa      	str	r2, [r7, #28]
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <updateDisplay+0xf4>)
 8000b02:	7812      	ldrb	r2, [r2, #0]
 8000b04:	701a      	strb	r2, [r3, #0]
	for (uint8_t line = y_start - 1; line <= y_end; line++) {
 8000b06:	7efb      	ldrb	r3, [r7, #27]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	76fb      	strb	r3, [r7, #27]
 8000b0c:	7efa      	ldrb	r2, [r7, #27]
 8000b0e:	79bb      	ldrb	r3, [r7, #6]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d9d3      	bls.n	8000abc <updateDisplay+0x28>
	}
	*sendBufferPtr++ = dummy_16bit;
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	61fa      	str	r2, [r7, #28]
 8000b1a:	4a1c      	ldr	r2, [pc, #112]	; (8000b8c <updateDisplay+0xf8>)
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	701a      	strb	r2, [r3, #0]

	RED_LED_ON();
 8000b20:	2201      	movs	r2, #1
 8000b22:	2102      	movs	r1, #2
 8000b24:	481a      	ldr	r0, [pc, #104]	; (8000b90 <updateDisplay+0xfc>)
 8000b26:	f000 fee9 	bl	80018fc <HAL_GPIO_WritePin>
	SCS_HIGH();
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2110      	movs	r1, #16
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b32:	f000 fee3 	bl	80018fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, sendToDisplayBuffer, TOTAL_DATA_SIZE, HAL_MAX_DELAY); // 16 ms for the SPI transfer
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	f641 6203 	movw	r2, #7683	; 0x1e03
 8000b3e:	490f      	ldr	r1, [pc, #60]	; (8000b7c <updateDisplay+0xe8>)
 8000b40:	4814      	ldr	r0, [pc, #80]	; (8000b94 <updateDisplay+0x100>)
 8000b42:	f003 f9e4 	bl	8003f0e <HAL_SPI_Transmit>
	SCS_LOW();
 8000b46:	2200      	movs	r2, #0
 8000b48:	2110      	movs	r1, #16
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f000 fed5 	bl	80018fc <HAL_GPIO_WritePin>
	//updateBuffer();
	//currentBuffer = (currentBuffer == frontBuffer) ? backBuffer : frontBuffer;
	//initCurrentBuffer();

	resetCurrentBufferLines(y_start, y_end); // 1 ms
 8000b52:	79ba      	ldrb	r2, [r7, #6]
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f953 	bl	8000e04 <resetCurrentBufferLines>
	RED_LED_OFF();
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2102      	movs	r1, #2
 8000b62:	480b      	ldr	r0, [pc, #44]	; (8000b90 <updateDisplay+0xfc>)
 8000b64:	f000 feca 	bl	80018fc <HAL_GPIO_WritePin>

	int vcom_bit = toggle_vcom();
 8000b68:	f7ff ff68 	bl	8000a3c <toggle_vcom>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	617b      	str	r3, [r7, #20]
	return vcom_bit;
 8000b70:	697b      	ldr	r3, [r7, #20]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20002090 	.word	0x20002090
 8000b80:	20000009 	.word	0x20000009
 8000b84:	2000000c 	.word	0x2000000c
 8000b88:	2000046d 	.word	0x2000046d
 8000b8c:	2000046c 	.word	0x2000046c
 8000b90:	48000400 	.word	0x48000400
 8000b94:	20000098 	.word	0x20000098

08000b98 <drawRectangle>:
		}
	}
}

// Add thickness calculation to loop
void drawRectangle(int start_position_x, int start_position_y, int length_x, int length_y, int thickness, bool color) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < thickness; i++) {
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	e042      	b.n	8000c32 <drawRectangle+0x9a>
		drawLine_H(start_position_x + i, start_position_y + i, length_x - (i * 2), color); // Top H line
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	18d0      	adds	r0, r2, r3
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	18d1      	adds	r1, r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	1ad2      	subs	r2, r2, r3
 8000bc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bc4:	f000 f83e 	bl	8000c44 <drawLine_H>
		drawLine_H(start_position_x + i, start_position_y + length_y - i, length_x - (i * 2), color); // Bottom H line
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	18d0      	adds	r0, r2, r3
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	441a      	add	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	1ad1      	subs	r1, r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	1ad2      	subs	r2, r2, r3
 8000be0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000be4:	f000 f82e 	bl	8000c44 <drawLine_H>
		drawLine_V(start_position_x + i, start_position_y + 1 + i, length_y - 1 - (i * 2), color); // Left V line
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	18d0      	adds	r0, r2, r3
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1c5a      	adds	r2, r3, #1
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	18d1      	adds	r1, r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	1e5a      	subs	r2, r3, #1
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	1ad2      	subs	r2, r2, r3
 8000c00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c04:	f000 f8ac 	bl	8000d60 <drawLine_V>
		drawLine_V(start_position_x + length_x - i, start_position_y + 1 + i, length_y - 1 - (i * 2), color); // Right V line
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	441a      	add	r2, r3
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	1ad0      	subs	r0, r2, r3
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	18d1      	adds	r1, r2, r3
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	1ad2      	subs	r2, r2, r3
 8000c24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c28:	f000 f89a 	bl	8000d60 <drawLine_V>
	for (int i = 0; i < thickness; i++) {
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	6a3b      	ldr	r3, [r7, #32]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	dbb8      	blt.n	8000bac <drawRectangle+0x14>
	}
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <drawLine_H>:

void drawLine_H(int start_position_x, int start_position_y, int length, bool color) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08e      	sub	sp, #56	; 0x38
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	70fb      	strb	r3, [r7, #3]
	int col = start_position_x - 1;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t memsetColor = color ? 0x00 : 0xFF;
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <drawLine_H+0x1e>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <drawLine_H+0x20>
 8000c62:	23ff      	movs	r3, #255	; 0xff
 8000c64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int lastBytePosition = (col + length) >> 3; // (col + length) / 8
 8000c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	10db      	asrs	r3, r3, #3
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
	int lastBitPosition = 7 - ((col + length) & 7); // 7 - ((col + length) % 8
 8000c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4413      	add	r3, r2
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
	int byteIndex = col >> 3; // byteIndex = x / 8
 8000c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c82:	10db      	asrs	r3, r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
	int bitIndex = 7 - (col & 7); // bitIndex = 7 - (x % 8)
 8000c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
	int columnsToMemset = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30

	if (bitIndex == 7) {
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	2b07      	cmp	r3, #7
 8000c98:	d104      	bne.n	8000ca4 <drawLine_H+0x60>
		columnsToMemset = lastBytePosition - byteIndex;
 8000c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8000ca2:	e004      	b.n	8000cae <drawLine_H+0x6a>
	} else {
		columnsToMemset = lastBytePosition - byteIndex - 1;
 8000ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ca6:	6a3b      	ldr	r3, [r7, #32]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	3b01      	subs	r3, #1
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
	}

	for (col = start_position_x - 1; col < start_position_x + length; col++) {
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8000cb4:	e047      	b.n	8000d46 <drawLine_H+0x102>
		byteIndex = col >> 3; // byteIndex = x / 8
 8000cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb8:	10db      	asrs	r3, r3, #3
 8000cba:	623b      	str	r3, [r7, #32]
		bitIndex = 7 - (col & 7); // bitIndex = 7 - (x % 8)
 8000cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	61fb      	str	r3, [r7, #28]

		if (bitIndex == 7 && byteIndex < lastBytePosition) {
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	2b07      	cmp	r3, #7
 8000cca:	d11b      	bne.n	8000d04 <drawLine_H+0xc0>
 8000ccc:	6a3a      	ldr	r2, [r7, #32]
 8000cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	da17      	bge.n	8000d04 <drawLine_H+0xc0>
			memset(&currentBuffer[start_position_y - 1][byteIndex], memsetColor, columnsToMemset);
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <drawLine_H+0x118>)
 8000cd6:	6819      	ldr	r1, [r3, #0]
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	3b1e      	subs	r3, #30
 8000ce4:	18ca      	adds	r2, r1, r3
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	4413      	add	r3, r2
 8000cea:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8000cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 f9d8 	bl	80050a6 <memset>
			col = col - 1 + (columnsToMemset * 8);
 8000cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	4413      	add	r3, r2
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
			continue;
 8000d02:	e01d      	b.n	8000d40 <drawLine_H+0xfc>
		}
		// Calculate the byte offset within the buffer
		uint32_t byte_offset = (uint32_t)&currentBuffer[start_position_y - 1][byteIndex] - SRAM_BASE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <drawLine_H+0x118>)
 8000d06:	6819      	ldr	r1, [r3, #0]
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	011b      	lsls	r3, r3, #4
 8000d0e:	1a9b      	subs	r3, r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	3b1e      	subs	r3, #30
 8000d14:	18ca      	adds	r2, r1, r3
 8000d16:	6a3b      	ldr	r3, [r7, #32]
 8000d18:	4413      	add	r3, r2
 8000d1a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000d1e:	61bb      	str	r3, [r7, #24]

		// Calculate the bit_word_offset and bit_band_alias_address
		uint32_t bit_word_offset = (byte_offset << 5) + (bitIndex << 2); // bit_word_offset = (byte_offset) * 32 + (bitIndex * 4)
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	015b      	lsls	r3, r3, #5
 8000d24:	69fa      	ldr	r2, [r7, #28]
 8000d26:	0092      	lsls	r2, r2, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	617b      	str	r3, [r7, #20]
		uint32_t bit_band_alias_address = SRAM_BB_BASE + bit_word_offset;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 8000d32:	613b      	str	r3, [r7, #16]
		*(volatile uint32_t *)bit_band_alias_address = (color ? 0 : 1);
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	f083 0301 	eor.w	r3, r3, #1
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	601a      	str	r2, [r3, #0]
	for (col = start_position_x - 1; col < start_position_x + length; col++) {
 8000d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d42:	3301      	adds	r3, #1
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	dbb1      	blt.n	8000cb6 <drawLine_H+0x72>
	}
}
 8000d52:	bf00      	nop
 8000d54:	bf00      	nop
 8000d56:	3738      	adds	r7, #56	; 0x38
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2000000c 	.word	0x2000000c

08000d60 <drawLine_V>:
			currentBuffer[start_position_y - 1][byteIndex] |= (1 << bitIndex);
		}
	}
}

void drawLine_V(int start_position_x, int start_position_y, int length, bool color) {
 8000d60:	b480      	push	{r7}
 8000d62:	b08b      	sub	sp, #44	; 0x2c
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	70fb      	strb	r3, [r7, #3]
	for (int row = start_position_y - 1; row < start_position_y + length; row++) {
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
 8000d74:	e028      	b.n	8000dc8 <drawLine_V+0x68>
		int byteIndex = (start_position_x - 1) >> 3; // byteIndex = x / 8
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	10db      	asrs	r3, r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
		int bitIndex = 7 - ((start_position_x - 1) & 7); // bitIndex = 7 - (x % 8)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	425b      	negs	r3, r3
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]

		// Calculate the byte offset within the buffer
		uint32_t byte_offset = (uint32_t)&currentBuffer[row][byteIndex] - SRAM_BASE;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <drawLine_V+0x84>)
 8000d8a:	6819      	ldr	r1, [r3, #0]
 8000d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d8e:	4613      	mov	r3, r2
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	1a9b      	subs	r3, r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	18ca      	adds	r2, r1, r3
 8000d98:	6a3b      	ldr	r3, [r7, #32]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000da0:	61bb      	str	r3, [r7, #24]

		// Calculate the bit_word_offset and bit_band_alias_address
		uint32_t bit_word_offset = (byte_offset << 5) + (bitIndex << 2); // bit_word_offset = (byte_offset) * 32 + (bitIndex * 4)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	015b      	lsls	r3, r3, #5
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	0092      	lsls	r2, r2, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	617b      	str	r3, [r7, #20]
		uint32_t bit_band_alias_address = SRAM_BB_BASE + bit_word_offset;
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 8000db4:	613b      	str	r3, [r7, #16]
		*(volatile uint32_t *)bit_band_alias_address = (color ? 0 : 1);
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	f083 0301 	eor.w	r3, r3, #1
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	601a      	str	r2, [r3, #0]
	for (int row = start_position_y - 1; row < start_position_y + length; row++) {
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dbd0      	blt.n	8000d76 <drawLine_V+0x16>
	}
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	372c      	adds	r7, #44	; 0x2c
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000000c 	.word	0x2000000c

08000de8 <initDisplayBuffer>:
	    	currentBuffer[row][col] = ~currentBuffer[row][col];
	    }
	}
}*/

void initDisplayBuffer(void) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	//memset(frontBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
	memset(currentBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <initDisplayBuffer+0x18>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000df4:	21ff      	movs	r1, #255	; 0xff
 8000df6:	4618      	mov	r0, r3
 8000df8:	f004 f955 	bl	80050a6 <memset>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000000c 	.word	0x2000000c

08000e04 <resetCurrentBufferLines>:

void initCurrentBuffer(void) {
	memset(currentBuffer, 0xFF, DISPLAY_HEIGHT * (DISPLAY_WIDTH / 8));
}

void resetCurrentBufferLines(uint8_t y_start, uint8_t y_end) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	4613      	mov	r3, r2
 8000e12:	71bb      	strb	r3, [r7, #6]
	for (int i = y_start; i <= y_end; i++) {
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	e00f      	b.n	8000e3a <resetCurrentBufferLines+0x36>
		memset(currentBuffer[i], 0xFF, sizeof(currentBuffer[i]));
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <resetCurrentBufferLines+0x48>)
 8000e1c:	6819      	ldr	r1, [r3, #0]
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	4613      	mov	r3, r2
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	1a9b      	subs	r3, r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	440b      	add	r3, r1
 8000e2a:	221e      	movs	r2, #30
 8000e2c:	21ff      	movs	r1, #255	; 0xff
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f004 f939 	bl	80050a6 <memset>
	for (int i = y_start; i <= y_end; i++) {
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	3301      	adds	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	ddeb      	ble.n	8000e1a <resetCurrentBufferLines+0x16>
	}
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000000c 	.word	0x2000000c

08000e50 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <LL_AHB2_GRP1_EnableClock>:
{
 8000e72:	b480      	push	{r7}
 8000e74:	b085      	sub	sp, #20
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4013      	ands	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b085      	sub	sp, #20
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b096      	sub	sp, #88	; 0x58
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	2250      	movs	r2, #80	; 0x50
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 f8bc 	bl	80050a6 <memset>
  if(hrtc->Instance==RTC)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_RTC_MspInit+0x54>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d115      	bne.n	8000f64 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f3c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f002 f93b 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f54:	f7ff fd28 	bl	80009a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f58:	f7ff ff7a 	bl	8000e50 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000f5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f60:	f7ff ffa0 	bl	8000ea4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	3758      	adds	r7, #88	; 0x58
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40002800 	.word	0x40002800

08000f70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <HAL_SPI_MspInit+0x5c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d117      	bne.n	8000fc2 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f92:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f96:	f7ff ff9e 	bl	8000ed6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f7ff ff69 	bl	8000e72 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000fa0:	23a0      	movs	r3, #160	; 0xa0
 8000fa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f000 fb2d 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3720      	adds	r7, #32
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40013000 	.word	0x40013000

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b09c      	sub	sp, #112	; 0x70
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2250      	movs	r2, #80	; 0x50
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 f858 	bl	80050a6 <memset>
  if(huart->Instance==USART1)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <HAL_UART_MspInit+0x84>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d124      	bne.n	800104a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001000:	2301      	movs	r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	4618      	mov	r0, r3
 800100e:	f002 f8d9 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001018:	f7ff fcc6 	bl	80009a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800101c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001020:	f7ff ff59 	bl	8000ed6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001024:	2002      	movs	r0, #2
 8001026:	f7ff ff24 	bl	8000e72 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800102a:	23c0      	movs	r3, #192	; 0xc0
 800102c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001032:	2301      	movs	r3, #1
 8001034:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800103a:	2307      	movs	r3, #7
 800103c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001042:	4619      	mov	r1, r3
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <HAL_UART_MspInit+0x88>)
 8001046:	f000 fae9 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3770      	adds	r7, #112	; 0x70
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40013800 	.word	0x40013800
 8001058:	48000400 	.word	0x48000400

0800105c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b09c      	sub	sp, #112	; 0x70
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2250      	movs	r2, #80	; 0x50
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f004 f812 	bl	80050a6 <memset>
  if(hpcd->Instance==USB)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a1f      	ldr	r2, [pc, #124]	; (8001104 <HAL_PCD_MspInit+0xa8>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d136      	bne.n	80010fa <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800108c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001090:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001092:	2318      	movs	r3, #24
 8001094:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800109a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800109c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80010a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80010a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ac:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80010ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 f883 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80010c4:	f7ff fc70 	bl	80009a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	2001      	movs	r0, #1
 80010ca:	f7ff fed2 	bl	8000e72 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80010e0:	230a      	movs	r3, #10
 80010e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010e8:	4619      	mov	r1, r3
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ee:	f000 fa95 	bl	800161c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010f2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80010f6:	f7ff fed5 	bl	8000ea4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3770      	adds	r7, #112	; 0x70
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40006800 	.word	0x40006800

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 f902 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <RTC_WKUP_IRQHandler+0x10>)
 8001162:	f002 fe0b 	bl	8003d7c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000074 	.word	0x20000074

08001170 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <SystemInit+0x98>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117a:	4a23      	ldr	r2, [pc, #140]	; (8001208 <SystemInit+0x98>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001198:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800119c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800119e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <SystemInit+0x9c>)
 80011aa:	4013      	ands	r3, r2
 80011ac:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80011ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ba:	f023 0305 	bic.w	r3, r3, #5
 80011be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80011c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80011d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011da:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <SystemInit+0xa0>)
 80011dc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80011de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <SystemInit+0xa0>)
 80011e4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00
 800120c:	faf6fefb 	.word	0xfaf6fefb
 8001210:	22041000 	.word	0x22041000

08001214 <setFont>:
	.char_index = test_font_index,
};

extern Font* currentFont;

void setFont(Font* font) {
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    currentFont = font;
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <setFont+0x1c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20003e94 	.word	0x20003e94

08001234 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001234:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001236:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001238:	3304      	adds	r3, #4

0800123a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800123e:	d3f9      	bcc.n	8001234 <CopyDataInit>
  bx lr
 8001240:	4770      	bx	lr

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001242:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001244:	3004      	adds	r0, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001246:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>
  bx lr
 800124a:	4770      	bx	lr

0800124c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800124e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001250:	f7ff ff8e 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001254:	480b      	ldr	r0, [pc, #44]	; (8001284 <LoopForever+0x6>)
 8001256:	490c      	ldr	r1, [pc, #48]	; (8001288 <LoopForever+0xa>)
 8001258:	4a0c      	ldr	r2, [pc, #48]	; (800128c <LoopForever+0xe>)
 800125a:	2300      	movs	r3, #0
 800125c:	f7ff ffed 	bl	800123a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001260:	480b      	ldr	r0, [pc, #44]	; (8001290 <LoopForever+0x12>)
 8001262:	490c      	ldr	r1, [pc, #48]	; (8001294 <LoopForever+0x16>)
 8001264:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <LoopForever+0x1a>)
 8001266:	2300      	movs	r3, #0
 8001268:	f7ff ffe7 	bl	800123a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <LoopForever+0x1e>)
 800126e:	490c      	ldr	r1, [pc, #48]	; (80012a0 <LoopForever+0x22>)
 8001270:	2300      	movs	r3, #0
 8001272:	f7ff ffe8 	bl	8001246 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001276:	f003 ff1f 	bl	80050b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800127a:	f7ff f949 	bl	8000510 <main>

0800127e <LoopForever>:

LoopForever:
  b LoopForever
 800127e:	e7fe      	b.n	800127e <LoopForever>
  ldr   r0, =_estack
 8001280:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001284:	20000008 	.word	0x20000008
 8001288:	20000058 	.word	0x20000058
 800128c:	08005ecc 	.word	0x08005ecc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001290:	20030000 	.word	0x20030000
 8001294:	20030000 	.word	0x20030000
 8001298:	08005f1c 	.word	0x08005f1c
  INIT_BSS _sbss, _ebss
 800129c:	20000058 	.word	0x20000058
 80012a0:	20003e9c 	.word	0x20003e9c

080012a4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC1_IRQHandler>
	...

080012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_Init+0x3c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <HAL_Init+0x3c>)
 80012b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012be:	2003      	movs	r0, #3
 80012c0:	f000 f96c 	bl	800159c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 f80f 	bl	80012e8 <HAL_InitTick>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	e001      	b.n	80012da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012d6:	f7ff fe17 	bl	8000f08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012da:	79fb      	ldrb	r3, [r7, #7]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	58004000 	.word	0x58004000

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_InitTick+0x6c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d024      	beq.n	8001346 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012fc:	f001 fcc2 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8001300:	4602      	mov	r2, r0
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_InitTick+0x6c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001310:	fbb2 f3f3 	udiv	r3, r2, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f974 	bl	8001602 <HAL_SYSTICK_Config>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10f      	bne.n	8001340 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b0f      	cmp	r3, #15
 8001324:	d809      	bhi.n	800133a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001326:	2200      	movs	r2, #0
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	f04f 30ff 	mov.w	r0, #4294967295
 800132e:	f000 f940 	bl	80015b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001332:	4a09      	ldr	r2, [pc, #36]	; (8001358 <HAL_InitTick+0x70>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e007      	b.n	800134a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	e004      	b.n	800134a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	e001      	b.n	800134a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000054 	.word	0x20000054
 8001358:	20000050 	.word	0x20000050

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x20>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_IncTick+0x24>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000054 	.word	0x20000054
 8001380:	20003e98 	.word	0x20003e98

08001384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20003e98 	.word	0x20003e98

0800139c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_GetTickPrio+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000050 	.word	0x20000050

080013b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff ffe2 	bl	8001384 <HAL_GetTick>
 80013c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d005      	beq.n	80013da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_Delay+0x44>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013da:	bf00      	nop
 80013dc:	f7ff ffd2 	bl	8001384 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d8f7      	bhi.n	80013dc <HAL_Delay+0x28>
  {
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000054 	.word	0x20000054

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <__NVIC_EnableIRQ+0x38>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000e100 	.word	0xe000e100

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001568:	d301      	bcc.n	800156e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156a:	2301      	movs	r3, #1
 800156c:	e00f      	b.n	800158e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <SysTick_Config+0x40>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001576:	210f      	movs	r1, #15
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f7ff ff8e 	bl	800149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <SysTick_Config+0x40>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SysTick_Config+0x40>)
 8001588:	2207      	movs	r2, #7
 800158a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	e000e010 	.word	0xe000e010

0800159c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff29 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff40 	bl	8001444 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff90 	bl	80014f0 <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5f 	bl	800149c <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff33 	bl	8001460 <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffa4 	bl	8001558 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162a:	e14c      	b.n	80018c6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2101      	movs	r1, #1
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	4013      	ands	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 813e 	beq.w	80018c0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b01      	cmp	r3, #1
 800164e:	d005      	beq.n	800165c <HAL_GPIO_Init+0x40>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d130      	bne.n	80016be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001692:	2201      	movs	r2, #1
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	f003 0201 	and.w	r2, r3, #1
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d017      	beq.n	80016fa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d123      	bne.n	800174e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	08da      	lsrs	r2, r3, #3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3208      	adds	r2, #8
 800170e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	220f      	movs	r2, #15
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	691a      	ldr	r2, [r3, #16]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	08da      	lsrs	r2, r3, #3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3208      	adds	r2, #8
 8001748:	6939      	ldr	r1, [r7, #16]
 800174a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0203 	and.w	r2, r3, #3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8098 	beq.w	80018c0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001790:	4a54      	ldr	r2, [pc, #336]	; (80018e4 <HAL_GPIO_Init+0x2c8>)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017ba:	d019      	beq.n	80017f0 <HAL_GPIO_Init+0x1d4>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a4a      	ldr	r2, [pc, #296]	; (80018e8 <HAL_GPIO_Init+0x2cc>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d013      	beq.n	80017ec <HAL_GPIO_Init+0x1d0>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a49      	ldr	r2, [pc, #292]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d00d      	beq.n	80017e8 <HAL_GPIO_Init+0x1cc>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a48      	ldr	r2, [pc, #288]	; (80018f0 <HAL_GPIO_Init+0x2d4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d007      	beq.n	80017e4 <HAL_GPIO_Init+0x1c8>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a47      	ldr	r2, [pc, #284]	; (80018f4 <HAL_GPIO_Init+0x2d8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d101      	bne.n	80017e0 <HAL_GPIO_Init+0x1c4>
 80017dc:	2304      	movs	r3, #4
 80017de:	e008      	b.n	80017f2 <HAL_GPIO_Init+0x1d6>
 80017e0:	2307      	movs	r3, #7
 80017e2:	e006      	b.n	80017f2 <HAL_GPIO_Init+0x1d6>
 80017e4:	2303      	movs	r3, #3
 80017e6:	e004      	b.n	80017f2 <HAL_GPIO_Init+0x1d6>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e002      	b.n	80017f2 <HAL_GPIO_Init+0x1d6>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <HAL_GPIO_Init+0x1d6>
 80017f0:	2300      	movs	r3, #0
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	f002 0203 	and.w	r2, r2, #3
 80017f8:	0092      	lsls	r2, r2, #2
 80017fa:	4093      	lsls	r3, r2
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001802:	4938      	ldr	r1, [pc, #224]	; (80018e4 <HAL_GPIO_Init+0x2c8>)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001810:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <HAL_GPIO_Init+0x2dc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	43db      	mvns	r3, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001834:	4a30      	ldr	r2, [pc, #192]	; (80018f8 <HAL_GPIO_Init+0x2dc>)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <HAL_GPIO_Init+0x2dc>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800185e:	4a26      	ldr	r2, [pc, #152]	; (80018f8 <HAL_GPIO_Init+0x2dc>)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_GPIO_Init+0x2dc>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800188a:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_GPIO_Init+0x2dc>)
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_GPIO_Init+0x2dc>)
 8001894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <HAL_GPIO_Init+0x2dc>)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3301      	adds	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f47f aeab 	bne.w	800162c <HAL_GPIO_Init+0x10>
  }
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40010000 	.word	0x40010000
 80018e8:	48000400 	.word	0x48000400
 80018ec:	48000800 	.word	0x48000800
 80018f0:	48000c00 	.word	0x48000c00
 80018f4:	48001000 	.word	0x48001000
 80018f8:	58000800 	.word	0x58000800

080018fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
 8001908:	4613      	mov	r3, r2
 800190a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800190c:	787b      	ldrb	r3, [r7, #1]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001918:	e002      	b.n	8001920 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0c0      	b.n	8001ac0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fb82 	bl	800105c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2203      	movs	r2, #3
 800195c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f003 fb65 	bl	8005034 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196a:	2300      	movs	r3, #0
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	e03e      	b.n	80019ee <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	3311      	adds	r3, #17
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	440b      	add	r3, r1
 8001992:	3310      	adds	r3, #16
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	440b      	add	r3, r1
 80019a6:	3313      	adds	r3, #19
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	440b      	add	r3, r1
 80019ba:	3320      	adds	r3, #32
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	3324      	adds	r3, #36	; 0x24
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	3301      	adds	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	791b      	ldrb	r3, [r3, #4]
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d3bb      	bcc.n	8001970 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e044      	b.n	8001a88 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019fe:	7bfa      	ldrb	r2, [r7, #15]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	440b      	add	r3, r1
 8001a22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001a26:	7bfa      	ldrb	r2, [r7, #15]
 8001a28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a40:	7bfa      	ldrb	r2, [r7, #15]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	440b      	add	r3, r1
 8001a4e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	440b      	add	r3, r1
 8001a7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	3301      	adds	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	791b      	ldrb	r3, [r3, #4]
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d3b5      	bcc.n	80019fe <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a9e:	f003 fae4 	bl	800506a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7a9b      	ldrb	r3, [r3, #10]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d102      	bne.n	8001abe <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f805 	bl	8001ac8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	f043 0302 	orr.w	r3, r3, #2
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	58000400 	.word	0x58000400

08001b3c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	58000400 	.word	0x58000400

08001b58 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b6a:	d101      	bne.n	8001b70 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_RCC_HSE_Enable>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_RCC_HSE_Disable>:
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_RCC_HSE_IsReady>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bca:	d101      	bne.n	8001bd0 <LL_RCC_HSE_IsReady+0x18>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <LL_RCC_HSE_IsReady+0x1a>
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_RCC_HSI_Enable>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_RCC_HSI_Disable>:
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c0c:	6013      	str	r3, [r2, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_RCC_HSI_IsReady>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c2a:	d101      	bne.n	8001c30 <LL_RCC_HSI_IsReady+0x18>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <LL_RCC_HSI_IsReady+0x1a>
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_RCC_HSI_SetCalibTrimming>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_RCC_HSI48_Enable>:
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_RCC_HSI48_Disable>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <LL_RCC_HSI48_IsReady>:
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d101      	bne.n	8001cc2 <LL_RCC_HSI48_IsReady+0x18>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <LL_RCC_HSI48_IsReady+0x1a>
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_RCC_LSE_Enable>:
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_RCC_LSE_Disable>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_RCC_LSE_EnableBypass>:
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_RCC_LSE_DisableBypass>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d44:	f023 0304 	bic.w	r3, r3, #4
 8001d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_RCC_LSE_IsReady>:
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d101      	bne.n	8001d6e <LL_RCC_LSE_IsReady+0x18>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <LL_RCC_LSE_IsReady+0x1a>
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_RCC_LSI1_Enable>:
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_RCC_LSI1_Disable>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_RCC_LSI1_IsReady>:
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d101      	bne.n	8001dd6 <LL_RCC_LSI1_IsReady+0x18>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <LL_RCC_LSI1_IsReady+0x1a>
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_RCC_LSI2_Enable>:
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df2:	f043 0304 	orr.w	r3, r3, #4
 8001df6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_RCC_LSI2_Disable>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_RCC_LSI2_IsReady>:
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d101      	bne.n	8001e3e <LL_RCC_LSI2_IsReady+0x18>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <LL_RCC_LSI2_IsReady+0x1a>
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <LL_RCC_LSI2_SetTrimming>:
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_RCC_MSI_Enable>:
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_RCC_MSI_Disable>:
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	6013      	str	r3, [r2, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_RCC_MSI_IsReady>:
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d101      	bne.n	8001eca <LL_RCC_MSI_IsReady+0x16>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <LL_RCC_MSI_IsReady+0x18>
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_RCC_MSI_SetRange>:
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_RCC_MSI_GetRange>:
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f0e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2bb0      	cmp	r3, #176	; 0xb0
 8001f14:	d901      	bls.n	8001f1a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8001f16:	23b0      	movs	r3, #176	; 0xb0
 8001f18:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001f1a:	687b      	ldr	r3, [r7, #4]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <LL_RCC_SetSysClkSource>:
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f023 0203 	bic.w	r2, r3, #3
 8001f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LL_RCC_GetSysClkSource>:
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 030c 	and.w	r3, r3, #12
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_RCC_SetAHBPrescaler>:
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <LL_C2_RCC_SetAHBPrescaler>:
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_RCC_SetAHB4Prescaler>:
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ff6:	f023 020f 	bic.w	r2, r3, #15
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_RCC_SetAPB1Prescaler>:
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800201c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4313      	orrs	r3, r2
 800202e:	608b      	str	r3, [r1, #8]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_RCC_SetAPB2Prescaler>:
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800204e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_RCC_GetAHBPrescaler>:
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_RCC_GetAHB4Prescaler>:
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002084:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_RCC_GetAPB1Prescaler>:
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_RCC_GetAPB2Prescaler>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80020b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f8:	6013      	str	r3, [r2, #0]
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002116:	d101      	bne.n	800211c <LL_RCC_PLL_IsReady+0x18>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <LL_RCC_PLL_IsReady+0x1a>
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800212c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800215e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0303 	and.w	r3, r3, #3
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800218e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219c:	d101      	bne.n	80021a2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021c2:	d101      	bne.n	80021c8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80021d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d101      	bne.n	80021ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800220c:	d101      	bne.n	8002212 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002230:	d101      	bne.n	8002236 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b08d      	sub	sp, #52	; 0x34
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e363      	b.n	800291e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 808d 	beq.w	800237e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002264:	f7ff fe89 	bl	8001f7a <LL_RCC_GetSysClkSource>
 8002268:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800226a:	f7ff ff82 	bl	8002172 <LL_RCC_PLL_GetMainSource>
 800226e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_RCC_OscConfig+0x3e>
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	2b0c      	cmp	r3, #12
 800227a:	d147      	bne.n	800230c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	2b01      	cmp	r3, #1
 8002280:	d144      	bne.n	800230c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e347      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002292:	f7ff fe34 	bl	8001efe <LL_RCC_MSI_GetRange>
 8002296:	4603      	mov	r3, r0
 8002298:	429c      	cmp	r4, r3
 800229a:	d914      	bls.n	80022c6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fd2f 	bl	8002d04 <RCC_SetFlashLatencyFromMSIRange>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e336      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fe0e 	bl	8001ed6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fe32 	bl	8001f28 <LL_RCC_MSI_SetCalibTrimming>
 80022c4:	e013      	b.n	80022ee <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fe03 	bl	8001ed6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fe27 	bl	8001f28 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fd10 	bl	8002d04 <RCC_SetFlashLatencyFromMSIRange>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e317      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80022ee:	f000 fcc9 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4aa4      	ldr	r2, [pc, #656]	; (8002588 <HAL_RCC_OscConfig+0x344>)
 80022f6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022f8:	4ba4      	ldr	r3, [pc, #656]	; (800258c <HAL_RCC_OscConfig+0x348>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fff3 	bl	80012e8 <HAL_InitTick>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d039      	beq.n	800237c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e308      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d01e      	beq.n	8002352 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002314:	f7ff fdb0 	bl	8001e78 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002318:	f7ff f834 	bl	8001384 <HAL_GetTick>
 800231c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002320:	f7ff f830 	bl	8001384 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e2f5      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002332:	f7ff fdbf 	bl	8001eb4 <LL_RCC_MSI_IsReady>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f1      	beq.n	8002320 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fdc8 	bl	8001ed6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fdec 	bl	8001f28 <LL_RCC_MSI_SetCalibTrimming>
 8002350:	e015      	b.n	800237e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002352:	f7ff fda0 	bl	8001e96 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002356:	f7ff f815 	bl	8001384 <HAL_GetTick>
 800235a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800235e:	f7ff f811 	bl	8001384 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e2d6      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002370:	f7ff fda0 	bl	8001eb4 <LL_RCC_MSI_IsReady>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f1      	bne.n	800235e <HAL_RCC_OscConfig+0x11a>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800237c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d047      	beq.n	800241a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238a:	f7ff fdf6 	bl	8001f7a <LL_RCC_GetSysClkSource>
 800238e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002390:	f7ff feef 	bl	8002172 <LL_RCC_PLL_GetMainSource>
 8002394:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	2b08      	cmp	r3, #8
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_OscConfig+0x164>
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	2b0c      	cmp	r3, #12
 80023a0:	d108      	bne.n	80023b4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d105      	bne.n	80023b4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d134      	bne.n	800241a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e2b4      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023bc:	d102      	bne.n	80023c4 <HAL_RCC_OscConfig+0x180>
 80023be:	f7ff fbdd 	bl	8001b7c <LL_RCC_HSE_Enable>
 80023c2:	e001      	b.n	80023c8 <HAL_RCC_OscConfig+0x184>
 80023c4:	f7ff fbe9 	bl	8001b9a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d012      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe ffd8 	bl	8001384 <HAL_GetTick>
 80023d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d8:	f7fe ffd4 	bl	8001384 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	; 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e299      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80023ea:	f7ff fbe5 	bl	8001bb8 <LL_RCC_HSE_IsReady>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f1      	beq.n	80023d8 <HAL_RCC_OscConfig+0x194>
 80023f4:	e011      	b.n	800241a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f6:	f7fe ffc5 	bl	8001384 <HAL_GetTick>
 80023fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fe:	f7fe ffc1 	bl	8001384 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b64      	cmp	r3, #100	; 0x64
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e286      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002410:	f7ff fbd2 	bl	8001bb8 <LL_RCC_HSE_IsReady>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f1      	bne.n	80023fe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d04c      	beq.n	80024c0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002426:	f7ff fda8 	bl	8001f7a <LL_RCC_GetSysClkSource>
 800242a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800242c:	f7ff fea1 	bl	8002172 <LL_RCC_PLL_GetMainSource>
 8002430:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d005      	beq.n	8002444 <HAL_RCC_OscConfig+0x200>
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d10e      	bne.n	800245c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d10b      	bne.n	800245c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e266      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fbf1 	bl	8001c3c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800245a:	e031      	b.n	80024c0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d019      	beq.n	8002498 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002464:	f7ff fbba 	bl	8001bdc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7fe ff8c 	bl	8001384 <HAL_GetTick>
 800246c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002470:	f7fe ff88 	bl	8001384 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e24d      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002482:	f7ff fbc9 	bl	8001c18 <LL_RCC_HSI_IsReady>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f1      	beq.n	8002470 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fbd3 	bl	8001c3c <LL_RCC_HSI_SetCalibTrimming>
 8002496:	e013      	b.n	80024c0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002498:	f7ff fbaf 	bl	8001bfa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe ff72 	bl	8001384 <HAL_GetTick>
 80024a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a4:	f7fe ff6e 	bl	8001384 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e233      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80024b6:	f7ff fbaf 	bl	8001c18 <LL_RCC_HSI_IsReady>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f1      	bne.n	80024a4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80a3 	beq.w	8002620 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d076      	beq.n	80025d0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d046      	beq.n	800257c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80024ee:	f7ff fc66 	bl	8001dbe <LL_RCC_LSI1_IsReady>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d113      	bne.n	8002520 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80024f8:	f7ff fc3f 	bl	8001d7a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024fc:	f7fe ff42 	bl	8001384 <HAL_GetTick>
 8002500:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002504:	f7fe ff3e 	bl	8001384 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e203      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002516:	f7ff fc52 	bl	8001dbe <LL_RCC_LSI1_IsReady>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f1      	beq.n	8002504 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002520:	f7ff fc5f 	bl	8001de2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe ff2e 	bl	8001384 <HAL_GetTick>
 8002528:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800252c:	f7fe ff2a 	bl	8001384 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b03      	cmp	r3, #3
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e1ef      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800253e:	f7ff fc72 	bl	8001e26 <LL_RCC_LSI2_IsReady>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f1      	beq.n	800252c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fc7c 	bl	8001e4a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002552:	f7ff fc23 	bl	8001d9c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe ff15 	bl	8001384 <HAL_GetTick>
 800255a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800255e:	f7fe ff11 	bl	8001384 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e1d6      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002570:	f7ff fc25 	bl	8001dbe <LL_RCC_LSI1_IsReady>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f1      	bne.n	800255e <HAL_RCC_OscConfig+0x31a>
 800257a:	e051      	b.n	8002620 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800257c:	f7ff fbfd 	bl	8001d7a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe ff00 	bl	8001384 <HAL_GetTick>
 8002584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002586:	e00c      	b.n	80025a2 <HAL_RCC_OscConfig+0x35e>
 8002588:	20000010 	.word	0x20000010
 800258c:	20000050 	.word	0x20000050
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002590:	f7fe fef8 	bl	8001384 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1bd      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80025a2:	f7ff fc0c 	bl	8001dbe <LL_RCC_LSI1_IsReady>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f1      	beq.n	8002590 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80025ac:	f7ff fc2a 	bl	8001e04 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025b2:	f7fe fee7 	bl	8001384 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1ac      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80025c4:	f7ff fc2f 	bl	8001e26 <LL_RCC_LSI2_IsReady>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f1      	bne.n	80025b2 <HAL_RCC_OscConfig+0x36e>
 80025ce:	e027      	b.n	8002620 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80025d0:	f7ff fc18 	bl	8001e04 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7fe fed6 	bl	8001384 <HAL_GetTick>
 80025d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025dc:	f7fe fed2 	bl	8001384 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e197      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80025ee:	f7ff fc1a 	bl	8001e26 <LL_RCC_LSI2_IsReady>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f1      	bne.n	80025dc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80025f8:	f7ff fbd0 	bl	8001d9c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fc:	f7fe fec2 	bl	8001384 <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002604:	f7fe febe 	bl	8001384 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e183      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002616:	f7ff fbd2 	bl	8001dbe <LL_RCC_LSI1_IsReady>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f1      	bne.n	8002604 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d05b      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262c:	4ba7      	ldr	r3, [pc, #668]	; (80028cc <HAL_RCC_OscConfig+0x688>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d114      	bne.n	8002662 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002638:	f7ff fa70 	bl	8001b1c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263c:	f7fe fea2 	bl	8001384 <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002644:	f7fe fe9e 	bl	8001384 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e163      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002656:	4b9d      	ldr	r3, [pc, #628]	; (80028cc <HAL_RCC_OscConfig+0x688>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d102      	bne.n	8002670 <HAL_RCC_OscConfig+0x42c>
 800266a:	f7ff fb30 	bl	8001cce <LL_RCC_LSE_Enable>
 800266e:	e00c      	b.n	800268a <HAL_RCC_OscConfig+0x446>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d104      	bne.n	8002682 <HAL_RCC_OscConfig+0x43e>
 8002678:	f7ff fb4b 	bl	8001d12 <LL_RCC_LSE_EnableBypass>
 800267c:	f7ff fb27 	bl	8001cce <LL_RCC_LSE_Enable>
 8002680:	e003      	b.n	800268a <HAL_RCC_OscConfig+0x446>
 8002682:	f7ff fb35 	bl	8001cf0 <LL_RCC_LSE_Disable>
 8002686:	f7ff fb55 	bl	8001d34 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d014      	beq.n	80026bc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002692:	f7fe fe77 	bl	8001384 <HAL_GetTick>
 8002696:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7fe fe73 	bl	8001384 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e136      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80026b0:	f7ff fb51 	bl	8001d56 <LL_RCC_LSE_IsReady>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0ef      	beq.n	800269a <HAL_RCC_OscConfig+0x456>
 80026ba:	e013      	b.n	80026e4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026bc:	f7fe fe62 	bl	8001384 <HAL_GetTick>
 80026c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80026c2:	e00a      	b.n	80026da <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7fe fe5e 	bl	8001384 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e121      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80026da:	f7ff fb3c 	bl	8001d56 <LL_RCC_LSE_IsReady>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1ef      	bne.n	80026c4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d02c      	beq.n	800274a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d014      	beq.n	8002722 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026f8:	f7ff fab5 	bl	8001c66 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe fe42 	bl	8001384 <HAL_GetTick>
 8002700:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002704:	f7fe fe3e 	bl	8001384 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e103      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002716:	f7ff fac8 	bl	8001caa <LL_RCC_HSI48_IsReady>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f1      	beq.n	8002704 <HAL_RCC_OscConfig+0x4c0>
 8002720:	e013      	b.n	800274a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002722:	f7ff fab1 	bl	8001c88 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002726:	f7fe fe2d 	bl	8001384 <HAL_GetTick>
 800272a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800272e:	f7fe fe29 	bl	8001384 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0ee      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002740:	f7ff fab3 	bl	8001caa <LL_RCC_HSI48_IsReady>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f1      	bne.n	800272e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 80e4 	beq.w	800291c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002754:	f7ff fc11 	bl	8001f7a <LL_RCC_GetSysClkSource>
 8002758:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800275a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	2b02      	cmp	r3, #2
 8002768:	f040 80b4 	bne.w	80028d4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0203 	and.w	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	429a      	cmp	r2, r3
 8002778:	d123      	bne.n	80027c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d11c      	bne.n	80027c2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	0a1b      	lsrs	r3, r3, #8
 800278c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d114      	bne.n	80027c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d10d      	bne.n	80027c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d05d      	beq.n	800287e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d058      	beq.n	800287a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0a1      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027da:	f7ff fc84 	bl	80020e6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027de:	f7fe fdd1 	bl	8001384 <HAL_GetTick>
 80027e2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe fdcd 	bl	8001384 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e092      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ef      	bne.n	80027e6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	4b30      	ldr	r3, [pc, #192]	; (80028d0 <HAL_RCC_OscConfig+0x68c>)
 800280e:	4013      	ands	r3, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002818:	4311      	orrs	r1, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800281e:	0212      	lsls	r2, r2, #8
 8002820:	4311      	orrs	r1, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002826:	4311      	orrs	r1, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800282c:	4311      	orrs	r1, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002832:	430a      	orrs	r2, r1
 8002834:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002838:	4313      	orrs	r3, r2
 800283a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800283c:	f7ff fc44 	bl	80020c8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800284a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002850:	f7fe fd98 	bl	8001384 <HAL_GetTick>
 8002854:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe fd94 	bl	8001384 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e059      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ef      	beq.n	8002858 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002878:	e050      	b.n	800291c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e04f      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d147      	bne.n	800291c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800288c:	f7ff fc1c 	bl	80020c8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800289a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028a0:	f7fe fd70 	bl	8001384 <HAL_GetTick>
 80028a4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fd6c 	bl	8001384 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e031      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ef      	beq.n	80028a8 <HAL_RCC_OscConfig+0x664>
 80028c8:	e028      	b.n	800291c <HAL_RCC_OscConfig+0x6d8>
 80028ca:	bf00      	nop
 80028cc:	58000400 	.word	0x58000400
 80028d0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b0c      	cmp	r3, #12
 80028d8:	d01e      	beq.n	8002918 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	f7ff fc04 	bl	80020e6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe fd51 	bl	8001384 <HAL_GetTick>
 80028e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe fd4d 	bl	8001384 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e012      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1ef      	bne.n	80028e6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_OscConfig+0x6e4>)
 8002912:	4013      	ands	r3, r2
 8002914:	60cb      	str	r3, [r1, #12]
 8002916:	e001      	b.n	800291c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3734      	adds	r7, #52	; 0x34
 8002922:	46bd      	mov	sp, r7
 8002924:	bd90      	pop	{r4, r7, pc}
 8002926:	bf00      	nop
 8002928:	eefefffc 	.word	0xeefefffc

0800292c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e12d      	b.n	8002b9c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002940:	4b98      	ldr	r3, [pc, #608]	; (8002ba4 <HAL_RCC_ClockConfig+0x278>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d91b      	bls.n	8002986 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b95      	ldr	r3, [pc, #596]	; (8002ba4 <HAL_RCC_ClockConfig+0x278>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 0207 	bic.w	r2, r3, #7
 8002956:	4993      	ldr	r1, [pc, #588]	; (8002ba4 <HAL_RCC_ClockConfig+0x278>)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800295e:	f7fe fd11 	bl	8001384 <HAL_GetTick>
 8002962:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002964:	e008      	b.n	8002978 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002966:	f7fe fd0d 	bl	8001384 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e111      	b.n	8002b9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002978:	4b8a      	ldr	r3, [pc, #552]	; (8002ba4 <HAL_RCC_ClockConfig+0x278>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d1ef      	bne.n	8002966 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d016      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fafb 	bl	8001f92 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800299c:	f7fe fcf2 	bl	8001384 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029a4:	f7fe fcee 	bl	8001384 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e0f2      	b.n	8002b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029b6:	f7ff fbe8 	bl	800218a <LL_RCC_IsActiveFlag_HPRE>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f1      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d016      	beq.n	80029fa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff faf2 	bl	8001fba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029d6:	f7fe fcd5 	bl	8001384 <HAL_GetTick>
 80029da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029de:	f7fe fcd1 	bl	8001384 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e0d5      	b.n	8002b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80029f0:	f7ff fbdd 	bl	80021ae <LL_RCC_IsActiveFlag_C2HPRE>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f1      	beq.n	80029de <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d016      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff faeb 	bl	8001fe6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a10:	f7fe fcb8 	bl	8001384 <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a18:	f7fe fcb4 	bl	8001384 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e0b8      	b.n	8002b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a2a:	f7ff fbd3 	bl	80021d4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f1      	beq.n	8002a18 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d016      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fae5 	bl	8002014 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a4a:	f7fe fc9b 	bl	8001384 <HAL_GetTick>
 8002a4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a52:	f7fe fc97 	bl	8001384 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e09b      	b.n	8002b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a64:	f7ff fbc9 	bl	80021fa <LL_RCC_IsActiveFlag_PPRE1>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f1      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d017      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fadb 	bl	800203c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a86:	f7fe fc7d 	bl	8001384 <HAL_GetTick>
 8002a8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a8e:	f7fe fc79 	bl	8001384 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e07d      	b.n	8002b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002aa0:	f7ff fbbd 	bl	800221e <LL_RCC_IsActiveFlag_PPRE2>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f1      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d043      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d106      	bne.n	8002acc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002abe:	f7ff f87b 	bl	8001bb8 <LL_RCC_HSE_IsReady>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11e      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e067      	b.n	8002b9c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ad4:	f7ff fb16 	bl	8002104 <LL_RCC_PLL_IsReady>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d113      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e05c      	b.n	8002b9c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002aea:	f7ff f9e3 	bl	8001eb4 <LL_RCC_MSI_IsReady>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d108      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e051      	b.n	8002b9c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002af8:	f7ff f88e 	bl	8001c18 <LL_RCC_HSI_IsReady>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e04a      	b.n	8002b9c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fa21 	bl	8001f52 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b10:	f7fe fc38 	bl	8001384 <HAL_GetTick>
 8002b14:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b18:	f7fe fc34 	bl	8001384 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e036      	b.n	8002b9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2e:	f7ff fa24 	bl	8001f7a <LL_RCC_GetSysClkSource>
 8002b32:	4602      	mov	r2, r0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d1ec      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_RCC_ClockConfig+0x278>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d21b      	bcs.n	8002b84 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4c:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_RCC_ClockConfig+0x278>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f023 0207 	bic.w	r2, r3, #7
 8002b54:	4913      	ldr	r1, [pc, #76]	; (8002ba4 <HAL_RCC_ClockConfig+0x278>)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fc12 	bl	8001384 <HAL_GetTick>
 8002b60:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b64:	f7fe fc0e 	bl	8001384 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e012      	b.n	8002b9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCC_ClockConfig+0x278>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d1ef      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b84:	f000 f87e 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4a07      	ldr	r2, [pc, #28]	; (8002ba8 <HAL_RCC_ClockConfig+0x27c>)
 8002b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002b8e:	f7fe fc05 	bl	800139c <HAL_GetTickPrio>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe fba7 	bl	80012e8 <HAL_InitTick>
 8002b9a:	4603      	mov	r3, r0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	58004000 	.word	0x58004000
 8002ba8:	20000010 	.word	0x20000010

08002bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bb2:	f7ff f9e2 	bl	8001f7a <LL_RCC_GetSysClkSource>
 8002bb6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10a      	bne.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002bbe:	f7ff f99e 	bl	8001efe <LL_RCC_MSI_GetRange>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	4a2b      	ldr	r2, [pc, #172]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	e04b      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d102      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bda:	4b28      	ldr	r3, [pc, #160]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	e045      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d10a      	bne.n	8002bfc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002be6:	f7fe ffb7 	bl	8001b58 <LL_RCC_HSE_IsEnabledDiv2>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d102      	bne.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002bf0:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e03a      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002bf6:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	e037      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002bfc:	f7ff fab9 	bl	8002172 <LL_RCC_PLL_GetMainSource>
 8002c00:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d003      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x64>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x6a>
 8002c0e:	e00d      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c12:	60bb      	str	r3, [r7, #8]
        break;
 8002c14:	e015      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c16:	f7fe ff9f 	bl	8001b58 <LL_RCC_HSE_IsEnabledDiv2>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d102      	bne.n	8002c26 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c22:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c24:	e00d      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002c26:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c28:	60bb      	str	r3, [r7, #8]
        break;
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c2c:	f7ff f967 	bl	8001efe <LL_RCC_MSI_GetRange>
 8002c30:	4603      	mov	r3, r0
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	4a0f      	ldr	r2, [pc, #60]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3e:	60bb      	str	r3, [r7, #8]
        break;
 8002c40:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002c42:	f7ff fa71 	bl	8002128 <LL_RCC_PLL_GetN>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	fb03 f402 	mul.w	r4, r3, r2
 8002c4e:	f7ff fa84 	bl	800215a <LL_RCC_PLL_GetDivider>
 8002c52:	4603      	mov	r3, r0
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	3301      	adds	r3, #1
 8002c58:	fbb4 f4f3 	udiv	r4, r4, r3
 8002c5c:	f7ff fa71 	bl	8002142 <LL_RCC_PLL_GetR>
 8002c60:	4603      	mov	r3, r0
 8002c62:	0f5b      	lsrs	r3, r3, #29
 8002c64:	3301      	adds	r3, #1
 8002c66:	fbb4 f3f3 	udiv	r3, r4, r3
 8002c6a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd90      	pop	{r4, r7, pc}
 8002c76:	bf00      	nop
 8002c78:	080051c0 	.word	0x080051c0
 8002c7c:	00f42400 	.word	0x00f42400
 8002c80:	01e84800 	.word	0x01e84800

08002c84 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c84:	b598      	push	{r3, r4, r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002c88:	f7ff ff90 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	f7ff f9e9 	bl	8002064 <LL_RCC_GetAHBPrescaler>
 8002c92:	4603      	mov	r3, r0
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd98      	pop	{r3, r4, r7, pc}
 8002ca8:	08005160 	.word	0x08005160

08002cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cac:	b598      	push	{r3, r4, r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002cb0:	f7ff ffe8 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	f7ff f9ef 	bl	8002098 <LL_RCC_GetAPB1Prescaler>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd98      	pop	{r3, r4, r7, pc}
 8002cd4:	080051a0 	.word	0x080051a0

08002cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd8:	b598      	push	{r3, r4, r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002cdc:	f7ff ffd2 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	f7ff f9e5 	bl	80020b0 <LL_RCC_GetAPB2Prescaler>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	0adb      	lsrs	r3, r3, #11
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd98      	pop	{r3, r4, r7, pc}
 8002d00:	080051a0 	.word	0x080051a0

08002d04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2bb0      	cmp	r3, #176	; 0xb0
 8002d10:	d903      	bls.n	8002d1a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e007      	b.n	8002d2a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	4a11      	ldr	r2, [pc, #68]	; (8002d68 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d28:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002d2a:	f7ff f9a7 	bl	800207c <LL_RCC_GetAHB4Prescaler>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	4a0d      	ldr	r2, [pc, #52]	; (8002d6c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	0c9c      	lsrs	r4, r3, #18
 8002d4e:	f7fe fef5 	bl	8001b3c <HAL_PWREx_GetVoltageRange>
 8002d52:	4603      	mov	r3, r0
 8002d54:	4619      	mov	r1, r3
 8002d56:	4620      	mov	r0, r4
 8002d58:	f000 f80c 	bl	8002d74 <RCC_SetFlashLatency>
 8002d5c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}
 8002d66:	bf00      	nop
 8002d68:	080051c0 	.word	0x080051c0
 8002d6c:	08005160 	.word	0x08005160
 8002d70:	431bde83 	.word	0x431bde83

08002d74 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b093      	sub	sp, #76	; 0x4c
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002d7e:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <RCC_SetFlashLatency+0xe8>)
 8002d80:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002d84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002d8a:	4a35      	ldr	r2, [pc, #212]	; (8002e60 <RCC_SetFlashLatency+0xec>)
 8002d8c:	f107 031c 	add.w	r3, r7, #28
 8002d90:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002d96:	4b33      	ldr	r3, [pc, #204]	; (8002e64 <RCC_SetFlashLatency+0xf0>)
 8002d98:	f107 040c 	add.w	r4, r7, #12
 8002d9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002da2:	2300      	movs	r3, #0
 8002da4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dac:	d11a      	bne.n	8002de4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	643b      	str	r3, [r7, #64]	; 0x40
 8002db2:	e013      	b.n	8002ddc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	3348      	adds	r3, #72	; 0x48
 8002dba:	443b      	add	r3, r7
 8002dbc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d807      	bhi.n	8002dd6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	3348      	adds	r3, #72	; 0x48
 8002dcc:	443b      	add	r3, r7
 8002dce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002dd2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002dd4:	e020      	b.n	8002e18 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd8:	3301      	adds	r3, #1
 8002dda:	643b      	str	r3, [r7, #64]	; 0x40
 8002ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d9e8      	bls.n	8002db4 <RCC_SetFlashLatency+0x40>
 8002de2:	e019      	b.n	8002e18 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de8:	e013      	b.n	8002e12 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	3348      	adds	r3, #72	; 0x48
 8002df0:	443b      	add	r3, r7
 8002df2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d807      	bhi.n	8002e0c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	3348      	adds	r3, #72	; 0x48
 8002e02:	443b      	add	r3, r7
 8002e04:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e08:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002e0a:	e005      	b.n	8002e18 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0e:	3301      	adds	r3, #1
 8002e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d9e8      	bls.n	8002dea <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <RCC_SetFlashLatency+0xf4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f023 0207 	bic.w	r2, r3, #7
 8002e20:	4911      	ldr	r1, [pc, #68]	; (8002e68 <RCC_SetFlashLatency+0xf4>)
 8002e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e28:	f7fe faac 	bl	8001384 <HAL_GetTick>
 8002e2c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e2e:	e008      	b.n	8002e42 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e30:	f7fe faa8 	bl	8001384 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e007      	b.n	8002e52 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <RCC_SetFlashLatency+0xf4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d1ef      	bne.n	8002e30 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	374c      	adds	r7, #76	; 0x4c
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd90      	pop	{r4, r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	08005134 	.word	0x08005134
 8002e60:	08005144 	.word	0x08005144
 8002e64:	08005150 	.word	0x08005150
 8002e68:	58004000 	.word	0x58004000

08002e6c <LL_RCC_LSE_IsEnabled>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <LL_RCC_LSE_IsEnabled+0x18>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <LL_RCC_LSE_IsEnabled+0x1a>
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_RCC_LSE_IsReady>:
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d101      	bne.n	8002ea8 <LL_RCC_LSE_IsReady+0x18>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <LL_RCC_LSE_IsReady+0x1a>
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_RCC_MSI_EnablePLLMode>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec2:	f043 0304 	orr.w	r3, r3, #4
 8002ec6:	6013      	str	r3, [r2, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_RCC_SetRFWKPClockSource>:
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <LL_RCC_SetSMPSClockSource>:
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	f023 0203 	bic.w	r2, r3, #3
 8002f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_RCC_SetSMPSPrescaler>:
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <LL_RCC_SetUSARTClockSource>:
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f023 0203 	bic.w	r2, r3, #3
 8002f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <LL_RCC_SetLPUARTClockSource>:
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_RCC_SetI2CClockSource>:
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_RCC_SetLPTIMClockSource>:
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_RCC_SetSAIClockSource>:
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003024:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <LL_RCC_SetRNGClockSource>:
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003050:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_RCC_SetCLK48ClockSource>:
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003080:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_RCC_SetUSBClockSource>:
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ffe3 	bl	800306c <LL_RCC_SetCLK48ClockSource>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <LL_RCC_SetADCClockSource>:
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80030b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_RCC_SetRTCClockSource>:
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80030e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <LL_RCC_GetRTCClockSource>:
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800310a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_RCC_ForceBackupDomainReset>:
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_RCC_PLLSAI1_Enable>:
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003172:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003176:	6013      	str	r3, [r2, #0]
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <LL_RCC_PLLSAI1_Disable>:
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003190:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003194:	6013      	str	r3, [r2, #0]
}
 8003196:	bf00      	nop
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <LL_RCC_PLLSAI1_IsReady>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80031a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b2:	d101      	bne.n	80031b8 <LL_RCC_PLLSAI1_IsReady+0x18>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <LL_RCC_PLLSAI1_IsReady+0x1a>
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80031cc:	2300      	movs	r3, #0
 80031ce:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80031d0:	2300      	movs	r3, #0
 80031d2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d034      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031e8:	d021      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80031ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031ee:	d81b      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031f4:	d01d      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80031f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031fa:	d815      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00b      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003204:	d110      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003214:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003216:	e00d      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f94d 	bl	80034bc <RCCEx_PLLSAI1_ConfigNP>
 8003222:	4603      	mov	r3, r0
 8003224:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003226:	e005      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	77fb      	strb	r3, [r7, #31]
        break;
 800322c:	e002      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800322e:	bf00      	nop
 8003230:	e000      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003232:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003234:	7ffb      	ldrb	r3, [r7, #31]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fee8 	bl	8003014 <LL_RCC_SetSAIClockSource>
 8003244:	e001      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003246:	7ffb      	ldrb	r3, [r7, #31]
 8003248:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003252:	2b00      	cmp	r3, #0
 8003254:	d046      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003256:	f7ff ff56 	bl	8003106 <LL_RCC_GetRTCClockSource>
 800325a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	429a      	cmp	r2, r3
 8003264:	d03c      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003266:	f7fe fc59 	bl	8001b1c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff30 	bl	80030da <LL_RCC_SetRTCClockSource>
 800327a:	e02e      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800327c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003286:	f7ff ff4b 	bl	8003120 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800328a:	f7ff ff5a 	bl	8003142 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800329c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80032a6:	f7ff fde1 	bl	8002e6c <LL_RCC_LSE_IsEnabled>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d114      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032b0:	f7fe f868 	bl	8001384 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80032b6:	e00b      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b8:	f7fe f864 	bl	8001384 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d902      	bls.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	77fb      	strb	r3, [r7, #31]
              break;
 80032ce:	e004      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80032d0:	f7ff fdde 	bl	8002e90 <LL_RCC_LSE_IsReady>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d1ee      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80032da:	7ffb      	ldrb	r3, [r7, #31]
 80032dc:	77bb      	strb	r3, [r7, #30]
 80032de:	e001      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e0:	7ffb      	ldrb	r3, [r7, #31]
 80032e2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d004      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fe2a 	bl	8002f4e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fe35 	bl	8002f7a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d004      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fe5d 	bl	8002fe0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	d004      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fe52 	bl	8002fe0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fe2a 	bl	8002fa6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d004      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fe1f 	bl	8002fa6 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d022      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fe8d 	bl	8003098 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003386:	d107      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003396:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033a0:	d10b      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f8e3 	bl	8003572 <RCCEx_PLLSAI1_ConfigNQ>
 80033ac:	4603      	mov	r3, r0
 80033ae:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80033b0:	7ffb      	ldrb	r3, [r7, #31]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80033b6:	7ffb      	ldrb	r3, [r7, #31]
 80033b8:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d02b      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d008      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033d8:	d003      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fe2a 	bl	8003040 <LL_RCC_SetRNGClockSource>
 80033ec:	e00a      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	2000      	movs	r0, #0
 80033fa:	f7ff fe21 	bl	8003040 <LL_RCC_SetRNGClockSource>
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff fe34 	bl	800306c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800340c:	d107      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800340e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003418:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800341c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003426:	2b00      	cmp	r3, #0
 8003428:	d022      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fe3d 	bl	80030ae <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800343c:	d107      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800343e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003456:	d10b      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	4618      	mov	r0, r3
 800345e:	f000 f8e3 	bl	8003628 <RCCEx_PLLSAI1_ConfigNR>
 8003462:	4603      	mov	r3, r0
 8003464:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003466:	7ffb      	ldrb	r3, [r7, #31]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800346c:	7ffb      	ldrb	r3, [r7, #31]
 800346e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fd26 	bl	8002ed2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fd45 	bl	8002f26 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fd2c 	bl	8002efe <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80034a6:	7fbb      	ldrb	r3, [r7, #30]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3720      	adds	r7, #32
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80034b4:	f7ff fcfe 	bl	8002eb4 <LL_RCC_MSI_EnablePLLMode>
}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}

080034bc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034c8:	f7ff fe5b 	bl	8003182 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034cc:	f7fd ff5a 	bl	8001384 <HAL_GetTick>
 80034d0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034d2:	e009      	b.n	80034e8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034d4:	f7fd ff56 	bl	8001384 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d902      	bls.n	80034e8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	73fb      	strb	r3, [r7, #15]
      break;
 80034e6:	e004      	b.n	80034f2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034e8:	f7ff fe5a 	bl	80031a0 <LL_RCC_PLLSAI1_IsReady>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d137      	bne.n	8003568 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80034f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800350c:	4313      	orrs	r3, r2
 800350e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003522:	4313      	orrs	r3, r2
 8003524:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003526:	f7ff fe1d 	bl	8003164 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800352a:	f7fd ff2b 	bl	8001384 <HAL_GetTick>
 800352e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003530:	e009      	b.n	8003546 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003532:	f7fd ff27 	bl	8001384 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d902      	bls.n	8003546 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	73fb      	strb	r3, [r7, #15]
        break;
 8003544:	e004      	b.n	8003550 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003546:	f7ff fe2b 	bl	80031a0 <LL_RCC_PLLSAI1_IsReady>
 800354a:	4603      	mov	r3, r0
 800354c:	2b01      	cmp	r3, #1
 800354e:	d1f0      	bne.n	8003532 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d108      	bne.n	8003568 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003564:	4313      	orrs	r3, r2
 8003566:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800357e:	f7ff fe00 	bl	8003182 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003582:	f7fd feff 	bl	8001384 <HAL_GetTick>
 8003586:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003588:	e009      	b.n	800359e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800358a:	f7fd fefb 	bl	8001384 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d902      	bls.n	800359e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	73fb      	strb	r3, [r7, #15]
      break;
 800359c:	e004      	b.n	80035a8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800359e:	f7ff fdff 	bl	80031a0 <LL_RCC_PLLSAI1_IsReady>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f0      	bne.n	800358a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d137      	bne.n	800361e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035c2:	4313      	orrs	r3, r2
 80035c4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80035c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035d8:	4313      	orrs	r3, r2
 80035da:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80035dc:	f7ff fdc2 	bl	8003164 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e0:	f7fd fed0 	bl	8001384 <HAL_GetTick>
 80035e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035e6:	e009      	b.n	80035fc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035e8:	f7fd fecc 	bl	8001384 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d902      	bls.n	80035fc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	73fb      	strb	r3, [r7, #15]
        break;
 80035fa:	e004      	b.n	8003606 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035fc:	f7ff fdd0 	bl	80031a0 <LL_RCC_PLLSAI1_IsReady>
 8003600:	4603      	mov	r3, r0
 8003602:	2b01      	cmp	r3, #1
 8003604:	d1f0      	bne.n	80035e8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d108      	bne.n	800361e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800361a:	4313      	orrs	r3, r2
 800361c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003634:	f7ff fda5 	bl	8003182 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003638:	f7fd fea4 	bl	8001384 <HAL_GetTick>
 800363c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800363e:	e009      	b.n	8003654 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003640:	f7fd fea0 	bl	8001384 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d902      	bls.n	8003654 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	73fb      	strb	r3, [r7, #15]
      break;
 8003652:	e004      	b.n	800365e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003654:	f7ff fda4 	bl	80031a0 <LL_RCC_PLLSAI1_IsReady>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d137      	bne.n	80036d4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003678:	4313      	orrs	r3, r2
 800367a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800367c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800368e:	4313      	orrs	r3, r2
 8003690:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003692:	f7ff fd67 	bl	8003164 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003696:	f7fd fe75 	bl	8001384 <HAL_GetTick>
 800369a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800369c:	e009      	b.n	80036b2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800369e:	f7fd fe71 	bl	8001384 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d902      	bls.n	80036b2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	73fb      	strb	r3, [r7, #15]
        break;
 80036b0:	e004      	b.n	80036bc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036b2:	f7ff fd75 	bl	80031a0 <LL_RCC_PLLSAI1_IsReady>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d1f0      	bne.n	800369e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d108      	bne.n	80036d4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80036c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036d0:	4313      	orrs	r3, r2
 80036d2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e09f      	b.n	8003832 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd fc06 	bl	8000f18 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003714:	4b49      	ldr	r3, [pc, #292]	; (800383c <HAL_RTC_Init+0x15c>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b10      	cmp	r3, #16
 800371e:	d07e      	beq.n	800381e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	22ca      	movs	r2, #202	; 0xca
 8003726:	625a      	str	r2, [r3, #36]	; 0x24
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2253      	movs	r2, #83	; 0x53
 800372e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fa1d 	bl	8003b70 <RTC_EnterInitMode>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	22ff      	movs	r2, #255	; 0xff
 8003742:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2204      	movs	r2, #4
 8003748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	e067      	b.n	8003822 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003764:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6899      	ldr	r1, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	68d2      	ldr	r2, [r2, #12]
 800378c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6919      	ldr	r1, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	041a      	lsls	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037b0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0203 	bic.w	r2, r2, #3
 80037c0:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d113      	bne.n	8003810 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f99b 	bl	8003b24 <HAL_RTC_WaitForSynchro>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	22ff      	movs	r2, #255	; 0xff
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2204      	movs	r2, #4
 8003800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e010      	b.n	8003832 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	22ff      	movs	r2, #255	; 0xff
 8003816:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]
 800381c:	e001      	b.n	8003822 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d103      	bne.n	8003830 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40002800 	.word	0x40002800

08003840 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_RTC_SetTime+0x1a>
 8003856:	2302      	movs	r3, #2
 8003858:	e0b2      	b.n	80039c0 <HAL_RTC_SetTime+0x180>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d126      	bne.n	80038be <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2200      	movs	r2, #0
 8003882:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 f99b 	bl	8003bc4 <RTC_ByteToBcd2>
 800388e:	4603      	mov	r3, r0
 8003890:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	785b      	ldrb	r3, [r3, #1]
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f994 	bl	8003bc4 <RTC_ByteToBcd2>
 800389c:	4603      	mov	r3, r0
 800389e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80038a0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	789b      	ldrb	r3, [r3, #2]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f98c 	bl	8003bc4 <RTC_ByteToBcd2>
 80038ac:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80038ae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	78db      	ldrb	r3, [r3, #3]
 80038b6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	e018      	b.n	80038f0 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2200      	movs	r2, #0
 80038d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	785b      	ldrb	r3, [r3, #1]
 80038dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80038de:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80038e4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	78db      	ldrb	r3, [r3, #3]
 80038ea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	22ca      	movs	r2, #202	; 0xca
 80038f6:	625a      	str	r2, [r3, #36]	; 0x24
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2253      	movs	r2, #83	; 0x53
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f935 	bl	8003b70 <RTC_EnterInitMode>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00d      	beq.n	8003928 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	22ff      	movs	r2, #255	; 0xff
 8003912:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2204      	movs	r2, #4
 8003918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e04b      	b.n	80039c0 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003932:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003936:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003946:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6899      	ldr	r1, [r3, #8]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	431a      	orrs	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800396e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d113      	bne.n	80039a6 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f8d0 	bl	8003b24 <HAL_RTC_WaitForSynchro>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00d      	beq.n	80039a6 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	22ff      	movs	r2, #255	; 0xff
 8003990:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2204      	movs	r2, #4
 8003996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e00c      	b.n	80039c0 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	22ff      	movs	r2, #255	; 0xff
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80039be:	2300      	movs	r3, #0
  }
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd90      	pop	{r4, r7, pc}

080039c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_RTC_SetDate+0x1a>
 80039de:	2302      	movs	r3, #2
 80039e0:	e09c      	b.n	8003b1c <HAL_RTC_SetDate+0x154>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10e      	bne.n	8003a16 <HAL_RTC_SetDate+0x4e>
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	785b      	ldrb	r3, [r3, #1]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	785b      	ldrb	r3, [r3, #1]
 8003a08:	f023 0310 	bic.w	r3, r3, #16
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	330a      	adds	r3, #10
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d11c      	bne.n	8003a56 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	78db      	ldrb	r3, [r3, #3]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 f8cf 	bl	8003bc4 <RTC_ByteToBcd2>
 8003a26:	4603      	mov	r3, r0
 8003a28:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	785b      	ldrb	r3, [r3, #1]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f8c8 	bl	8003bc4 <RTC_ByteToBcd2>
 8003a34:	4603      	mov	r3, r0
 8003a36:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a38:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	789b      	ldrb	r3, [r3, #2]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f8c0 	bl	8003bc4 <RTC_ByteToBcd2>
 8003a44:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003a46:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	e00e      	b.n	8003a74 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	78db      	ldrb	r3, [r3, #3]
 8003a5a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	785b      	ldrb	r3, [r3, #1]
 8003a60:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003a62:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003a68:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	22ca      	movs	r2, #202	; 0xca
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2253      	movs	r2, #83	; 0x53
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f873 	bl	8003b70 <RTC_EnterInitMode>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00d      	beq.n	8003aac <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	22ff      	movs	r2, #255	; 0xff
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e037      	b.n	8003b1c <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ab6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003aba:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d113      	bne.n	8003b02 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f822 	bl	8003b24 <HAL_RTC_WaitForSynchro>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00d      	beq.n	8003b02 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	22ff      	movs	r2, #255	; 0xff
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2204      	movs	r2, #4
 8003af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e00c      	b.n	8003b1c <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	22ff      	movs	r2, #255	; 0xff
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
  }
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd90      	pop	{r4, r7, pc}

08003b24 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b3a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003b3c:	f7fd fc22 	bl	8001384 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b42:	e009      	b.n	8003b58 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b44:	f7fd fc1e 	bl	8001384 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b52:	d901      	bls.n	8003b58 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e007      	b.n	8003b68 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0ee      	beq.n	8003b44 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d119      	bne.n	8003bba <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003b90:	f7fd fbf8 	bl	8001384 <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b96:	e009      	b.n	8003bac <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003b98:	f7fd fbf4 	bl	8001384 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba6:	d901      	bls.n	8003bac <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e007      	b.n	8003bbc <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0ee      	beq.n	8003b98 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8003bd6:	e005      	b.n	8003be4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003bde:	7afb      	ldrb	r3, [r7, #11]
 8003be0:	3b0a      	subs	r3, #10
 8003be2:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8003be4:	7afb      	ldrb	r3, [r7, #11]
 8003be6:	2b09      	cmp	r3, #9
 8003be8:	d8f6      	bhi.n	8003bd8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	7afb      	ldrb	r3, [r7, #11]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	b2db      	uxtb	r3, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e0a8      	b.n	8003d70 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	22ca      	movs	r2, #202	; 0xca
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2253      	movs	r2, #83	; 0x53
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d020      	beq.n	8003c8e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8003c4c:	f7fd fb9a 	bl	8001384 <HAL_GetTick>
 8003c50:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003c52:	e015      	b.n	8003c80 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c54:	f7fd fb96 	bl	8001384 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c62:	d90d      	bls.n	8003c80 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	22ff      	movs	r2, #255	; 0xff
 8003c6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e077      	b.n	8003d70 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e2      	bne.n	8003c54 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003cae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003cb0:	f7fd fb68 	bl	8001384 <HAL_GetTick>
 8003cb4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003cb6:	e015      	b.n	8003ce4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003cb8:	f7fd fb64 	bl	8001384 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cc6:	d90d      	bls.n	8003ce4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	22ff      	movs	r2, #255	; 0xff
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e045      	b.n	8003d70 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0e2      	beq.n	8003cb8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0207 	bic.w	r2, r2, #7
 8003d08:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6899      	ldr	r1, [r3, #8]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003d1a:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d20:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003d22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d26:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003d2a:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003d30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d34:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d44:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d54:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	22ff      	movs	r2, #255	; 0xff
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	58000800 	.word	0x58000800

08003d7c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fc fba0 	bl	80004d8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003da8:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003dac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003db0:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	58000800 	.word	0x58000800

08003dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e095      	b.n	8003f06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d108      	bne.n	8003df4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dea:	d009      	beq.n	8003e00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	61da      	str	r2, [r3, #28]
 8003df2:	e005      	b.n	8003e00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fd f8a8 	bl	8000f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e40:	d902      	bls.n	8003e48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	e002      	b.n	8003e4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e56:	d007      	beq.n	8003e68 <HAL_SPI_Init+0xa0>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e60:	d002      	beq.n	8003e68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	ea42 0103 	orr.w	r1, r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	0c1b      	lsrs	r3, r3, #16
 8003ec4:	f003 0204 	and.w	r2, r3, #4
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ee4:	ea42 0103 	orr.w	r1, r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b088      	sub	sp, #32
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_SPI_Transmit+0x22>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e15f      	b.n	80041f0 <HAL_SPI_Transmit+0x2e2>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f38:	f7fd fa24 	bl	8001384 <HAL_GetTick>
 8003f3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d002      	beq.n	8003f54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f52:	e148      	b.n	80041e6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_SPI_Transmit+0x52>
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d102      	bne.n	8003f66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f64:	e13f      	b.n	80041e6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	88fa      	ldrh	r2, [r7, #6]
 8003f7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	88fa      	ldrh	r2, [r7, #6]
 8003f84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fdc:	2b40      	cmp	r3, #64	; 0x40
 8003fde:	d007      	beq.n	8003ff0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ff8:	d94f      	bls.n	800409a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_SPI_Transmit+0xfa>
 8004002:	8afb      	ldrh	r3, [r7, #22]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d142      	bne.n	800408e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	881a      	ldrh	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	1c9a      	adds	r2, r3, #2
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800402c:	e02f      	b.n	800408e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d112      	bne.n	8004062 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	881a      	ldrh	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	1c9a      	adds	r2, r3, #2
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004060:	e015      	b.n	800408e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004062:	f7fd f98f 	bl	8001384 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d803      	bhi.n	800407a <HAL_SPI_Transmit+0x16c>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d102      	bne.n	8004080 <HAL_SPI_Transmit+0x172>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800408c:	e0ab      	b.n	80041e6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1ca      	bne.n	800402e <HAL_SPI_Transmit+0x120>
 8004098:	e080      	b.n	800419c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_SPI_Transmit+0x19a>
 80040a2:	8afb      	ldrh	r3, [r7, #22]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d174      	bne.n	8004192 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d912      	bls.n	80040d8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	881a      	ldrh	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	1c9a      	adds	r2, r3, #2
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b02      	subs	r3, #2
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040d6:	e05c      	b.n	8004192 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	7812      	ldrb	r2, [r2, #0]
 80040e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80040fe:	e048      	b.n	8004192 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d12b      	bne.n	8004166 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	d912      	bls.n	800413e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	881a      	ldrh	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	1c9a      	adds	r2, r3, #2
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b02      	subs	r3, #2
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800413c:	e029      	b.n	8004192 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	7812      	ldrb	r2, [r2, #0]
 800414a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004164:	e015      	b.n	8004192 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004166:	f7fd f90d 	bl	8001384 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d803      	bhi.n	800417e <HAL_SPI_Transmit+0x270>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d102      	bne.n	8004184 <HAL_SPI_Transmit+0x276>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004190:	e029      	b.n	80041e6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1b1      	bne.n	8004100 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	6839      	ldr	r1, [r7, #0]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f947 	bl	8004434 <SPI_EndRxTxTransaction>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e003      	b.n	80041e6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004208:	f7fd f8bc 	bl	8001384 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	4413      	add	r3, r2
 8004216:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004218:	f7fd f8b4 	bl	8001384 <HAL_GetTick>
 800421c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800421e:	4b39      	ldr	r3, [pc, #228]	; (8004304 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	015b      	lsls	r3, r3, #5
 8004224:	0d1b      	lsrs	r3, r3, #20
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	fb02 f303 	mul.w	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800422e:	e054      	b.n	80042da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004236:	d050      	beq.n	80042da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004238:	f7fd f8a4 	bl	8001384 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	429a      	cmp	r2, r3
 8004246:	d902      	bls.n	800424e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d13d      	bne.n	80042ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800425c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004266:	d111      	bne.n	800428c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004270:	d004      	beq.n	800427c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427a:	d107      	bne.n	800428c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004294:	d10f      	bne.n	80042b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e017      	b.n	80042fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4013      	ands	r3, r2
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	bf0c      	ite	eq
 80042ea:	2301      	moveq	r3, #1
 80042ec:	2300      	movne	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d19b      	bne.n	8004230 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000010 	.word	0x20000010

08004308 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	; 0x28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800431a:	f7fd f833 	bl	8001384 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	4413      	add	r3, r2
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800432a:	f7fd f82b 	bl	8001384 <HAL_GetTick>
 800432e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004338:	4b3d      	ldr	r3, [pc, #244]	; (8004430 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	00da      	lsls	r2, r3, #3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	0d1b      	lsrs	r3, r3, #20
 8004348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434a:	fb02 f303 	mul.w	r3, r2, r3
 800434e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004350:	e060      	b.n	8004414 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004358:	d107      	bne.n	800436a <SPI_WaitFifoStateUntilTimeout+0x62>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d104      	bne.n	800436a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004368:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004370:	d050      	beq.n	8004414 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004372:	f7fd f807 	bl	8001384 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437e:	429a      	cmp	r2, r3
 8004380:	d902      	bls.n	8004388 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	2b00      	cmp	r3, #0
 8004386:	d13d      	bne.n	8004404 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004396:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a0:	d111      	bne.n	80043c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043aa:	d004      	beq.n	80043b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b4:	d107      	bne.n	80043c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ce:	d10f      	bne.n	80043f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e010      	b.n	8004426 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	3b01      	subs	r3, #1
 8004412:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	429a      	cmp	r2, r3
 8004422:	d196      	bne.n	8004352 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3728      	adds	r7, #40	; 0x28
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000010 	.word	0x20000010

08004434 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2200      	movs	r2, #0
 8004448:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff ff5b 	bl	8004308 <SPI_WaitFifoStateUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445c:	f043 0220 	orr.w	r2, r3, #32
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e027      	b.n	80044b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2200      	movs	r2, #0
 8004470:	2180      	movs	r1, #128	; 0x80
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f7ff fec0 	bl	80041f8 <SPI_WaitFlagStateUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004482:	f043 0220 	orr.w	r2, r3, #32
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e014      	b.n	80044b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2200      	movs	r2, #0
 8004496:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff ff34 	bl	8004308 <SPI_WaitFifoStateUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044aa:	f043 0220 	orr.w	r2, r3, #32
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e000      	b.n	80044b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <LL_RCC_GetUSARTClockSource>:
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80044c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4013      	ands	r3, r2
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <LL_RCC_GetLPUARTClockSource>:
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80044e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4013      	ands	r3, r2
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e042      	b.n	8004598 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fc fd53 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2224      	movs	r2, #36	; 0x24
 800452e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0201 	bic.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fa50 	bl	80049f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f825 	bl	80045a0 <UART_SetConfig>
 8004556:	4603      	mov	r3, r0
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e01b      	b.n	8004598 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800456e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800457e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 facf 	bl	8004b34 <UART_CheckIdleState>
 8004596:	4603      	mov	r3, r0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a4:	b08c      	sub	sp, #48	; 0x30
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	431a      	orrs	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	431a      	orrs	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4baf      	ldr	r3, [pc, #700]	; (800488c <UART_SetConfig+0x2ec>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045d8:	430b      	orrs	r3, r1
 80045da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4aa4      	ldr	r2, [pc, #656]	; (8004890 <UART_SetConfig+0x2f0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004608:	4313      	orrs	r3, r2
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004616:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	6812      	ldr	r2, [r2, #0]
 800461e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004620:	430b      	orrs	r3, r1
 8004622:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	f023 010f 	bic.w	r1, r3, #15
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a95      	ldr	r2, [pc, #596]	; (8004894 <UART_SetConfig+0x2f4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d125      	bne.n	8004690 <UART_SetConfig+0xf0>
 8004644:	2003      	movs	r0, #3
 8004646:	f7ff ff3b 	bl	80044c0 <LL_RCC_GetUSARTClockSource>
 800464a:	4603      	mov	r3, r0
 800464c:	2b03      	cmp	r3, #3
 800464e:	d81b      	bhi.n	8004688 <UART_SetConfig+0xe8>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0xb8>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	08004669 	.word	0x08004669
 800465c:	08004679 	.word	0x08004679
 8004660:	08004671 	.word	0x08004671
 8004664:	08004681 	.word	0x08004681
 8004668:	2301      	movs	r3, #1
 800466a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800466e:	e042      	b.n	80046f6 <UART_SetConfig+0x156>
 8004670:	2302      	movs	r3, #2
 8004672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004676:	e03e      	b.n	80046f6 <UART_SetConfig+0x156>
 8004678:	2304      	movs	r3, #4
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800467e:	e03a      	b.n	80046f6 <UART_SetConfig+0x156>
 8004680:	2308      	movs	r3, #8
 8004682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004686:	e036      	b.n	80046f6 <UART_SetConfig+0x156>
 8004688:	2310      	movs	r3, #16
 800468a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800468e:	e032      	b.n	80046f6 <UART_SetConfig+0x156>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a7e      	ldr	r2, [pc, #504]	; (8004890 <UART_SetConfig+0x2f0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d12a      	bne.n	80046f0 <UART_SetConfig+0x150>
 800469a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800469e:	f7ff ff1f 	bl	80044e0 <LL_RCC_GetLPUARTClockSource>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046a8:	d01a      	beq.n	80046e0 <UART_SetConfig+0x140>
 80046aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ae:	d81b      	bhi.n	80046e8 <UART_SetConfig+0x148>
 80046b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b4:	d00c      	beq.n	80046d0 <UART_SetConfig+0x130>
 80046b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ba:	d815      	bhi.n	80046e8 <UART_SetConfig+0x148>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <UART_SetConfig+0x128>
 80046c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c4:	d008      	beq.n	80046d8 <UART_SetConfig+0x138>
 80046c6:	e00f      	b.n	80046e8 <UART_SetConfig+0x148>
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ce:	e012      	b.n	80046f6 <UART_SetConfig+0x156>
 80046d0:	2302      	movs	r3, #2
 80046d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046d6:	e00e      	b.n	80046f6 <UART_SetConfig+0x156>
 80046d8:	2304      	movs	r3, #4
 80046da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046de:	e00a      	b.n	80046f6 <UART_SetConfig+0x156>
 80046e0:	2308      	movs	r3, #8
 80046e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046e6:	e006      	b.n	80046f6 <UART_SetConfig+0x156>
 80046e8:	2310      	movs	r3, #16
 80046ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ee:	e002      	b.n	80046f6 <UART_SetConfig+0x156>
 80046f0:	2310      	movs	r3, #16
 80046f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a65      	ldr	r2, [pc, #404]	; (8004890 <UART_SetConfig+0x2f0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	f040 8097 	bne.w	8004830 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004702:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004706:	2b08      	cmp	r3, #8
 8004708:	d823      	bhi.n	8004752 <UART_SetConfig+0x1b2>
 800470a:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <UART_SetConfig+0x170>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	08004735 	.word	0x08004735
 8004714:	08004753 	.word	0x08004753
 8004718:	0800473d 	.word	0x0800473d
 800471c:	08004753 	.word	0x08004753
 8004720:	08004743 	.word	0x08004743
 8004724:	08004753 	.word	0x08004753
 8004728:	08004753 	.word	0x08004753
 800472c:	08004753 	.word	0x08004753
 8004730:	0800474b 	.word	0x0800474b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004734:	f7fe faba 	bl	8002cac <HAL_RCC_GetPCLK1Freq>
 8004738:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800473a:	e010      	b.n	800475e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800473c:	4b56      	ldr	r3, [pc, #344]	; (8004898 <UART_SetConfig+0x2f8>)
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004740:	e00d      	b.n	800475e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004742:	f7fe fa33 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8004746:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004748:	e009      	b.n	800475e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800474a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004750:	e005      	b.n	800475e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800475c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 812b 	beq.w	80049bc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	4a4c      	ldr	r2, [pc, #304]	; (800489c <UART_SetConfig+0x2fc>)
 800476c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004770:	461a      	mov	r2, r3
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	fbb3 f3f2 	udiv	r3, r3, r2
 8004778:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	429a      	cmp	r2, r3
 8004788:	d305      	bcc.n	8004796 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	429a      	cmp	r2, r3
 8004794:	d903      	bls.n	800479e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800479c:	e10e      	b.n	80049bc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	2200      	movs	r2, #0
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	60fa      	str	r2, [r7, #12]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	4a3c      	ldr	r2, [pc, #240]	; (800489c <UART_SetConfig+0x2fc>)
 80047ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2200      	movs	r2, #0
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047c0:	f7fb fcdc 	bl	800017c <__aeabi_uldivmod>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4610      	mov	r0, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	020b      	lsls	r3, r1, #8
 80047d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047da:	0202      	lsls	r2, r0, #8
 80047dc:	6979      	ldr	r1, [r7, #20]
 80047de:	6849      	ldr	r1, [r1, #4]
 80047e0:	0849      	lsrs	r1, r1, #1
 80047e2:	2000      	movs	r0, #0
 80047e4:	460c      	mov	r4, r1
 80047e6:	4605      	mov	r5, r0
 80047e8:	eb12 0804 	adds.w	r8, r2, r4
 80047ec:	eb43 0905 	adc.w	r9, r3, r5
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	469a      	mov	sl, r3
 80047f8:	4693      	mov	fp, r2
 80047fa:	4652      	mov	r2, sl
 80047fc:	465b      	mov	r3, fp
 80047fe:	4640      	mov	r0, r8
 8004800:	4649      	mov	r1, r9
 8004802:	f7fb fcbb 	bl	800017c <__aeabi_uldivmod>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4613      	mov	r3, r2
 800480c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004814:	d308      	bcc.n	8004828 <UART_SetConfig+0x288>
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800481c:	d204      	bcs.n	8004828 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6a3a      	ldr	r2, [r7, #32]
 8004824:	60da      	str	r2, [r3, #12]
 8004826:	e0c9      	b.n	80049bc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800482e:	e0c5      	b.n	80049bc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004838:	d16d      	bne.n	8004916 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800483a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800483e:	3b01      	subs	r3, #1
 8004840:	2b07      	cmp	r3, #7
 8004842:	d82d      	bhi.n	80048a0 <UART_SetConfig+0x300>
 8004844:	a201      	add	r2, pc, #4	; (adr r2, 800484c <UART_SetConfig+0x2ac>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	0800486d 	.word	0x0800486d
 8004850:	08004875 	.word	0x08004875
 8004854:	080048a1 	.word	0x080048a1
 8004858:	0800487b 	.word	0x0800487b
 800485c:	080048a1 	.word	0x080048a1
 8004860:	080048a1 	.word	0x080048a1
 8004864:	080048a1 	.word	0x080048a1
 8004868:	08004883 	.word	0x08004883
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800486c:	f7fe fa34 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 8004870:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004872:	e01b      	b.n	80048ac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004874:	4b08      	ldr	r3, [pc, #32]	; (8004898 <UART_SetConfig+0x2f8>)
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004878:	e018      	b.n	80048ac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800487a:	f7fe f997 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 800487e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004880:	e014      	b.n	80048ac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004888:	e010      	b.n	80048ac <UART_SetConfig+0x30c>
 800488a:	bf00      	nop
 800488c:	cfff69f3 	.word	0xcfff69f3
 8004890:	40008000 	.word	0x40008000
 8004894:	40013800 	.word	0x40013800
 8004898:	00f42400 	.word	0x00f42400
 800489c:	08005e94 	.word	0x08005e94
      default:
        pclk = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8084 	beq.w	80049bc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	4a4b      	ldr	r2, [pc, #300]	; (80049e8 <UART_SetConfig+0x448>)
 80048ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048be:	461a      	mov	r2, r3
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80048c6:	005a      	lsls	r2, r3, #1
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	441a      	add	r2, r3
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	2b0f      	cmp	r3, #15
 80048de:	d916      	bls.n	800490e <UART_SetConfig+0x36e>
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e6:	d212      	bcs.n	800490e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f023 030f 	bic.w	r3, r3, #15
 80048f0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	8bfb      	ldrh	r3, [r7, #30]
 8004900:	4313      	orrs	r3, r2
 8004902:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	8bfa      	ldrh	r2, [r7, #30]
 800490a:	60da      	str	r2, [r3, #12]
 800490c:	e056      	b.n	80049bc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004914:	e052      	b.n	80049bc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004916:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800491a:	3b01      	subs	r3, #1
 800491c:	2b07      	cmp	r3, #7
 800491e:	d822      	bhi.n	8004966 <UART_SetConfig+0x3c6>
 8004920:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <UART_SetConfig+0x388>)
 8004922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004926:	bf00      	nop
 8004928:	08004949 	.word	0x08004949
 800492c:	08004951 	.word	0x08004951
 8004930:	08004967 	.word	0x08004967
 8004934:	08004957 	.word	0x08004957
 8004938:	08004967 	.word	0x08004967
 800493c:	08004967 	.word	0x08004967
 8004940:	08004967 	.word	0x08004967
 8004944:	0800495f 	.word	0x0800495f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004948:	f7fe f9c6 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 800494c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800494e:	e010      	b.n	8004972 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004950:	4b26      	ldr	r3, [pc, #152]	; (80049ec <UART_SetConfig+0x44c>)
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004954:	e00d      	b.n	8004972 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004956:	f7fe f929 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 800495a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800495c:	e009      	b.n	8004972 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004964:	e005      	b.n	8004972 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004970:	bf00      	nop
    }

    if (pclk != 0U)
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	2b00      	cmp	r3, #0
 8004976:	d021      	beq.n	80049bc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	4a1a      	ldr	r2, [pc, #104]	; (80049e8 <UART_SetConfig+0x448>)
 800497e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004982:	461a      	mov	r2, r3
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	fbb3 f2f2 	udiv	r2, r3, r2
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	085b      	lsrs	r3, r3, #1
 8004990:	441a      	add	r2, r3
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	fbb2 f3f3 	udiv	r3, r2, r3
 800499a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	2b0f      	cmp	r3, #15
 80049a0:	d909      	bls.n	80049b6 <UART_SetConfig+0x416>
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a8:	d205      	bcs.n	80049b6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
 80049b4:	e002      	b.n	80049bc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2201      	movs	r2, #1
 80049c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2200      	movs	r2, #0
 80049d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80049d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3730      	adds	r7, #48	; 0x30
 80049e0:	46bd      	mov	sp, r7
 80049e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e6:	bf00      	nop
 80049e8:	08005e94 	.word	0x08005e94
 80049ec:	00f42400 	.word	0x00f42400

080049f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01a      	beq.n	8004b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aee:	d10a      	bne.n	8004b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]
  }
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b098      	sub	sp, #96	; 0x60
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b44:	f7fc fc1e 	bl	8001384 <HAL_GetTick>
 8004b48:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d12f      	bne.n	8004bb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b60:	2200      	movs	r2, #0
 8004b62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f88e 	bl	8004c88 <UART_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d022      	beq.n	8004bb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b86:	653b      	str	r3, [r7, #80]	; 0x50
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b90:	647b      	str	r3, [r7, #68]	; 0x44
 8004b92:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e6      	bne.n	8004b72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e063      	b.n	8004c80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d149      	bne.n	8004c5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f857 	bl	8004c88 <UART_WaitOnFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d03c      	beq.n	8004c5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	623b      	str	r3, [r7, #32]
   return(result);
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8004c00:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e6      	bne.n	8004be0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3308      	adds	r3, #8
 8004c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c32:	61fa      	str	r2, [r7, #28]
 8004c34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	69b9      	ldr	r1, [r7, #24]
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e012      	b.n	8004c80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3758      	adds	r7, #88	; 0x58
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4613      	mov	r3, r2
 8004c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c98:	e04f      	b.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca0:	d04b      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca2:	f7fc fb6f 	bl	8001384 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d302      	bcc.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e04e      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d037      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b80      	cmp	r3, #128	; 0x80
 8004cce:	d034      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d031      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d110      	bne.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2208      	movs	r2, #8
 8004cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f838 	bl	8004d62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e029      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d14:	d111      	bne.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f81e 	bl	8004d62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e00f      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d0a0      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b095      	sub	sp, #84	; 0x54
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d88:	643b      	str	r3, [r7, #64]	; 0x40
 8004d8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e6      	bne.n	8004d6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3308      	adds	r3, #8
 8004da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db2:	f023 0301 	bic.w	r3, r3, #1
 8004db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e3      	bne.n	8004d9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d118      	bne.n	8004e0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f023 0310 	bic.w	r3, r3, #16
 8004df0:	647b      	str	r3, [r7, #68]	; 0x44
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dfa:	61bb      	str	r3, [r7, #24]
 8004dfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6979      	ldr	r1, [r7, #20]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	613b      	str	r3, [r7, #16]
   return(result);
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e6      	bne.n	8004ddc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004e22:	bf00      	nop
 8004e24:	3754      	adds	r7, #84	; 0x54
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b085      	sub	sp, #20
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_UARTEx_DisableFifoMode+0x16>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e027      	b.n	8004e94 <HAL_UARTEx_DisableFifoMode+0x66>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2224      	movs	r2, #36	; 0x24
 8004e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0201 	bic.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e02d      	b.n	8004f14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2224      	movs	r2, #36	; 0x24
 8004ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0201 	bic.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f84f 	bl	8004f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e02d      	b.n	8004f90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2224      	movs	r2, #36	; 0x24
 8004f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f811 	bl	8004f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d108      	bne.n	8004fba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004fb8:	e031      	b.n	800501e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004fba:	2308      	movs	r3, #8
 8004fbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004fbe:	2308      	movs	r3, #8
 8004fc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	0e5b      	lsrs	r3, r3, #25
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	0f5b      	lsrs	r3, r3, #29
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fe2:	7bbb      	ldrb	r3, [r7, #14]
 8004fe4:	7b3a      	ldrb	r2, [r7, #12]
 8004fe6:	4911      	ldr	r1, [pc, #68]	; (800502c <UARTEx_SetNbDataToProcess+0x94>)
 8004fe8:	5c8a      	ldrb	r2, [r1, r2]
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004fee:	7b3a      	ldrb	r2, [r7, #12]
 8004ff0:	490f      	ldr	r1, [pc, #60]	; (8005030 <UARTEx_SetNbDataToProcess+0x98>)
 8004ff2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ff4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	7b7a      	ldrb	r2, [r7, #13]
 8005004:	4909      	ldr	r1, [pc, #36]	; (800502c <UARTEx_SetNbDataToProcess+0x94>)
 8005006:	5c8a      	ldrb	r2, [r1, r2]
 8005008:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800500c:	7b7a      	ldrb	r2, [r7, #13]
 800500e:	4908      	ldr	r1, [pc, #32]	; (8005030 <UARTEx_SetNbDataToProcess+0x98>)
 8005010:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005012:	fb93 f3f2 	sdiv	r3, r3, r2
 8005016:	b29a      	uxth	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	08005eac 	.word	0x08005eac
 8005030:	08005eb4 	.word	0x08005eb4

08005034 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800503c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005040:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	b29b      	uxth	r3, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	b29b      	uxth	r3, r3
 8005052:	4013      	ands	r3, r2
 8005054:	b29a      	uxth	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	1d3b      	adds	r3, r7, #4
 8005074:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <memset>:
 80050a6:	4402      	add	r2, r0
 80050a8:	4603      	mov	r3, r0
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d100      	bne.n	80050b0 <memset+0xa>
 80050ae:	4770      	bx	lr
 80050b0:	f803 1b01 	strb.w	r1, [r3], #1
 80050b4:	e7f9      	b.n	80050aa <memset+0x4>
	...

080050b8 <__libc_init_array>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4d0d      	ldr	r5, [pc, #52]	; (80050f0 <__libc_init_array+0x38>)
 80050bc:	4c0d      	ldr	r4, [pc, #52]	; (80050f4 <__libc_init_array+0x3c>)
 80050be:	1b64      	subs	r4, r4, r5
 80050c0:	10a4      	asrs	r4, r4, #2
 80050c2:	2600      	movs	r6, #0
 80050c4:	42a6      	cmp	r6, r4
 80050c6:	d109      	bne.n	80050dc <__libc_init_array+0x24>
 80050c8:	4d0b      	ldr	r5, [pc, #44]	; (80050f8 <__libc_init_array+0x40>)
 80050ca:	4c0c      	ldr	r4, [pc, #48]	; (80050fc <__libc_init_array+0x44>)
 80050cc:	f000 f826 	bl	800511c <_init>
 80050d0:	1b64      	subs	r4, r4, r5
 80050d2:	10a4      	asrs	r4, r4, #2
 80050d4:	2600      	movs	r6, #0
 80050d6:	42a6      	cmp	r6, r4
 80050d8:	d105      	bne.n	80050e6 <__libc_init_array+0x2e>
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e0:	4798      	blx	r3
 80050e2:	3601      	adds	r6, #1
 80050e4:	e7ee      	b.n	80050c4 <__libc_init_array+0xc>
 80050e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ea:	4798      	blx	r3
 80050ec:	3601      	adds	r6, #1
 80050ee:	e7f2      	b.n	80050d6 <__libc_init_array+0x1e>
 80050f0:	08005ec4 	.word	0x08005ec4
 80050f4:	08005ec4 	.word	0x08005ec4
 80050f8:	08005ec4 	.word	0x08005ec4
 80050fc:	08005ec8 	.word	0x08005ec8

08005100 <memcpy>:
 8005100:	440a      	add	r2, r1
 8005102:	4291      	cmp	r1, r2
 8005104:	f100 33ff 	add.w	r3, r0, #4294967295
 8005108:	d100      	bne.n	800510c <memcpy+0xc>
 800510a:	4770      	bx	lr
 800510c:	b510      	push	{r4, lr}
 800510e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005116:	4291      	cmp	r1, r2
 8005118:	d1f9      	bne.n	800510e <memcpy+0xe>
 800511a:	bd10      	pop	{r4, pc}

0800511c <_init>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	bf00      	nop
 8005120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005122:	bc08      	pop	{r3}
 8005124:	469e      	mov	lr, r3
 8005126:	4770      	bx	lr

08005128 <_fini>:
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	bf00      	nop
 800512c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512e:	bc08      	pop	{r3}
 8005130:	469e      	mov	lr, r3
 8005132:	4770      	bx	lr
